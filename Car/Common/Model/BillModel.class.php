<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/2/20
 * Time: 16:51
 * 发票相关
 * @update-time: 2017-12-21 15:51:36
 * @author: 王亚雄
 */

namespace Common\Model;
use Think\Model;


abstract class BillModel extends Model
{
    protected $tableName = 'bill';
    protected $garage_id = array();  //管理员所属的停车场，可能有多个id //主要用于PC端，wap端会指定一个ID
    protected $garage_name = ""; //停车场名称
    protected $kf_address = ""; //客服地址

    protected $user_id = 0;     //当前操作用户
    protected $admin_id = 0;    //当前操作管理员

    //角色配置
    const ADMIN_ROLE = 4;
    protected $kf_role = 0;
    public $allow_roles = array();

    //发票状态
    const BILL_STATUS_YSQ = 0; //已申请，待审核
    const BILL_STATUS_DLQ = 1; //已审核，待领取
    const BILL_STATUS_YLQ = 2; //已领取
    const BILL_STATUS_YHJ = 4; //客服回绝了用户的发票申请
    const BILL_MIN_LOAN_SUM = 0.1; //申请发票的限制，消费总额至少需要达到的数额
    protected $receive_type = "byself";//发票领取方式 byself,express
    const EXPRESS_LOAN_SUM = 200; // 达到多少数额后能够邮寄

    //消息链接地址
    const AUDIT_DETAIL_URL = "http://www.hdhsmart.com/Car/index.php?m=Home&c=Bill&a=audit_bill_list"; //客服审核页
    const DETAIL_URL = "http://www.hdhsmart.com/Car/index.php?m=Home&c=Bill&a=bill_list"; //客服审核页


    static $bill_id = 0;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        //echo "功能未开启，若需开启请记得把推送对象还原。line 297";exit();
        $this->user_id      = $this->get_user_id();
        $this->admin_id      = $this->get_admin_id();
        $this->garage_id    = $this->get_garage_id();
        $this->garage_name  = $this->get_garage_name($this->garage_id[0]);
        $this->kf_address   = $this->get_kf_address($this->garage_id[0]);
        $this->kf_role = $this->get_kf_role($this->garage_id[0]);
        $this->allow_roles = array($this->kf_role,self::ADMIN_ROLE);

//        if(!$this->user_id){
//            exit("出错了！你无权访问，或者也许是客服角色未绑定任何用户");
//        }


    }

    //获取缴费记录  子类实现
    abstract public function get_record($user_id=0,$garage_id=0,$start_time=0);
    //创建发票记录将消费记录标记为发票 子类实现
    abstract public function insert_bill($pay_ids,$bill_id);

    //获取发票列表 包括账单信息等数据
    abstract public function get_bill_list($user_id=0,$bill_id=0);

    //用户发票列表
    public function get_user_bill_list(){
        return $this->get_bill_list($this->user_id);
    }

    //用户发票列表2
    public function get_user_bill_list_two($bill_id){
        return $this->get_bill_list($this->user_id,$bill_id);
    }

    //获取用户ID
    protected function get_user_id(){
        if(IS_WECHAT){
            $user_id = session('user_id');
        }else{
            $admin_info = admin_info(); //获取所有该管理员下所有的用户
            $user_id = $admin_info[0]['user_id'] ?: 0; //选择第一个用户作为PC端的user_id
        }
        return $user_id;
    }

    //获取adminID
    protected function get_admin_id(){
        if(IS_WECHAT){
            $admin_id = user_info()['ad_id']||0;
        }else{
            $admin_id = session('admin_id');
        }
        return $admin_id;
    }

    //获取停车场ID
    /**
     * @return array
     */
    protected function get_garage_id(){
        if(IS_WECHAT){

            $garage_id = array(session("garage_id"));

        }else{//PC端
            //获取所有停车场ID
            $all_garage_id = M('garage')->select();
            $all_garage_id = array_column($all_garage_id,'garage_id');
            $garage_id = M('admin')->where('ad_id=%d',$this->admin_id)->getField('garage_id');
            //admin时选择所有停车场ID 作为他的所属停车场
            $garage_id = $garage_id ? explode(',',$garage_id) : $all_garage_id;
            //如果有get参数传入则进行筛选
            if($get_garage_id = I('get.garage_id')){
                $garage_id = array_intersect($garage_id,array($get_garage_id));
            }

        }

        return $garage_id;
    }

    //获取停车场名称
    public function get_garage_name($garage_id){
        static $garage_list = array();
        if(!$garage_list){
            $tmp = array();
            $garage_list = M('garage')->select();
            foreach($garage_list as &$row){
                $tmp[$row['garage_id']] = $row['garage_name'];
            }
            $garage_list = $tmp;
        }
        return $garage_list[$garage_id];
    }

    //获取客服所在地
    protected function get_kf_address($garage_id){
        $arr = array(
            2=>'广发大厦24楼客服服务中心',
            4=>"钰龙大厦xx楼"
        );
        return $arr[$garage_id];
    }

    //获取停车场客服角色
    protected function get_kf_role($garage_id){

        $arr = array(
            //停车场ID   =>  客服角色ID
            2           =>  3,
            4           =>  5,
        );

        return $arr[$garage_id];
    }

    //TODO::设置发票发件的地址ID，根据每个停车场会有不同
    protected function get_garage_address($garage_id){

        $address_list = array(
            2 => 0,
        );
        $address_id = $address_list[$garage_id];//pigcms_user_adress 主键
        return $address_id;
    }

    //获取发票状态描述
    public function bill_status_desc($status=-1,$receive_type='byself'){
        $arr = array(
            self::BILL_STATUS_YSQ=>array(
                "已申请",
                "待审核",
                "审核",
                "您的发票申请已提交,请等待审核"
            ),
            self::BILL_STATUS_DLQ=>array(
                "已审核",
                "待领取",
                "核销",
                $receive_type==="byself"
                    ?"您的发票申请已经通过审核，请于一个工作日后到{$this->kf_address}领取"
                    :"您的发票申请已通过审核,发票会在3日内快递送达",
            ),
            self::BILL_STATUS_YLQ=>array(
                "已核销",
                "已领取",
                "已核销",
                "您的发票已经领取，如有疑问请联系客服"
            ),
        );

        if($status===-1){
            return $arr;
        }else{
            return $arr[$status];
        }
    }

    public function get_receive_type_name($receive_type=-1){
        $types = array(
            'byself'=>"上门自领",
            'express'=>"邮寄"
        );

        if($receive_type===-1) return $types;
        return $types[$receive_type];
    }



    //获取用户的消费记录 临时停车
    public function get_user_record($start_time=0){
        return $this->get_record($this->user_id,$this->garage_id[0],$start_time);
    }

    //获取发票详情
    public function get_bill_detail($bill_id)
    {
        return $this->get_bill_list(0,$bill_id)[$bill_id];
    }

    //管理员审核发票列表
    public function audit_bill_list(){
        return $this->get_bill_list();
    }


    /**
     * 创建发票
     * @param $pay_ids
     */
    public function create_bill($pay_ids,$express_id=0){
        if(!self::$bill_id){
            $data = array(
                'user_id'=>user_info()['user_id'],
                'create_time'=>time(),
                'bill_status'=>self::BILL_STATUS_YSQ,
                'audit_id1'=>0,
                'audit_id2'=>0,
                'garage_id'=>$this->garage_id[0],//账单所属停车场跟随用户当前选择的停车场
                'is_del'=>'0',
                'receive_type'=>$express_id ? "express" : "byself",
                'express_id'=>$express_id,
            );
            self::$bill_id =  $this->add($data);
            //临时需求修改，用户申请发票时就默认为已审核状态
            $this->audit(self::$bill_id,self::BILL_STATUS_YSQ);
        }
        $re = $this->insert_bill($pay_ids,self::$bill_id);
        if($re!==false){
            return self::$bill_id;
        }else{
            return false;
        }


    }

    //向客服推送消息
    public function send_msg_to_kf($bill_id){
        $wechat = new WechatModel();
        $tpl_id = WechatModel::TPLID_LCSPTX;
        $url    = self::AUDIT_DETAIL_URL . '&bill_id=' . $bill_id;
        $bill_data  = $this->get_bill_merage_detail($bill_id);
        $data = array(
            'first'=>array(
                'value'=>$this->garage_name . "发票申请提醒",
                'color'=>"#029700",
            ),
            'keyword1'=>array(
                'value'=>'金额：￥' . $bill_data['loan_sum']
                    . ','
                    . '车牌：'. join(',',$bill_data['car_no_list']),
                'color'=>"#000000",
            ),
            'keyword2'=>array(
                'value'=>$bill_data['user_name'],
                'color'=>"#000000",
            ),
            'keyword3'=>array(
                'value'=>"发票申请提醒",
                'color'=>"#000000",
            ),
            'keyword4'=>array(
                'value'=>date('Y-m-d H:i:s',time()),
                'color'=>"#000000",
            ),
        );


        $openids = $this->get_kf_openids();
//        $openids = array('ohgcf0jY6c8Rnj8hgkJw8mcVpOR8');//我的openid 测试用
        $res = $wechat->send_tpl_messages($openids,$tpl_id,$url,$data);
        return $res;
    }
    //获取客服的openids 以智慧助手后台为准
    public function get_kf_openids(){
        $role_id = 77; //pigcms_role
        $village_id =  M('garage','smart_')->where('garage_id=%d',$this->garage_id[0])->getField('village_id');
        $village_id = $village_id?:4;
        $map = array();
        $map['village_id'] = array('eq',$village_id);
        $map['role_id'] = array('eq',$role_id);
        $list = M('admin','pigcms_')->where('role_id=%d and village_id=%d',$role_id,$village_id)->select();
        //dump($list);
        $openids = array_column($list,'openid');
        return $openids;

    }

    public function can_audit(){
        $re = false;
        if(in_array(session('openid'),$this->get_kf_openids())){
            $re = true;
        }
        return $re;
    }



    //向用用户推送消息
    public function send_msg_to_user($bill_id){
        $wechat = new WechatModel();
        $tpl_id = WechatModel::TPLID_LCSPTX;
        $url    = self::DETAIL_URL . '&bill_id=' . $bill_id;
        $bill_data  =  $this->get_bill_merage_detail($bill_id);
        $data = array(
            'first'=>array(
                'value'=>$this->garage_name . "发票申请提醒",
                'color'=>"#029700",
            ),
            'keyword1'=>array(
                'value'=>'金额：￥' . $bill_data['loan_sum']
                    . ','
                    . '车牌：'. join(',',$bill_data['car_no_list']),
                'color'=>"#000000",
                'color'=>"#000000",
            ),
            'keyword2'=>array(
                'value'=>$bill_data['user_name'],
                'color'=>"#000000",
            ),
            'keyword3'=>array(
                'value'=>$bill_data['bill_status_desc'][3],
                'color'=>"#000000",
            ),
            'keyword4'=>array(
                'value'=>date('Y-m-d H:i:s',time()),
                'color'=>"#000000",
            ),
        );

        $openid =  array(user_info($bill_data['user_id'])['user_wx_opid']);
        $res = $wechat->send_tpl_messages($openid,$tpl_id,$url,$data);
        return $res;
    }

    //管理员审核修改发票状态
    public function audit($bill_id,$bill_status){
        $save = array();
        switch($bill_status){
            case 0:
                $save = array(
                    'audit_id1'=>$this->user_id,
                    'audit_id2'=>0,
                    'bill_status'=>1
                );
                break;
            case 1:
                $save = array(
                    'audit_id2'=>$this->user_id,
                    'bill_status'=>2
                );
        }

        if($save){
            $re = $this->where('bill_id=%d',$bill_id)->save($save);
            if($re!==false){
                return $save['bill_status'];
            }
        }

    }

    /**
     * 添加到寄件信息
     * @param $shipping_adid 收件地址外键
     */
    public function insert_into_express_order($shipping_adid){
        //TODO 指定发票发件地址，根据每个项目会有同
        $billing_id = $this->get_garage_address($this->garage_id[0]);
        $data = array(
            'user_id'=>0,
            'billing_adid'=>$billing_id,
            'goods_type_name'=>"发票",
            'billing_type_id'=>"免费包邮",
            'shipping_adid'=>$shipping_adid,
            'pay_type_name'=>"发票寄送",
            'ems_order_id'=>"",
            'ems_order_update_time'=>0,
            'create_time'=>time(),
            'is_del'=>0,
            'save_pay'=>0,
            'time_period'=>0,
            'status'=>1,
            'type_id'=>2,
            'smart_user_id'=>user_info()['user_id'],
        );

        $express_model = new ExpressModel();
        $express_id = $express_model->add($data);
        return $express_id;
    }



    /******************************************/
    //查询发票的消费记录相关信息
    //全部的
    public function get_bill_merage_list($user_id=0,$bill_id=0){
        $park_model = new ParkBillModel();
        $yueka_model = new YuekaBillModel();
        $park_list = $park_model->get_bill_list($user_id,$bill_id);
        $yueka_list = $yueka_model->get_bill_list($user_id,$bill_id);
        //合计数据
        $bill_ids = array_unique(
            array_merge(
                array_keys($park_list)?:[],
                array_keys($yueka_list)?:[]
            )
        );

        $list = array();
        foreach($bill_ids as $id){
            $park_info = $park_list[$id];
            $yueka_info = $yueka_list[$id];
            $list[] = $this->merage_info($park_info,$yueka_info);
        }
        return $list;
    }
    //用户的
    public function get_user_bill_merage_list(){
        return $this->get_bill_merage_list($this->user_id);
    }


    //单一发票
    public function get_bill_merage_detail($bill_id){
        return $this->get_bill_merage_list(0,$bill_id)[0];
    }


    //合并多种发票的数据
    public function merage_info($park_info,$yueka_info){
        $info = $park_info?:$yueka_info;
        //消费记录合并
        $info['pay_list'] = array_merge(
            $park_info['pay_list']?:[],
            $yueka_info['pay_list']?:[]
        );
        //消费总额合计
        $info['loan_sum'] =  ($park_info['loan_sum']?:0) +($yueka_info['loan_sum']?:0);
        //消费记录数合计
        $info['count_pay_list'] =  ($park_info['count_pay_list']?:0) +($yueka_info['count_pay_list']?:0);
        //车牌统计
        $info['car_no_list'] = array_unique(
            array_merge(
                $park_info['car_no_list']?:[],
                $yueka_info['car_no_list']?:[]
            )
        );
        //支付时间区间统计
        $info['max_time'] = max($park_info['max_time'],$yueka_info['max_time']);
        $info['min_time'] = min($park_info['min_time'],$yueka_info['min_time']);
        return $info;
    }

}
