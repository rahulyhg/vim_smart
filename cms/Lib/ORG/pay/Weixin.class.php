<?phpclass Weixin{    protected $order_info;    protected $pay_money;    protected $pay_type;    protected $is_mobile;    protected $pay_config;    protected $user_info;    public function __construct($order_info,$pay_money,$pay_type,$pay_config,$user_info,$is_mobile=0){        $this->order_info = $order_info;        $this->pay_money  = $pay_money;        $this->pay_type   = $pay_type;        $this->is_mobile   = $is_mobile;        $this->pay_config = $pay_config;        $this->user_info  = $user_info;        $this->config = $this->getconfig();    }    /*工具类getconfig   * 获取表中的配置项   *2016.11.17   */    protected function getconfig(){        $m=D('config');        $configArr = $m->field("name,value")->select();        foreach($configArr as $key=>$value){            $config[$value['name']] = $value['value'];        }        return $config;    }    public function pay($ticket=null, $deviceId=null,$notify_url=""){        if(empty($this->pay_config['pay_weixin_appid']) || empty($this->pay_config['pay_weixin_mchid']) || empty($this->pay_config['pay_weixin_key']) || empty($this->pay_config['pay_weixin_appsecret'])){            return array('error'=>1,'msg'=>'微信支付缺少配置信息！请联系管理员处理或选择其他支付方式。');        }        if($this->is_mobile == 2){            return $this->app_pay($ticket, $deviceId);        }elseif($this->is_mobile==1){            return $this->mobile_pay($notify_url);        }else{            return $this->web_pay();        }    }		public function web_pay(){		import('@.ORG.pay.Weixinnewpay.WxPayPubHelper');		//使用jsapi接口		$jsApi = new JsApi_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);		//使用统一支付接口		$unifiedOrder = new UnifiedOrder_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);		$unifiedOrder->setParameter("body",($this->pay_config['is_own'] ? '' : '').'订单号：'.$this->order_info['order_type'].'_'.$this->order_info['order_id']);//商品描述		//自定义订单号，此处仅作举例		$unifiedOrder->setParameter("out_trade_no",$this->order_info['order_type'].'_'.$this->order_info['order_id'].($this->pay_config['is_own'] ? '_1' : ''));//商户订单号 		$unifiedOrder->setParameter("total_fee",floatval($this->pay_money*100));//总金额		$unifiedOrder->setParameter("notify_url",C('config.site_url').'/source/web_weixin_notice.php');//通知地址 		$unifiedOrder->setParameter("trade_type","NATIVE");//交易类型		$unifiedOrder->setParameter("attach",'weixin');//附加数据		$prepay_result = $unifiedOrder->getPrepayId();		if($prepay_result['return_code'] == 'FAIL'){			return array('error'=>1,'msg'=>'没有获取微信支付的预支付ID，请重新发起支付！<br/><br/>微信支付错误返回：'.$prepay_result['return_msg']);		}		if($prepay_result['err_code']){			return array('error'=>1,'msg'=>'没有获取微信支付的预支付ID，请重新发起支付！<br/><br/>微信支付错误返回：'.$prepay_result['err_code_des']);		}		//=========步骤3：得到微信的二维码============		$jsApi->setPrepayId($prepay_result['prepay_id']);				return array('error'=>0,'qrcode'=>$prepay_result['code_url']);	}		public function mobile_pay($notify_url=""){	    $notify_url = $notify_url?:"/source/wap_weixin_notice.php";	    //dump($this->pay_config);exit;		import('@.ORG.pay.Weixinnewpay.WxPayPubHelper');		//使用jsapi接口		$jsApi = new JsApi_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);		//使用统一支付接口		$unifiedOrder = new UnifiedOrder_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);			$unifiedOrder->setParameter("openid",($this->pay_config['is_own'] ? $_SESSION['open_authorize_openid'] : $_SESSION['openid']));//用户微信唯一标识		$unifiedOrder->setParameter("body",($this->pay_config['is_own'] ? '' : '').$this->order_info['order_name'].'_'.$this->order_info['order_num']);//商品描述		//自定义订单号，此处仅作举例		$unifiedOrder->setParameter("out_trade_no",$this->order_info['order_type'].'_'.$this->order_info['order_id'].($this->pay_config['is_own'] ? '_1' : ''));//商户订单号		$unifiedOrder->setParameter("total_fee",floatval($this->pay_money*100));//总金额		$unifiedOrder->setParameter("notify_url",C('config.site_url').$notify_url);//通知地址		$unifiedOrder->setParameter("trade_type","JSAPI");//交易类型		$unifiedOrder->setParameter('sub_mch_id',$this->pay_config['sub_mch_id']);//2017.1.16陈琦添加		if($this->pay_config['is_own'] && $this->order_info['mer_id']){			$unifiedOrder->setParameter("attach",$this->order_info['mer_id']);//附加数据		}else{			$unifiedOrder->setParameter("attach",'weixin');//附加数据		}		$prepay_result = $unifiedOrder->getPrepayId();		if($prepay_result['return_code'] == 'FAIL'){			return array('error'=>1,'msg'=>'没有获取微信支付的预支付ID，请重新发起支付！微信支付错误返回：'.$prepay_result['return_msg'].json_encode($prepay_result));			//return array('error'=>1,'msg'=>'没有获取微信支付的预支付ID，请重新发起支付！微信支付错误返回：'.$prepay_result['return_msg']);		}		if($prepay_result['err_code']){			return array('error'=>1,'msg'=>'没有获取微信支付的预支付ID，请重新发起支付！<br/><br/>微信支付错误返回：'.$prepay_result['err_code_des'].json_encode($prepay_result));			//return array('error'=>1,'msg'=>'没有获取微信支付的预支付ID，请重新发起支付！<br/><br/>微信支付错误返回：'.$prepay_result['err_code_des']);		}		//=========步骤3：使用jsapi调起支付============		$jsApi->setPrepayId($prepay_result['prepay_id']);				return array('error'=>0,'weixin_param'=>$jsApi->getParameters());	}		public function app_pay($ticket, $deviceId){		import('@.ORG.pay.Weixinnewpay.WxPayPubHelper');		//使用jsapi接口		$jsApi = new JsApi_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);		//使用统一支付接口		$unifiedOrder = new UnifiedOrder_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);		$unifiedOrder->setParameter("body",($this->pay_config['is_own'] ? '' : '').$this->order_info['order_name'].'_'.$this->order_info['order_num']);//商品描述		//自定义订单号，此处仅作举例				$unifiedOrder->setParameter("out_trade_no",$this->order_info['order_type'].'_'.$this->order_info['order_id'].($this->pay_config['is_own'] ? '_1' : ''));//商户订单号		$unifiedOrder->setParameter("total_fee",floatval($this->pay_money*100));//总金额		$unifiedOrder->setParameter("notify_url",C('config.site_url').'/source/wap_weixin_notice.php');//通知地址		$unifiedOrder->setParameter("trade_type","NATIVE");//交易类型		if($this->pay_config['is_own'] && $this->order_info['mer_id']){			$unifiedOrder->setParameter("attach",$this->order_info['mer_id']);//附加数据		}else{			$unifiedOrder->setParameter("attach",'weixin');//附加数据		}		$prepay_result = $unifiedOrder->getPrepayId();		if($prepay_result['return_code'] == 'FAIL'){			return array('error'=>1,'msg'=>'没有获取微信支付的预支付ID，请重新发起支付！微信支付错误返回：'.$prepay_result['return_msg']);		}		if($prepay_result['err_code']){			return array('error'=>1,'msg'=>'没有获取微信支付的预支付ID，请重新发起支付！<br/><br/>微信支付错误返回：'.$prepay_result['err_code_des']);		}		//=========步骤3：重新生成app签名============		$sign = $jsApi->getPrepayAppSign($prepay_result);		return array('error'=>0,'sign'=>$sign);	}		public function notice_url(){		if(empty($this->pay_config['pay_weixin_appid']) || empty($this->pay_config['pay_weixin_mchid']) || empty($this->pay_config['pay_weixin_key']) || empty($this->pay_config['pay_weixin_appsecret'])){			return array('error'=>1,'msg'=>'微信支付缺少配置信息！请联系管理员处理或选择其他支付方式。');		}		if($this->is_mobile){			return $this->mobile_notice();		}else{			return $this->web_notice();		}	}		public function mobile_notice(){		exit('success');	}		public function web_notice(){		exit('success');	}		public function return_url(){		if(empty($this->pay_config['pay_weixin_appid']) || empty($this->pay_config['pay_weixin_mchid']) || empty($this->pay_config['pay_weixin_key']) || empty($this->pay_config['pay_weixin_appsecret'])){			return array('error'=>1,'msg'=>'微信支付缺少配置信息！请联系管理员处理或选择其他支付方式。');		}				import('@.ORG.pay.Weixinnewpay.WxPayPubHelper');		//使用通用通知接口		$notify = new Notify_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);		//存储微信的回调		//$xml = $GLOBALS['HTTP_RAW_POST_DATA'];		$xml=file_get_contents('php://input');//2017.1.16陈琦更改  原来回调失败，非要等页面跳转前台金额才会更新，改了之后则不需要跳转即可更新金额		$notify->saveData($xml);				//验证签名，并回应微信。		if($notify->checkSign() == FALSE){			$notify->setReturnParameter("return_code","FAIL");//返回状态码			$notify->setReturnParameter("return_msg","签名失败");//返回信息			return array('error'=>1,'msg'=>$notify->returnXml());		}else{			$notify->setReturnParameter("return_code","SUCCESS");//设置返回码						if($notify->data['return_code']=='SUCCESS' && $notify->data['result_code']=='SUCCESS'){				$order_id_arr = explode('_',$notify->data['out_trade_no']);				$order_param['pay_type'] = 'weixin';				$order_param['is_mobile'] = $this->is_mobile;				$order_param['order_type'] = $order_id_arr[0];				$order_param['order_id'] = $order_id_arr[1];				$order_param['is_own'] = intval($order_id_arr[2]);				$order_param['third_id'] = $notify->data['transaction_id'];				$order_param['pay_money'] = $notify->data['total_fee']/100;				return array('error'=>0,'order_param'=>$order_param);			}else{				return array('error'=>1,'msg'=>'支付时发生错误！<br/>错误提示：'.$e->GetMessage().'<br/>错误代码：'.$e->Getcode());			}		}	}		/*查找微信订单信息*/	public function query_order(){		if(empty($this->pay_config['pay_weixin_appid']) || empty($this->pay_config['pay_weixin_mchid']) || empty($this->pay_config['pay_weixin_key']) || empty($this->pay_config['pay_weixin_appsecret'])){			return array('error'=>1,'msg'=>'微信支付缺少配置信息！请联系管理员处理或选择其他支付方式。');		}		import('@.ORG.pay.Weixinnewpay.WxPayPubHelper');		//使用订单查询接口		$orderQuery = new OrderQuery_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);        //设置必填参数		$orderQuery->setParameter('out_trade_no',$this->order_info['order_type'].'_'.$this->order_info['order_id'].($this->pay_config['is_own'] ? '_1' : ''));//商户订单号		$orderQuery->setParameter('sub_mch_id',$this->pay_config['sub_mch_id']);//2017.1.16陈琦添加		//获取订单查询结果		$orderQueryResult = $orderQuery->getResult();		if($orderQueryResult['return_code'] == 'FAIL') {			return array('error'=>1,'msg'=>'通信出错：'.$orderQueryResult['return_msg']);		}else if($orderQueryResult['result_code'] == 'FAIL') {			return array('error'=>1,'msg'=>'错误代码描述：'.$orderQueryResult['err_code_des']);		}else if($orderQueryResult['trade_state'] != 'SUCCESS') {			return array('error'=>1,'msg'=>'交易状态：'.$orderQueryResult['trade_state_desc']);		}else{			$order_param['pay_type'] = 'weixin';			$order_param['is_mobile'] = $this->is_mobile;			$order_param['order_type'] = $this->order_info['order_type'];			$order_param['order_id'] = $this->order_info['order_id'];			$order_param['is_own'] = $this->pay_config['is_own'];			$order_param['third_id'] = $orderQueryResult['transaction_id'];			$order_param['pay_money'] = $orderQueryResult['total_fee']/100;			return array('error'=>0,'order_param'=>$order_param);		}	}		/*退款*/	public function refund(){		if($this->order_info['is_mobile_pay']==2){			$this->pay_config['pay_weixin_appid']=C('config.pay_weixinapp_appid');			$this->pay_config['pay_weixin_mchid']=C('config.pay_weixinapp_mchid');			$this->pay_config['pay_weixin_key']=C('config.pay_weixinapp_key');			$this->pay_config['pay_weixin_appsecret']=C('config.pay_weixinapp_appsecret');			C('config.pay_weixin_client_cert',C('config.pay_weixinapp_cert'));			C('config.pay_weixin_client_key',C('config.pay_weixinapp_cert_key'));		}		if(empty($this->pay_config['pay_weixin_appid']) || empty($this->pay_config['pay_weixin_mchid']) || empty($this->pay_config['pay_weixin_key']) || empty($this->pay_config['pay_weixin_appsecret'])){			return array('error'=>1,'msg'=>'微信支付缺少配置信息！请联系管理员处理或选择其他支付方式。');		}		$weixin_cert =  C('config.pay_weixin_client_cert');		$weixin_key =  C('config.pay_weixin_client_key');		if(empty($weixin_cert) || empty($weixin_key)){			return array('error'=>1,'msg'=>'管理员在后台支付配置中必须上传 微信支付证书和微信支付证书密钥！');		}				import('@.ORG.pay.Weixinnewpay.WxPayPubHelper');		$refund = new Refund_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);		// dump($this->order_info);exit;		$refund->setParameter("out_trade_no",$this->order_info['order_type'].'_'.$this->order_info['order_id'].($this->order_info['is_own'] ? '_1' : ''));//商户订单号		$refund->setParameter("out_refund_no",$this->order_info['order_type'].'_'.$this->order_info['order_id'].'_'.$_SERVER['REQUEST_TIME']);//商户退款单号		$refund->setParameter("total_fee",$this->pay_money*100);//总金额		$refund->setParameter("refund_fee",$this->pay_money*100);//退款金额		$refund->setParameter("op_user_id",$this->pay_config['pay_weixin_mchid']);//操作员        $refund->setParameter('sub_mch_id',$this->pay_config['sub_mch_id']);//子商户		$refundResult = $refund->getResult();		if($refundResult['result_code'] == 'FAIL' && $refundResult['err_code'] != 'REFUND_FEE_INVALID' || !$refundResult['refund_id']){			$refund_param['err_msg'] = $refundResult['err_code_des'];			$refund_param['refund_time'] = time();			return array('error'=>1,'type'=>'fail','msg'=>'退款申请失败！如果重试多次还是失败请联系系统管理员。','refund_param'=>$refund_param);		}else{			$refund_param['refund_id'] = $refundResult['refund_id'];			$refund_param['refund_time'] = time();			return array('error'=>0,'type'=>'ok','msg'=>'退款申请成功！请注意查收“微信支付”给您发的退款通知。','refund_param'=>$refund_param);		}			}		/* 微信JSAPI转账支付	* @time 2016-04-7	* @author	小邓  <969101097@qq.com>*/	public function give_jsapi($state=''){		import('@.ORG.pay.Weixinnewpay.WxPayPubHelper');	//引入微信类文件		$jsApi = new JsApi_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);//		print_r($jsApi);exit;		if(!isset($_GET['code'])){			//触发微信返回code码			//$order_arr=array();			//$order_arr['code']=$config['code'];			//$order_arr['money']=$config['money'];			//$state=serialize($order_arr);			$url = $jsApi->createOauthUrlForCode(C('config.site_url').'/source/give_wxjsapi.php',$state);			Header("Location: $url");		}else{			//获取code码，以获取openid			$code = $_GET['code'];			$jsApi->setCode($code);			$openid = $jsApi->getOpenId();		}		$unifiedOrder=new UnifiedOrder_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);		$unifiedOrder->setParameter("openid",$openid);		$unifiedOrder->setParameter("body","线下扫码支付");//商品描述		$timeStamp = time();		$unifiedOrder->setParameter("out_trade_no",$config['code']);//商户订单号		$unifiedOrder->setParameter("total_fee",$config['money']*100);//总金额		$unifiedOrder->setParameter("notify_url",C('config.site_url').'/source/give_wxjsapi.php');//通知地址		$unifiedOrder->setParameter("trade_type","JSAPI");//交易类型		$prepay_id = $unifiedOrder->getPrepayId();		$jsApi->setPrepayId($prepay_id);		$jsApiParameters = $jsApi->getParameters();		include(C('config.site_url').'/source/give_wxjsapi.php');	}		/* 商户后台充值	* @time 2016-04-13	* @author	小邓  <969101097@qq.com>*/	public function recharge_pay($out_trade_no){		import('@.ORG.pay.Weixinnewpay.WxPayPubHelper');		//使用jsapi接口		$jsApi = new JsApi_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);		//使用统一支付接口		$unifiedOrder = new UnifiedOrder_pub($this->pay_config['pay_weixin_appid'],$this->pay_config['pay_weixin_mchid'],$this->pay_config['pay_weixin_key'],$this->pay_config['pay_weixin_appsecret']);		$unifiedOrder->setParameter("body",'商户后台充值');//商品描述		//自定义订单号，此处仅作举例		$unifiedOrder->setParameter("out_trade_no",$out_trade_no);//商户订单号		$unifiedOrder->setParameter("total_fee",floatval($this->pay_money*100));//总金额		//$unifiedOrder->setParameter("total_fee",'1');//总金额		$unifiedOrder->setParameter("notify_url",C('config.site_url').'/source/web_weixin_notice.php');//通知地址 		$unifiedOrder->setParameter("trade_type","NATIVE");//交易类型		$unifiedOrder->setParameter("attach",'weixin');//附加数据		$prepay_result = $unifiedOrder->getPrepayId();		if($prepay_result['return_code'] == 'FAIL'){			return array('error'=>1,'msg'=>'没有获取微信支付的预支付ID，请重新发起支付！<br/><br/>微信支付错误返回：'.$prepay_result['return_msg']);		}		if($prepay_result['err_code']){			return array('error'=>1,'msg'=>'没有获取微信支付的预支付ID，请重新发起支付！<br/><br/>微信支付错误返回：'.$prepay_result['err_code_des']);		}		$jsApi->setPrepayId($prepay_result['prepay_id']);	//得到微信的二维码				return array('error'=>0,'qrcode'=>$prepay_result['code_url']);	}	/*    * 获取普通的token，不是网页授权access_token    *    * */	public function getToken(){		$url = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=" . $this->config['wechat_appid'] . "&secret=" . $this->config['wechat_appsecret'];		$Tokenarr = $this->https_request($url);		if (isset($Tokenarr['access_token'])) {			return $Tokenarr['access_token'];		}		return false;	}	/*     * 向用户推送模板消息     * */	public function send_template_message($data){		$access_token = $this->getToken();		$url = 'https://api.weixin.qq.com/cgi-bin/message/template/send?access_token='.$access_token;		$res=$this->https_request($url,$data);		return $res;	}	/*工具类https_request    * http 请求返回res的函数    *2016.11.17    */	public function https_request($url, $data = null,$noprocess=false) {		$curl = curl_init();		curl_setopt($curl, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0);		curl_setopt($curl, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:39.0) Gecko/20100101 Firefox/39.0");		$header = array("Accept-Charset: utf-8");		curl_setopt($curl, CURLOPT_URL, $url);		curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);		curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);		//curl_setopt($curl, CURLOPT_SSLVERSION, 3);		curl_setopt($curl, CURLOPT_HTTPHEADER, $header); /* * *$header 必须是一个数组** */		curl_setopt($curl, CURLOPT_HEADER, FALSE);		curl_setopt($curl, CURLINFO_HEADER_OUT, true);		if (!empty($data)) {			curl_setopt($curl, CURLOPT_POST, 1);			curl_setopt($curl, CURLOPT_POSTFIELDS, $data);		}		curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);		$output = curl_exec($curl);		if($noprocess) return $output;		$errorno = curl_errno($curl);		if ($errorno) {			return array('curl' => false, 'errorno' => $errorno);		} else {			$res = json_decode($output, 1);			if ($res['errcode']) {				return array('errcode' => $res['errcode'], 'errmsg' => $res['errmsg']);			} else {				return $res;			}		}		curl_close($curl);	}	}?>