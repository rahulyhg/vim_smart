<?phpclass UserModel extends Model{	/*得到所有用户*/	public function get_user($uid,$field='uid')	{		$condition_user[$field] = $uid;		$now_user = $this->field(true)->where($condition_user)->find();		if(!empty($now_user)){			$now_user['now_money'] = floatval($now_user['now_money']);		}		return $now_user;	}	/*帐号密码检入*/	public function checkin($phone,$pwd){		if (empty($phone)){			return array('error_code' => true, 'msg' => '手机号不能为空');		}		if (empty($pwd)){			return array('error_code' => true, 'msg' => '密码不能为空');		}		$now_user = $this->field(true)->where(array('phone' => $phone))->find();		if ($now_user){			if($now_user['pwd'] != md5($pwd)){				return array('error_code' => true, 'msg' => '密码不正确!');			}			if(empty($now_user['status'])){				return array('error_code' => true, 'msg' => '该帐号被禁止登录!');			}			$condition_save_user['uid'] = $now_user['uid'];			$data_save_user['last_time'] = $_SERVER['REQUEST_TIME'];			$data_save_user['last_ip'] = get_client_ip(1);						/****判断此用户是否在user_import表中***/			$user_importDb=D('User_import');			$user_import=$user_importDb->where(array('telphone'=>$phone,'isuse'=>'0'))->find();			if(!empty($user_import)){			   !empty($user_import['ppname']) && $data_save_user['truename']=$user_import['ppname'];			   $data_save_user['qq']=$user_import['qq'];			   $data_save_user['email']=$user_import['email'];			   $data_save_user['level']=max($now_user['level'],$user_import['level']);			   $data_save_user['score_count']=max($now_user['score_count'],$user_import['integral']);			   $data_save_user['now_money']=max($now_user['now_money'],$user_import['money']);			   $data_save_user['importid']=$user_import['id'];			   $data_save_user['status']=2; /***未审核****/			   $mer_id=$user_import['mer_id'];			   $data_save_user['openid']=isset($_SESSION['weixin']) && isset($_SESSION['weixin']['user']) ? $_SESSION['weixin']['user']['openid'] :'';			   if(($mer_id>0) && !empty($data_save_user['openid'])){			      $merchant_user_relationDb=M('Merchant_user_relation');				  $mwhere=array('openid'=>$data_save_user['openid'],'mer_id'=>$mer_id);				  $mtmp=$merchant_user_relationDb->where($mwhere)->find();				  if(empty($mtmp)){					 $mwhere['dateline']=time();					 $mwhere['from_merchant']=3;				     $merchant_user_relationDb->add($mwhere);				  }			   }			}			if($this->where($condition_save_user)->data($data_save_user)->save()){			    if(!empty($user_import)){				   $user_importDb->where(array('id'=>$user_import['id']))->save(array('isuse'=>1));				}			}			return array('error_code' => false, 'msg' => 'OK' ,'user'=>$now_user);		} else {			return array('error_code' => true, 'msg' => '手机号不存在!');		}	}	/*手机号、union_id、open_id 直接登录入口*/	public function autologin($field,$value){		$condition_user[$field] = $value;		$now_user = $this->field(true)->where($condition_user)->find();		if($now_user){			if(empty($now_user['status'])){				return array('error_code' => true, 'msg' => '该帐号被禁止登录!');			}			$condition_save_user['uid'] = $now_user['uid'];			$data_save_user['last_time'] = $_SERVER['REQUEST_TIME'];			$data_save_user['last_ip'] = get_client_ip(1);			$this->where($condition_save_user)->data($data_save_user)->save();						return array('error_code' => false, 'msg' => 'OK' ,'user'=>$now_user);		}else{			return array('error_code'=>1001,'msg'=>'没有此用户！');		}	}	/*	 *	提供用户信息注册用户，密码需要自行md5处理 	 *	 *	**** 请自行处理逻辑，此处直接插入用户表 ****	 */	public function autoreg($data_user){		$data_user['add_time'] = $data_user['last_time'] = $_SERVER['REQUEST_TIME'];		$data_user['add_ip'] = $data_user['last_ip'] = get_client_ip(1);		$data_user['status'] = 1;				$register_give_money_condition = C('config.register_give_money_condition');		if ($register_give_money_condition == 1 || $register_give_money_condition == 3) {			$data_user['now_money'] = C('config.register_give_money');		}		if($data_user['openid']){			$data_user['last_weixin_time'] = $_SERVER['REQUEST_TIME'];		}		$uid = $this->data($data_user)->add();		if($uid){            $after_name=preg_replace('/[\x{10000}-\x{10FFFF}]/u', '', $data_user['nickname']);//去除非3字节的特殊符号            if($after_name==null){//全部是表情符号没有文字                $nickname='匿名用户'.$uid;            }else{//一部分表情、一部分文字                $nickname=$after_name.$uid;            }            M('user')->where(array('uid'=>array('eq',$uid)))->data(array('nickname'=>array('eq',$nickname)))->save();			return array('error_code' =>false,'msg' =>'OK');		}else{			return array('error_code' => true, 'msg' => '注册失败！请重试。');		}	}	/*帐号密码注册*/	public function checkreg($phone,$pwd){		if (empty($phone)) {			return array('error_code' => true, 'msg' => '手机号不能为空');		}		if (empty($pwd)) {			return array('error_code' => true, 'msg' => '密码不能为空');		}				if(!preg_match('/^[0-9]{11}$/',$phone)){			return array('error_code' => true, 'msg' => '请输入有效的手机号');		}					$condition_user['phone'] = $phone;		if($this->field('`uid`')->where($condition_user)->find()){			return array('error_code' => true, 'msg' => '手机号已存在');		}				$data_user['phone'] = $phone;		$data_user['pwd'] = md5($pwd);		$data_user['status'] = 1;		$register_give_money_condition = C('config.register_give_money_condition');		if ($register_give_money_condition == 1 || $register_give_money_condition == 3) {			$data_user['now_money'] = C('config.register_give_money');		}			$data_user['nickname'] = substr($phone,0,3).'****'.substr($phone,7);				$data_user['add_time'] = $data_user['last_time'] = $_SERVER['REQUEST_TIME'];		$data_user['add_ip'] = $data_user['last_ip'] = get_client_ip(1);		$uc = import("@.ORG.UcService");//导入UcService.class.php类		$ucService = new UcService;//实例化UcService类		//$uid = $ucService->register($phone, $pwd,$phone,$data_user['add_time'],'','',$data_user['add_ip'],$data_user['add_time'],$data_user['add_time']);//注册到UCenter		$uid=$ucService->register($phone,$pwd,$phone,'','',$data_user['add_ip'],$data_user['add_time']);		if($uid <= 0) {			if($uid == -1) {				return array('error_code' => true, 'msg' => '用户名不合法');			} elseif($uid == -2) {				return array('error_code' => true, 'msg' => '包含不允许注册的词语');			} elseif($uid == -3) {				return array('error_code' => true, 'msg' => '用户名已经存在,您可以直接登录');			} elseif($uid == -4) {				return array('error_code' => true, 'msg' => 'Email 格式有误');			} elseif($uid == -5) {				return array('error_code' => true, 'msg' => 'Email 不允许注册');			} elseif($uid == -6) {				return array('error_code' => true, 'msg' => '该 Email 已经被注册');			} else {				return array('error_code' => true, 'msg' => '未知错误');			}		} else {			$data_user['uc_id'] = $uid;//			dump($data_user);exit;			if($this->data($data_user)->add()){				$return = $this->checkin($phone,$pwd);				if(empty($result['error_code'])){					return $return;				}else{					return array('error_code' =>false,'msg' =>'OK');				}			}else{				return array('error_code' => true, 'msg' => '注册失败！请重试。');			}		}	}	/*修改用户信息*/	public function save_user($uid,$field,$value){		$condition_user['uid'] = $uid;		$data_user[$field] = $value;		if($this->where($condition_user)->data($data_user)->save()){			return array('error'=>0,$field=>$value);		}else{			return array('error'=>1,'msg'=>'修改失败！请重试。');		}	}		/*增加用户的钱*/	public function add_money($uid,$money,$desc){		$condition_user['uid'] = $uid;		if($this->where($condition_user)->setInc('now_money',$money)){			D('User_money_list')->add_row($uid,1,$money,$desc);			return array('error_code' =>false,'msg' =>'OK');		}else{			return array('error_code' => true, 'msg' => '用户余额充值失败！请联系管理员协助解决。');		}	}		/*使用用户的钱*/	public function user_money($uid,$money,$desc){		$condition_user['uid'] = $uid;		if($this->where($condition_user)->setDec('now_money',$money)){			D('User_money_list')->add_row($uid,2,$money,$desc);			return array('error_code' =>false,'msg' =>'OK');		}else{			return array('error_code' => true, 'msg' => '用户余额扣除失败！请联系管理员协助解决。');		}	}			/*增加用户的积分*/	public function add_score($uid,$score,$desc){		$condition_user['uid'] = $uid;		if($this->where($condition_user)->setInc('score_count',$score)){			D('User_score_list')->add_row($uid,1,$score,$desc);			return array('error_code' =>false,'msg' =>'OK');		}else{			return array('error_code' => true, 'msg' => '添加积分失败！请联系管理员协助解决。');		}	}		/*使用用户的积分*/	public function user_score($uid,$score,$desc){		$condition_user['uid'] = $uid;		if($this->where($condition_user)->setDec('score_count',$score)){			D('User_score_list')->add_row($uid,2,$score,$desc);			return array('error_code' =>false,'msg' =>'OK');		}else{			return array('error_code' => true, 'msg' => '减少积分失败！请联系管理员协助解决。');		}	}	public  function  check_new($phone,$cate_name){		$user = $this->field('uid')->where(array('phone'=>$phone))->find();		$m = new Model();		$table = array(C('DB_PREFIX').'group_order',C('DB_PREFIX').'meal_order',C('DB_PREFIX').'appoint_order');		$count = 0;		$where['uid']=$user['uid'];		switch($cate_name){			case 'all':				foreach($table as  $v){					$count += $m->table($v)->where($where)->count('order_id');				}				break;			case 'group':				$count  = $m->table($table[0])->where($where)->count('order_id');				break;			case 'meal':				$count  = $m->table($table[1])->where($where)->count('order_id');				break;			case 'appoint':				$count  = $m->table($table[2])->where($where)->count('order_id');				break;		}		if($count>0){			return false;		}else{			return true;		}	}	public function check_score_can_use($uid,$money,$order_type){		$now_user = $this->get_user($uid);		$score_count = $now_user['score_count'];		$score_can_use_count=0;		$score_deducte=0;		if ($order_type == 'group'||$order_type == 'meal'||$order_type == 'takeout'||$order_type == 'food'||$order_type == 'foodPad') {			$user_score_use_condition = C('config.user_score_use_condition');			$user_score_max_use=C('config.user_score_max_use');			$user_score_use_percent=(float)C('config.user_score_use_percent');			$score_max_deducte=round((float)$user_score_max_use/$user_score_use_percent,1);			if($user_score_use_percent>0&&$score_max_deducte>0&&$user_score_use_condition>0){   //如果设置没有错误				if ($money>=$user_score_use_condition) {             //判断是否够使用积分的条件，即这个订单的总额是否大于规定的金额					if($money>$score_max_deducte){                    //判断积分最大抵扣金额是否比这个订单的总额大						$score_can_use_count = (int)($score_count>$user_score_max_use?$user_score_max_use:$score_count);//如果用户积分大于每个订单的积分可使用数 则按可使用数算						$score_deducte = sprintf("%.2f",substr(sprintf("%.3f", (float)$score_can_use_count/$user_score_use_percent), 0, -2));						$score_deducte = $score_deducte>$money?$money:$score_deducte;					}else{						//最大可抵扣的金额比总单金额大 只扣掉总单范围内的积分 扣除积分=总单*积分抵扣比例						$score_can_use_count = ceil($money*$user_score_use_percent);						$score_deducte = sprintf("%.2f",substr(sprintf("%.3f", (float)$score_can_use_count*$user_score_use_percent), 0, -2));						$score_deducte = $score_deducte>$money?$money:$score_deducte;					}				}			}		}		return array('score'=>$score_can_use_count,'score_money'=>floatval($score_deducte));	}    /**     * @author zhukeqin     * 干掉emoji表情，对部分用户昵称进行更改     * @return array     */    public function checkout_emoji($nickname)    {        if(empty($nickname)&&$nickname!==0){            $after_name='匿名用户'.rand(1000,9999);        }else{            $after_name=preg_replace_callback('/./u',                function (array $match) {                return strlen($match[0]) >= 4 ? '' : $match[0];                },$nickname);//去除非3字节的特殊符号            if(empty($after_name)&&$after_name!==0){                $after_name='emojiname'.rand(1000,9999);            }        }        return $after_name;    }	}?>