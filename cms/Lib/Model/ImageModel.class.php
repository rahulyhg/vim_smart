<?phpclass ImageModel extends Model{	/**	 * @param int $oid 用户ID	 * @param string $tablename 表名	 * @param number $otype 用户类型 0：系统后台管理员，1：商家后台管理员，2：用户，3：社区后台管理员	 * @param number $size 图片最大尺寸	 * @param string $ismark 是否打水印	 * @return multitype:number string |multitype:number	 */// 	public function handle($oid, $tablename, $otype = 0, $size = 5, $ismark = true)	public function handle($oid, $path, $otype = 0, $param = array('size' => 5), $ismark = true)	{// 		array('size' => 5, 'path', 'thumbMaxWidth', 'thumbMaxHeight', 'thumb' => true, 'imageClassPath' => 'ORG.Util.Image', 'thumbPrefix' => 'm_,s_', 'thumbRemoveOrigin' => false);				import("ORG.Net.UploadFile");		$upload = new UploadFile();		$upload->maxSize = $param['size'] * 1024 * 1024 ;		$upload->allowExts = array('jpg', 'jpeg', 'png', 'gif', 'mp3');		$upload->allowTypes = array('image/png', 'image/jpg', 'image/jpeg', 'image/gif', 'audio/mp3');				isset($param['thumb']) && $upload->thumb = $param['thumb'];		isset($param['imageClassPath']) && $upload->imageClassPath = $param['imageClassPath'];		isset($param['thumbPrefix']) && $upload->thumbPrefix = $param['thumbPrefix'];		isset($param['thumbMaxWidth']) && $upload->thumbMaxWidth = $param['thumbMaxWidth'];		isset($param['thumbMaxHeight']) && $upload->thumbMaxHeight = $param['thumbMaxHeight'];		isset($param['thumbRemoveOrigin']) && $upload->thumbRemoveOrigin = $param['thumbRemoveOrigin'];				$img_mer_id = sprintf("%09d", $oid);		$rand_num = substr($img_mer_id, 0, 3) . '/' . substr($img_mer_id, 3, 3) . '/' . substr($img_mer_id, 6, 3);				$upload_dir = "./upload/{$path}/{$rand_num}/";		if(!is_dir($upload_dir)){			mkdir($upload_dir, 0777, true);		}				$upload->savePath = $upload_dir;// 设置附件上传目录				if (!$upload->upload()) {// 上传错误提示错误信息			return array('error' => 1, 'msg' => $upload->getErrorMsg());		} else {// 上传成功 获取上传文件信息			$watermarkfile =  C('config.site_water_mark');//'./upload/watermark/home.png';			$flag = false;			if ($ismark && $watermarkfile) {				$pt = pathinfo($watermarkfile);				$pu = parse_url($watermarkfile);				if (isset($pu['path']) && isset($pt['extension'])) {					$watermarkfile = '.' . $pu['path'];					$watermarksize = @getimagesize($watermarkfile);					$watermark = array();					$watermark['watermarkstatus'] = C('config.site_water_mark_pos');					$watermark['watermarktype'] = isset($pt['extension']) ? $pt['extension'] : 'png';//'png';					$watermark['watermarkfile'] = $watermarkfile;					$watermark['watermarkminwidth'] = $watermarksize[0];					$watermark['watermarkminheight'] = $watermarksize[1];					$watermark['watermarkquality'] = 90;					$watermark['watermarktrans'] = 100;					$image_water_mark = new image_water_mark();					$flag = true;				}			}			$images = array();			$files = $upload->getUploadFileInfo();			foreach ($files as $file) {				$images['url'][$file['key']] = substr($file['savepath'] . $file['savename'], 1);				$images['title'][$file['key']] = $rand_num . ',' . $file['savename'];				$this->add(array('oid' => $oid, 'otype' => $otype, 'ip' => get_client_ip(), 'dateline' => time(), 'pic' => $images['url'][$file['key']], 'pic_md5' => md5($images['url'][$file['key']])));				$flag && $image_water_mark->Watermark($file['savepath'] . $file['savename'], $watermark);			}						$images['error'] = 0;			return $images;					}	}	//图片及文件上传    public function handleTwo($oid, $path, $otype = 0, $param = array('size' => 5), $ismark = true,$filename='')    {// 		array('size' => 5, 'path', 'thumbMaxWidth', 'thumbMaxHeight', 'thumb' => true, 'imageClassPath' => 'ORG.Util.Image', 'thumbPrefix' => 'm_,s_', 'thumbRemoveOrigin' => false);        import("ORG.Net.UploadFile");        $upload = new UploadFile();        $upload->maxSize = $param['size'] * 1024 * 1024 ;        $upload->allowExts = array('jpg', 'jpeg', 'png', 'gif', 'mp3','pdf','vnd.openxmlformats-officedocument.wordprocessingml.document',            'vnd.openxmlformats-officedocument.spreadsheetml.sheet','msword','vnd.ms-excel');        $upload->allowTypes = array('image/png', 'image/jpg', 'image/jpeg', 'image/gif', 'audio/mp3','application/pdf',            'application/vnd.openxmlformats-officedocument.wordprocessingml.document','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',            'application/msword','application/vnd.ms-excel');        isset($param['thumb']) && $upload->thumb = $param['thumb'];        isset($param['imageClassPath']) && $upload->imageClassPath = $param['imageClassPath'];        isset($param['thumbPrefix']) && $upload->thumbPrefix = $param['thumbPrefix'];        isset($param['thumbMaxWidth']) && $upload->thumbMaxWidth = $param['thumbMaxWidth'];        isset($param['thumbMaxHeight']) && $upload->thumbMaxHeight = $param['thumbMaxHeight'];        isset($param['thumbRemoveOrigin']) && $upload->thumbRemoveOrigin = $param['thumbRemoveOrigin'];        $img_mer_id = sprintf("%09d", $oid);        $rand_num = substr($img_mer_id, 0, 3) . '/' . substr($img_mer_id, 3, 3) . '/' . substr($img_mer_id, 6, 3);        $upload_dir = "./upload/{$path}/{$rand_num}/";        if(!is_dir($upload_dir)){            mkdir($upload_dir, 0777, true);        }        $upload->savePath = $upload_dir;// 设置附件上传目录        if (!$upload->upload()) {// 上传错误提示错误信息            dump($upload->getErrorMsg());exit;            return array('error' => 1, 'msg' => $upload->getErrorMsg());        } else {// 上传成功 获取上传文件信息            $watermarkfile =  C('config.site_water_mark');//'./upload/watermark/home.png';            $flag = false;            if ($ismark && $watermarkfile) {                $pt = pathinfo($watermarkfile);                $pu = parse_url($watermarkfile);                if (isset($pu['path']) && isset($pt['extension'])) {                    $watermarkfile = '.' . $pu['path'];                    $watermarksize = @getimagesize($watermarkfile);                    $watermark = array();                    $watermark['watermarkstatus'] = C('config.site_water_mark_pos');                    $watermark['watermarktype'] = isset($pt['extension']) ? $pt['extension'] : 'png';//'png';                    $watermark['watermarkfile'] = $watermarkfile;                    $watermark['watermarkminwidth'] = $watermarksize[0];                    $watermark['watermarkminheight'] = $watermarksize[1];                    $watermark['watermarkquality'] = 90;                    $watermark['watermarktrans'] = 100;                    $image_water_mark = new image_water_mark();                    $flag = true;                }            }            $images = array();            $files = $upload->getUploadFileInfo();            foreach ($files as $file) {                $images['url'][$file['key']] = substr($file['savepath'] . $file['savename'], 1);                $images['title'][$file['key']] = $rand_num . ',' . $file['savename'];                $this->add(array('oid' => $oid, 'otype' => $otype, 'ip' => get_client_ip(), 'dateline' => time(), 'pic' => $images['url'][$file['key']], 'pic_md5' => md5($images['url'][$file['key']]),'name'=>$filename));                $flag && $image_water_mark->Watermark($file['savepath'] . $file['savename'], $watermark);            }            $images['error'] = 0;            return $images;        }    }    /**     * @author zhukeqin     * @param $id     * @return mixed     *获得一个文件信息     */    public function get_file_info($id){	    $array=array('pigcms_id'=>$id,'status'=>1);	    return $this->where($array)->find();    }    /**     * @author zhukeqin     * @param $id     * @return array     * 删除一个文件     */    public function delete_file($id){        $file_info=$this->get_file_info($id);        if(empty($file_info)) return array('err'=>1,'data'=>'文件不存在');        $re=unlink($file_info['pic']);        if($re){            $this->where(array('pigcms_id'=>$id))->data(array('status'=>0))->save();            return array('err'=>0,'data'=>'删除成功');        }else{            return array('err'=>1,'data'=>'删除失败');        }    }    /**     * @author zhukeqin     * @param $data     * @param $zipName     * 批量打包下载文件     */    public function excu_zip($data,$zipName) {        $dfile =  tempnam('/tmp', 'tmp');//产生一个临时文件，用于缓存下载文件        import('@.ORG.zipfile');        $zip = new zipfile();        //----------------------        if ($zipName) {            $filename = $zipName;//下载的默认文件名        } else {            $filename = 'image.zip'; //下载的默认文件名        }        //以下是需要下载的图片数组信息，将需要下载的图片信息转化为类似即可//        $image = array(//            array('image_src' => 'pic1.jpg', 'image_name' => '图片1.jpg'),//            array('image_src' => 'pic2.jpg', 'image_name' => 'pic/图片2.jpg'),//        );        foreach($data as $k => $v){            $zip->add_file(file_get_contents($v), $k);            // 添加打包的图片，第一个参数是图片内容，第二个参数是压缩包里面的显示的名称, 可包含路径            // 或是想打包整个目录 用 $zip->add_path($image_path);        }        //----------------------        $zip->output($dfile);        // 下载文件        ob_clean();        header('Pragma: public');        header('Last-Modified:'.gmdate('D, d M Y H:i:s') . 'GMT');        header('Cache-Control:no-store, no-cache, must-revalidate');        header('Cache-Control:pre-check=0, post-check=0, max-age=0');        header('Content-Transfer-Encoding:binary');        header('Content-Encoding:none');        header('Content-type:multipart/form-data');        header('Content-Disposition:attachment; filename="'.$filename.'"'); //设置下载的默认文件名        header('Content-length:'. filesize($dfile));        $fp = fopen($dfile, 'r');        while(connection_status() == 0 && $buf = @fread($fp, 8192)){            echo $buf;        }        fclose($fp);        @unlink($dfile);        @flush();        @ob_flush();        exit();    }	/**	 * @param int $tableid 表中的主键	 * @param string $path 图片地址	 * @param string $tablename 表名	 * 	 * path = '/upload/...'	 */	public function update_table_id($path, $tableid, $tableName)	{		if ($image = $this->field(true)->where(array('pic_md5' => md5($path)))->find()) {			$this->where(array('pigcms_id' => $image['pigcms_id']))->save(array('tableid' => $tableid, 'tablename' => $tablename));		}	}    /**     * @author zhukeqin     * @param $src 图片路径     * @param $fontsize 字体大小     * @param $x 位置     * @param $y     * @param $color rgba数组     * @param $text 文字     */	public function add_text($src,$fontsize,$x,$y,$color,$num,$text){        $info = getimagesize($src);        $type = image_type_to_extension($info[2],false);        $info['type'] = $type;        $fun = "imagecreatefrom" .$type;        $image = $fun($src);        $col = imagecolorallocatealpha($image,$color[0],$color[1],$color[2],$color[3]);        $font = "./conf/ttf/1.ttf";        imagettftext($image, $fontsize, 0, $x, $y, $col, $font, $num);        $len=mb_strlen($text);        if($len>10&&$len<16){            $text_one=mb_substr($text,0,6);            $text_two=mb_substr($text,6);            $text='祝福语：'.$text_one."\n".$text_two;        }        if($len<8){            $text ='祝福语：'.$text;        }        imagettftext($image, $fontsize, 0, 400, 880, $col, $font, $text);        header('content-type:' . $info['mime']);        $fun='image' . $info['type'];        $fun($image);        die;    }}