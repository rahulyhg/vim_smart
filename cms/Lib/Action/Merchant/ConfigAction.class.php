<?php/* * 系统配置 * * @  Writers    Jaty * @  BuildTime  2014/11/05 15:28 *  */class ConfigAction extends BaseAction{	/* 商家设置 */    public function merchant(){		$database_merchant = D('Merchant');		if(IS_POST){			$data_merchant['phone'] = $_POST['phone'];			if(empty($data_merchant['phone'])){				$this->error('请输入联系人电话');			}						$data_merchant['email'] = $_POST['email'];			$data_merchant['is_offline'] = isset($_POST['is_offline']) ? intval($_POST['is_offline']) : 1;			// if(empty($data_merchant['email'])){				// $this->error('请输入联系人邮箱');			// }						if(!empty($_POST['new_pass'])){				$condition_merchant['mer_id'] = $this->merchant_session['mer_id'];				$now_merchant = $database_merchant->field('`pwd`')->where($condition_merchant)->find();				if(md5($_POST['old_pass']) != $now_merchant['pwd']){					$this->error('原密码输入错误');				}else if(strlen($_POST['new_pass']) < 6){					$this->error('新密码最少6个字符');				}else if($_POST['new_pass'] != $_POST['re_pass']){					$this->error('两次新密码输入不一致，请重新输入');				}else{					$data_merchant['pwd'] = md5($_POST['new_pass']);				}			}						if(empty($_POST['pic'])){				$this->error('请至少上传一张图片');			}			$data_merchant['pic_info'] = implode(';',$_POST['pic']);			$data_merchant['img_info'] = $_POST['img'];	//商户头像			$data_merchant['txt_info'] = $_POST['txt_info'];			if(empty($data_merchant['txt_info'])){				$this->error('请输入商家描述信息');			}			$data_merchant['adverimg']=isset($_POST['adverimg']) ? trim($_POST['adverimg']) : '';			$data_merchant['mer_id'] = $this->merchant_session['mer_id'];			if($database_merchant->data($data_merchant)->save()){				if(!empty($_POST['new_pass'])){	//同时修改商家收银台					M('cashier_merchants')->where(array('thirduserid'=>$this->merchant_session['mer_id']))->data(array('password'=>md5($_POST['new_pass'])))->save();				}				$this->success('保存成功！');			}else{				$this->error('保存失败！请检查是否有修改过内容后重试');			}		}else{			$condition_merchant['mer_id'] = $this->merchant_session['mer_id'];			$now_merchant = $database_merchant->field(true,'pwd')->where($condition_merchant)->find();			if(!empty($now_merchant['pic_info'])){				$merchant_image_class = new merchant_image();				$now_merchant['adverimgurl']=!empty($now_merchant['adverimg']) ? $merchant_image_class->get_image_by_path($now_merchant['adverimg']) :'';				$tmp_pic_arr = explode(';',$now_merchant['pic_info']);				foreach($tmp_pic_arr as $key=>$value){					$now_merchant['pic'][$key]['title'] = $value;					$now_merchant['pic'][$key]['url'] = $merchant_image_class->get_image_by_path($value);				}			}			if(!empty($now_merchant['img_info'])){				//$img_info=str_replace(',','/',$now_merchant['img_info']);				//$now_merchant['img']= C('config.site_url').'/upload/merchant/'.$img_info;				$merchant_image_class = new merchant_image();				$now_merchant['img']['title']=$now_merchant['img_info'];				$now_merchant['img']['url']=rtrim($merchant_image_class->get_image_by_path($now_merchant['img_info']),'/');				//print_r($now_merchant['img']['url']);			}			$this->assign('now_merchant',$now_merchant);			$this->assign('pay_offline_open', $this->config['pay_offline_open']);			$merchant_group_list = D('Group')->get_grouplist_by_MerchantId($now_merchant['mer_id']);			$this->assign('merchant_group_list',$merchant_group_list);		}		$this->display();    }        public function merchant_promote(){    	$database_merchant = D('Merchant');		$condition_merchant['mer_id'] = $this->merchant_session['mer_id'];		$now_merchant = $database_merchant->field(true,'pwd')->where($condition_merchant)->find();		if(!empty($now_merchant['pic_info'])){			$merchant_image_class = new merchant_image();			$tmp_pic_arr = explode(';',$now_merchant['pic_info']);			foreach($tmp_pic_arr as $key=>$value){				$now_merchant['pic'][$key]['title'] = $value;				$now_merchant['pic'][$key]['url'] = $merchant_image_class->get_image_by_path($value);			}		}		$this->assign('now_merchant',$now_merchant);				$merchant_group_list = D('Group')->get_grouplist_by_MerchantId($now_merchant['mer_id']);		$this->assign('merchant_group_list',$merchant_group_list);						$hits = D('Group')->get_hits_log($now_merchant['mer_id']);		$this->assign('hits', $hits['group_list']);				$this->assign('pagebar', $hits['pagebar']);		    	$this->display();    }		public function merchant_indexsort(){		if(IS_POST){			$database_merchant = D('Merchant');			//转存首页储存值			$group_indexsort = intval($_POST['group_indexsort']);			if($group_indexsort){				$condition_merchant['mer_id'] = $this->merchant_session['mer_id'];				$now_merchant = $database_merchant->field('`storage_indexsort`')->where($condition_merchant)->find();				if($now_merchant['storage_indexsort']){					$condition_group['group_id'] = $group_indexsort;					if(D('Group')->where($condition_group)->setInc('index_sort',$now_merchant['storage_indexsort'])){						$database_merchant->where($condition_merchant)->setField('storage_indexsort','0');					}				}			}						//设置团购自动增长			$indexsort_groupid = intval($_POST['indexsort_groupid']);			$condition_merchant['mer_id'] = $this->merchant_session['mer_id'];			$database_merchant->where($condition_merchant)->setField('auto_indexsort_groupid',$indexsort_groupid);		}	}		public function ajax_upload_pic(){		if($_FILES['imgFile']['error'] != 4){			$image = D('Image')->handle($this->merchant_session['mer_id'], 'merchant', 1);			if ($image['error']) {				exit(json_encode($image));			} else {				$title = $image['title']['imgFile'];				$merchant_image_class = new merchant_image();				$url = $merchant_image_class->get_image_by_path($title);				exit(json_encode(array('error' => 0, 'url' => $url, 'title' => $title)));			}		} else {			exit(json_encode(array('error' => 1,'message' =>'没有选择图片')));		}	}		public function ajax_del_pic(){		$merchant_image_class = new merchant_image();		$merchant_image_class->del_image_by_path($_POST['path']);	}	/* 店铺管理 */	public function store(){		$mer_id = $this->merchant_session['mer_id'];		$database_merchant_store = D('Merchant_store');		$condition_merchant_store['mer_id'] = $mer_id;		$count_store = $database_merchant_store->where("mer_id='{$mer_id}' AND status<>4")->count();		$db_arr = array(C('DB_PREFIX').'area'=>'a',C('DB_PREFIX').'merchant_store'=>'s');		import('@.ORG.merchant_page');		$p = new Page($count_store,15);		$store_list = D()->table($db_arr)->field(true)->where("`s`.`mer_id`='$mer_id' AND `s`.`area_id`=`a`.`area_id` AND s.status!=4")->order('`sort` DESC,`store_id` ASC')->limit($p->firstRow.','.$p->listRows)->select();		$this->assign('store_list',$store_list);		$pagebar = $p->show();		$this->assign('pagebar',$pagebar);		$this->display();	}	public function store_ajax_upload_pic() {		if ($_FILES['imgFile']['error'] != 4) {			$image = D('Image')->handle($this->merchant_session['mer_id'], 'store', 1);			if ($image['error']) {				exit(json_encode($image));			} else {				$title = $image['title']['imgFile'];				$store_image_class = new store_image();				$url = $store_image_class->get_image_by_path($title);				exit(json_encode(array('error' => 0, 'url' => $url, 'title' => $title)));			}		} else {			exit(json_encode(array('error' => 1,'message' =>'没有选择图片')));		}	}	public function store_ajax_del_pic(){		$store_image_class = new store_image();		$store_image_class->del_image_by_path($_POST['path']);	}	/* 添加店铺 */	public function store_add(){		$database_merchant_store = D('Merchant_store');		if(IS_POST){			if(empty($_POST['name'])){				$this->error('店铺名称必填！');			}			if(empty($_POST['phone'])){				$this->error('联系电话必填！');			}			if(empty($_POST['long_lat'])){				$this->error('店铺经纬度必填！');			}			if(empty($_POST['adress'])){				$this->error('店铺地址必填！');			}			if(empty($_POST['permoney'])){				$this->error('人均消费必填！');			}			if(empty($_POST['feature'])){				$this->error('店铺特色必填！');			}// 			if(empty($_POST['trafficroute'])){// 				$this->error('交通路线必填！');// 			}			if(empty($_POST['pic'])){				$this->error('请至少上传一张图片');			}			$_POST['pic_info'] = implode(';',$_POST['pic']);							if(empty($_POST['txt_info'])){				$this->error('请输入店铺描述信息');			}						//判断关键词			$keywords = trim($_POST['keywords']);			if(!empty($keywords)){				$tmp_key_arr = explode(' ',$keywords);				$key_arr = array();				foreach($tmp_key_arr as $value){					if(!empty($value)){						array_push($key_arr,$value);					}				}				if(count($key_arr)>5){					$this->error('关键词最多5个。');				}			}						//营业时间			$office_time = array();			if($_POST['office_start_time'] != '00:00' || $_POST['office_stop_time'] != '00:00'){				array_push($office_time,array('open'=>$_POST['office_start_time'],'close'=>$_POST['office_stop_time']));			}			if($_POST['office_start_time2'] != '00:00' || $_POST['office_stop_time2'] != '00:00'){				array_push($office_time,array('open'=>$_POST['office_start_time2'],'close'=>$_POST['office_stop_time2']));			}			if($_POST['office_start_time3'] != '00:00' || $_POST['office_stop_time3'] != '00:00'){				array_push($office_time,array('open'=>$_POST['office_start_time3'],'close'=>$_POST['office_stop_time3']));			}			$_POST['office_time'] = serialize($office_time);						$_POST['sort'] = intval($_POST['sort']);			$long_lat = explode(',',$_POST['long_lat']);			$_POST['long'] = $long_lat[0];			$_POST['lat'] = $long_lat[1];			$_POST['last_time'] = $_SERVER['REQUEST_TIME'];			$_POST['add_from'] = '0';			$_POST['mer_id'] = $this->merchant_session['mer_id'];			$ismain=intval($_POST['ismain']);			if($this->config['store_verify']){				$_POST['status'] = $this->merchant_session['issign'] ? '1' :'2';			}else{				$_POST['status'] = '1';			}						$_POST['discount_txt'] = '';			$discount_type = isset($_POST['discount_type']) ? intval($_POST['discount_type']) : 0;			if ($discount_type == 1) {				$discount_percent = isset($_POST['discount_percent']) ? (intval($_POST['discount_percent'] * 10) / 10) : 0;				if ($discount_percent > 0 && $discount_percent < 10) {					$_POST['discount_txt'] = serialize(array('discount_type' => $discount_type, 'discount_percent' => $discount_percent));				} elseif ($discount_percent < 0 || $discount_percent > 10) {					$this->error('折扣率必须在0~10之间的数。');				}			} elseif ($discount_type == 2) {				$condition_price = isset($_POST['condition_price']) ? (intval($_POST['condition_price'] * 100) / 100) : 0;				$minus_price = isset($_POST['minus_price']) ? (intval($_POST['minus_price'] * 100) / 100) : 0;				if ($condition_price < 0 || $minus_price < 0 || $minus_price > $condition_price) {					$this->error('满减的填写不正确，必须都是大于0且满足的金额要大于减免金额。');				}				if ($condition_price > 0 && $minus_price > 0 && $minus_price < $condition_price) {					$_POST['discount_txt'] = serialize(array('discount_type' => $discount_type, 'condition_price' => $condition_price, 'minus_price' => $minus_price));				}			}						if($ismain==1){			   $database_merchant_store->where(array('mer_id'=>$_POST['mer_id']))->save(array('ismain'=>0));			}			if($merchant_store_id = $database_merchant_store->data($_POST)->add()){				M('Merchant_score')->add(array('parent_id'=>$insert_id,'type'=>2));				//判断关键词				if(!empty($key_arr)){					$database_keywords = D('Keywords');					$data_keywords['third_id'] = $merchant_store_id;					$data_keywords['third_type'] = 'Merchant_store';					foreach($key_arr as $value){						$data_keywords['keyword'] = $value;						$database_keywords->data($data_keywords)->add();					}				}				//外卖				$have_waimai = I('have_waimai', 0);				if ($have_waimai) {					$this->success('添加成功！', U("Merchant/Waimai/store", array('store_id'=>$merchant_store_id)));				}								$this->success('添加成功！');			}else{				$this->error('添加失败！请重试~');			}		}else{		   $merchant_mstore = $database_merchant_store->where(array('mer_id' => $this->merchant_session['mer_id'], 'ismain' => 1))->find();		   $ismainno=true;		   if(!empty($merchant_mstore)) $ismainno=false;		   $this->assign('ismainno',$ismainno);		   $this->display();		}	}	/* 编辑店铺 */	public function store_edit(){		$database_merchant_store = D('Merchant_store');				if(IS_POST){			if(empty($_POST['name'])){				$this->error('店铺名称必填！');			}			if(empty($_POST['phone'])){				$this->error('联系电话必填！');			}			if(empty($_POST['long_lat'])){				$this->error('店铺经纬度必填！');			}			if(empty($_POST['adress'])){				$this->error('店铺地址必填！');			}			if(empty($_POST['permoney'])){				$this->error('人均消费必填！');			}			if(empty($_POST['feature'])){				$this->error('店铺特色必填！');			}// 			if(empty($_POST['trafficroute'])){// 				$this->error('交通路线必填！');// 			}				if(empty($_POST['pic'])){				$this->error('请至少上传一张图片');			}			$_POST['pic_info'] = implode(';',$_POST['pic']);						if(empty($_POST['txt_info'])){				$this->error('请输入店铺描述信息');			}						//判断关键词			$keywords = trim($_POST['keywords']);			if(!empty($keywords)){				$tmp_key_arr = explode(' ',$keywords);				$key_arr = array();				foreach($tmp_key_arr as $value){					if(!empty($value)){						array_push($key_arr,$value);					}				}				if(count($key_arr)>5){					$this->error('关键词最多5个。');				}			}						//营业时间			$office_time = array();			if($_POST['office_start_time'] != '00:00' || $_POST['office_stop_time'] != '00:00'){				array_push($office_time,array('open'=>$_POST['office_start_time'],'close'=>$_POST['office_stop_time']));			}			if($_POST['office_start_time2'] != '00:00' || $_POST['office_stop_time2'] != '00:00'){				array_push($office_time,array('open'=>$_POST['office_start_time2'],'close'=>$_POST['office_stop_time2']));			}			if($_POST['office_start_time3'] != '00:00' || $_POST['office_stop_time3'] != '00:00'){				array_push($office_time,array('open'=>$_POST['office_start_time3'],'close'=>$_POST['office_stop_time3']));			}			$_POST['office_time'] = serialize($office_time);						$_POST['sort'] = intval($_POST['sort']);			$long_lat = explode(',',$_POST['long_lat']);			$_POST['long'] = $long_lat[0];			$_POST['lat'] = $long_lat[1];			$_POST['last_time'] = $_SERVER['REQUEST_TIME'];						$_POST['discount_txt'] = '';			$discount_type = isset($_POST['discount_type']) ? intval($_POST['discount_type']) : 0;			if ($discount_type == 1) {				$discount_percent = isset($_POST['discount_percent']) ? (intval($_POST['discount_percent'] * 10) / 10) : 0;				if ($discount_percent > 0 && $discount_percent < 10) {					$_POST['discount_txt'] = serialize(array('discount_type' => $discount_type, 'discount_percent' => $discount_percent));				} elseif ($discount_percent < 0 || $discount_percent > 10) {					$this->error('折扣率必须在0~10之间的数。');				}			} elseif ($discount_type == 2) {				$condition_price = isset($_POST['condition_price']) ? (intval($_POST['condition_price'] * 100) / 100) : 0;				$minus_price = isset($_POST['minus_price']) ? (intval($_POST['minus_price'] * 100) / 100) : 0;				if ($condition_price < 0 || $minus_price < 0 || $minus_price > $condition_price) {					$this->error('满减的填写不正确，必须都是大于0且满足的金额要大于减免金额。');				}				if ($condition_price > 0 && $minus_price > 0 && $minus_price < $condition_price) {					$_POST['discount_txt'] = serialize(array('discount_type' => $discount_type, 'condition_price' => $condition_price, 'minus_price' => $minus_price));				}			}						$condition_merchant_store['store_id'] = $_POST['store_id'];			$condition_merchant_store['mer_id'] = $this->merchant_session['mer_id'];			unset($_POST['store_id']);			//随机立减部分            if ($_POST['merchant_starttime'] || $_POST['merchant_endtime'] || $_POST['merchant_max'] || $_POST['merchant_chance'] || $_POST['merchant_status']) {                $merchant_mid = D('cashier_merchants')->where(array('thirduserid'=>$condition_merchant_store['mer_id']))->find()['mid'];                $merchant_configArr = D('config')                    ->where(array('info'=>'merchant_favourable','tab_id'=>$condition_merchant_store['store_id'],'gid'=>$merchant_mid))                    ->find();                if ($merchant_configArr) {                    $configArr_data = array();                    $value = array();                    $value['merchant_starttime'] = $_POST['merchant_starttime'];                    $value['merchant_endtime'] = $_POST['merchant_endtime'];                    $value['merchant_max'] = $_POST['merchant_max'];                    $value['merchant_chance'] = $_POST['merchant_chance'];                    $configArr_data['value'] = serialize($value);                    $configArr_data['status'] = $_POST['merchant_status'];                    D('config')->where(array('info'=>'merchant_favourable',                        'tab_id'=>$condition_merchant_store['store_id'],                        'gid'=>$merchant_mid))                        ->save($configArr_data);                } else {                    $configArr_data = array();                    $value = array();                    $value['merchant_starttime'] = $_POST['merchant_starttime'];                    $value['merchant_endtime'] = $_POST['merchant_endtime'];                    $value['merchant_max'] = $_POST['merchant_max'];                    $value['merchant_chance'] = $_POST['merchant_chance'];                    $configArr_data['value'] = serialize($value);                    $configArr_data['status'] = $_POST['merchant_status'];                    $configArr_data['name'] = 'merchant_favourable'.rand(1000,9999);                    $configArr_data['tab_id'] = $condition_merchant_store['store_id'];                    $configArr_data['gid'] = $merchant_mid;                    $configArr_data['info'] = 'merchant_favourable';                    $configArr_data['desc'] = '随机免单';                    $configArr_data['tab_name'] = '编辑店铺';                    D('config')->add($configArr_data);                }                unset($_POST['merchant_starttime']);                unset($_POST['merchant_endtime']);                unset($_POST['merchant_max']);                unset($_POST['merchant_chance']);                unset($_POST['merchant_status']);            }			$ismain=intval($_POST['ismain']);			if($ismain==1){			   $database_merchant_store->where(array('mer_id'=>$this->merchant_session['mer_id']))->save(array('ismain'=>0));			}			if($database_merchant_store->where($condition_merchant_store)->data($_POST)->save()){				$data_keywords['third_id'] = $condition_merchant_store['store_id'];				$data_keywords['third_type'] = 'Merchant_store';				$database_keywords = D('Keywords');				$database_keywords->where($data_keywords)->delete();				//判断关键词				if(!empty($key_arr)){					foreach($key_arr as $value){						$data_keywords['keyword'] = $value;						$database_keywords->data($data_keywords)->add();					}				}								$this->success('保存成功！');			}else{				$this->error('保存失败！！您是不是没做过修改？请重试~');			}		}else{			$condition_merchant_store['store_id'] = $_GET['id'];			$condition_merchant_store['mer_id'] = $this->merchant_session['mer_id'];			$now_store = $database_merchant_store->where($condition_merchant_store)->find();			if(empty($now_store)){				$this->error('店铺不存在！');			}			$now_store['office_time'] = unserialize($now_store['office_time']);						if(!empty($now_store['pic_info'])){				$store_image_class = new store_image();				$tmp_pic_arr = explode(';',$now_store['pic_info']);				foreach($tmp_pic_arr as $key=>$value){					$now_store['pic'][$key]['title'] = $value;					$now_store['pic'][$key]['url'] = $store_image_class->get_image_by_path($value);				}			}			$keywords = D('Keywords')->where(array('third_type' => 'Merchant_store', 'third_id' => $condition_merchant_store['store_id']))->select();			$str = "";			foreach ($keywords as $key) {				$str .= $key['keyword'] . " ";			}			$now_store['keywords'] = $str;			$now_store['discount_txt'] = unserialize($now_store['discount_txt']);            //商户优惠配置信息            $merchant_mid = D('cashier_merchants')->where(array('thirduserid'=>$condition_merchant_store['mer_id']))->find()['mid'];            $merchant_configArr = D('config')->where(array('info'=>'merchant_favourable','tab_id'=>$condition_merchant_store['store_id'],'gid'=>$merchant_mid))->find();            $merchant_configArr['value'] = unserialize($merchant_configArr['value']);            $this->assign('merchant_configArr',$merchant_configArr);			$this->assign('now_store',$now_store);			$this->display();		}	}	/* 店铺状态 */	public function store_status(){		$database_merchant_store = D('Merchant_store');		$data_merchant_store['status'] = $_POST['type'] == 'open' ? '1' : '0';		$condition_merchant_store['store_id'] = $_POST['id'];		$condition_merchant_store['mer_id'] = $this->merchant_session['mer_id'];		if($database_merchant_store->where($condition_merchant_store)->data($data_merchant_store)->save()){			exit('1');		}else{			exit;		}	}	/* 删除店铺 */	public function store_del(){		$condition_merchant_store['store_id'] = intval(trim($_GET['id']));		$group_storeDb = D('Group_store');		if($group_storeDb->where($condition_merchant_store)->order('group_id desc')->find()){		     $this->error('该店铺下有'.$this->config['group_alias_name'].'，请先解除店铺与对应'.$this->config['group_alias_name'].'的关系才能删除！');			 exit();		}		$database_merchant_store = D('Merchant_store');		$condition_merchant_store['mer_id'] = $this->merchant_session['mer_id'];		/***$database_merchant_store->where($condition_merchant_store)->delete()**改软删除*4禁用***/		if($database_merchant_store->where($condition_merchant_store)->save(array('status'=>4))){			$this->success('删除成功！');		}else{			$this->error('删除失败！');		}	}		public function staff(){		$database_merchant_store = D('Merchant_store');		$condition_merchant_store['store_id'] = $_GET['store_id'];		$condition_merchant_store['mer_id'] = $this->merchant_session['mer_id'];		$now_store = $database_merchant_store->where($condition_merchant_store)->find();		if(empty($now_store)){			$this->error('店铺不存在！');		}		$this->assign('now_store',$now_store);							$condition_store_staff['token'] = $this->token;		$condition_store_staff['store_id'] = $_GET['store_id'];		$staff_list = D('Merchant_store_staff')->where($condition_store_staff)->order('`id` desc')->select();		$this->assign('staff_list', $staff_list);		$this->display();	}	public function staffSet(){		$database_merchant_store = D('Merchant_store');		$condition_merchant_store['store_id'] = $_GET['store_id'];		$condition_merchant_store['mer_id'] = $this->merchant_session['mer_id'];		$now_store = $database_merchant_store->where($condition_merchant_store)->find();		if(empty($now_store)){			$this->error('店铺不存在！');		}		$this->assign('now_store',$now_store);				$_POST['store_id'] = $now_store['store_id'];		$company_staff_db = M('Merchant_store_staff');		if(IS_POST){			if (!trim($_POST['name']) || !trim($_POST['username'])){				$this->error('姓名、帐号都不能为空');			}			$_POST['token'] = $this->token;			$_POST['time'] = time();						if (!isset($_GET['itemid'])){				$condition_store_staff_username['username'] = $_POST['username'];				if($company_staff_db->field('`id`')->where($condition_store_staff_username)->find()){					$this->error('帐号已经存在！请换一个。');				}				if(!trim($_POST['password'])){					$this->error('密码不能为空');				}				$_POST['password'] = md5($_POST['password']);								if(!$company_staff_db->add($_POST)){					$this->error('添加失败，请重试。');				}			}else{				/* 检测帐号 */				$condition_store_staff_username['username'] = $_POST['username'];				$username_staff = $company_staff_db->field('`id`')->where($condition_store_staff_username)->find();				if($username_staff['id'] != $_GET['itemid']){					$this->error('帐号已经存在！请换一个。');				}				if(!trim($_POST['password'])){					unset($_POST['password']);				}else{					$_POST['password'] = md5($_POST['password']);				}				if(!$company_staff_db->where(array('id'=>intval($_GET['itemid'])))->save($_POST)){					$this->error('修改失败，请重试。');				}			}			$this->success('操作成功',U('Config/staff',array('store_id'=>$now_store['store_id'])));		}else{			if(isset($_GET['itemid'])){				$thisItem = $company_staff_db->where(array('id'=>intval($_GET['itemid'])))->find();			}else{				$thisItem['companyid'] = 0;			}			$this->assign('item', $thisItem);			$this->display('staffSet');		}	}	public function staffDelete(){		$database_merchant_store = D('Merchant_store');		$condition_merchant_store['store_id'] = $_GET['store_id'];		$condition_merchant_store['mer_id'] = $this->merchant_session['mer_id'];		$now_store = $database_merchant_store->where($condition_merchant_store)->find();		if(empty($now_store)){			$this->error('店铺不存在！');		}		$this->assign('now_store',$now_store);				$company_staff_db = M('Merchant_store_staff');				$condition_store_staff['token'] = $this->token;		$condition_store_staff['id'] = $_GET['itemid'];		if($company_staff_db->where($condition_store_staff)->delete()){			$this->success('操作成功',U('Config/staff',array('store_id'=>$now_store['store_id'])));		}else{			$this->error('操作失败，请重试。');		}			}	}