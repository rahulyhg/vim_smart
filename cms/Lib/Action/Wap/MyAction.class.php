<?phpclass MyAction extends BaseAction{	public $now_user;	public $user_level;	public function __construct(){		parent::__construct();				$this->database_appoint_comment = D('Appoint_comment');                $this->database_appoint = D('Appoint');		if(empty($this->user_session)){			$location_param['referer'] = urlencode($_SERVER['REQUEST_URI']);			redirect(U('Login/index',$location_param));		}		$now_user = D('User')->get_user($this->user_session['uid']);		if(empty($now_user)){			session('user',null);       			$this->error_tips('未获取到您的帐号信息，请重新登录！',U('Login/index'));		}		$all_merchant_money=D('User_merchant_money')->where(array('uid'=>$this->user_session['uid']))->sum('money');//用户在所有商户下的钱		$now_user['app_money'] = floatval($now_user['now_money']);//平台余额		$now_user['now_money'] = $now_user['app_money']+$all_merchant_money;//平台+商户总余额		//积分2016.11.18陈琦		$add=M('user_score_list')->where(array('type'=>1,'uid'=>$this->user_session['uid']))->sum('score');		$reduce=M('user_score_list')->where(array('type'=>2,'uid'=>$this->user_session['uid']))->sum('score');		$result=$add-$reduce;		$now_user['score_count']=$result;		$this->now_user = $now_user;		$this->assign('now_user',$now_user);		$levelDb=M('User_level');		$tmparr=$levelDb->field(true)->order('id ASC')->select();		$levelarr=array();		if($tmparr){		   foreach($tmparr as $vv){		      $levelarr[$vv['level']]=$vv;		   }		}				$this->user_level=$levelarr;		unset($tmparr,$levelarr);		$this->assign('levelarr', $this->user_level);	}		public function index(){		//dump($this->user_session['uid']);//		$arr=M('cashier_order')->where(array('pay_way'=>'appPay','is_pay'=>1))->limit(5)->order('id desc')->select();//		dump($arr[0]);exit;		/*if($this->config['im_appid'] && $_SESSION['openid'] && $this->config['user_center_redirect_friend']){			redirect(U('Api/go_im',array('hash'=>'myList','title'=>urlencode('会员中心'))));exit;		}*/		if ( strpos($_SERVER['HTTP_USER_AGENT'], 'MicroMessenger') == false ) {			$this->assign('weixin',"1");		}		$this->display();	}		public function myinfo(){		$this->display();	}		public function inputinfo(){        $this->display();	}		public function savemyinfo(){	    $_POST['truename']=trim($_POST['truename']);		if(empty($_POST['truename'])) $this->dexit(array('error'=>1,'msg'=>'您的姓名必须要填写！'));		if(empty($_POST['youaddress'])) $this->dexit(array('error'=>1,'msg'=>'地址必须要填写！'));	    if(M('User')->where(array('uid'=>$this->now_user['uid']))->data($_POST)->save()){		      $this->dexit(array('error'=>0,'msg'=>'保存成功！'));		}		$this->dexit(array('error'=>1,'msg'=>'保存失败！'));	}		public function username(){		if(IS_POST){			if(empty($_POST['nickname'])){				$this->assign('error','请输入新用户名！');			}else if($_POST['nickname'] == $this->now_user['nickname']){				$this->assign('error','您还没有修改用户名！');			}else{				$result = D('User')->save_user($this->now_user['uid'],'nickname',$_POST['nickname']);				if($result['error']){					$this->assign('error',$result['msg']);				}else{					redirect(U('My/myinfo',array('OkMsg'=>urlencode('昵称修改成功'))));				}			}		}		$this->display();	}		public function password(){		if(IS_POST){			if(!empty($this->now_user['pwd']) && md5($_POST['currentpassword']) != $this->now_user['pwd']){				$this->assign('error','当前密码输入错误！');			}else if($_POST['currentpassword'] == $_POST['password']){				$this->assign('error','新密码不能和当前密码相同！');			}else if($_POST['password2'] != $_POST['password']){				$this->assign('error','两次新密码输入不一致！');			}else{				$result = D('User')->save_user($this->now_user['uid'],'pwd',md5($_POST['password']));				if($result['error']){					$this->assign('error',$result['msg']);				}else{					$uc = import("@.ORG.UcService");//导入UcService.class.php类					$ucService = new UcService;//实例化UcService类					$uid = $ucService->uc_edit($this->now_user['phone'], $_POST['currentpassword'], $_POST['password']);//密码修改					if($uid==-1){						$this->assign('error','当前密码输入错误！');					}					redirect(U('My/myinfo',array('OkMsg'=>urlencode('密码修改成功'))));				}			}		}		$this->display();	}		//发送验证码	public function SmsCodeverify(){		$user_modifypwdDb = M('User_modifypwd');		 if(isset($_POST['phone']) && !empty($_POST['phone'])){			$chars = '0123456789';			mt_srand((double)microtime() * 1000000 * getmypid());			$vcode = "";			while (strlen($vcode) < 6)				$vcode .= substr($chars, (mt_rand() % strlen($chars)), 1);			$content = '您的验证码是：'. $vcode . '。此验证码20分钟内有效，请不要把验证码泄露给其他人。如非本人操作，可不用理会！';			Sms::sendSms(array('mer_id' => 0, 'store_id' => 0, 'content' => $content, 'mobile' => $_POST['phone'], 'uid' => $this->now_user['uid'], 'type' => 'bindphone'));			$addtime = time();			$expiry = $addtime + 20 * 60; /*             * **二十分钟有效期*** */			$data = array('telphone' => $_POST['phone'], 'vfcode' => $vcode, 'expiry' => $expiry, 'addtime' => $addtime);			$insert_id = $user_modifypwdDb->add($data);			$this->ajaxReturn(array('error' => false));			exit();		}	}		public function bind_user(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$user_modifypwdDb = M('User_modifypwd');		if(IS_POST){			if(!empty($this->now_user['phone'])){				$_SESSION['user']['phone'] = $this->now_user['phone'];				$this->error('您已经绑定过手机号！不允许多次绑定。');			}			if(empty($_POST['phone'])){				$this->error('请输入手机号码！');			}			if(empty($_POST['password'])){				$this->error('请输入密码！');			}			$database_user = D('User');			$condition_user['phone'] = $_POST['phone'];			if($database_user->field('`uid`')->where($condition_user)->find()){				$this->error('手机号码已经存在！');			}			$condition_save_user['uid'] = $this->now_user['uid'];			$data_save_user['phone'] = $_POST['phone'];			$data_save_user['pwd'] = md5($_POST['password']);			$data_user['phone'] = $_POST['phone'];			$data_user['nickname'] = substr($_POST['phone'],0,3).'****'.substr($_POST['phone'],7);			$data_user['add_time'] = $data_user['last_time'] = $_SERVER['REQUEST_TIME'];			$data_user['add_ip'] = $data_user['last_ip'] = get_client_ip(1);//			整合uc			$uc = import("@.ORG.UcService");//导入UcService.class.php类			$ucService = new UcService;//实例化UcService类			$uid = $ucService->register($_POST['phone'], $_POST['password'],$_POST['phone'],$data_user['add_time'],'','',$data_user['add_ip'],$data_user['add_time'],$data_user['add_time']);//注册到UCenter			if($uid <= 0) {				if ($uid == -1) {					$this->error('用户名不合法！');				} elseif ($uid == -2) {					$this->error('包含不允许注册的词语！');				} elseif ($uid == -3) {					$data_save_user['uc_id'] = $uid;					if($database_user->where($condition_save_user)->data($data_save_user)->save()){//				判断业主信息是否进表，未进表让业主信息进表						$bind_village_list = M('House_village_user_bind')->where(array('phone='.$_POST['phone'],'uid=0'))->find();						if($bind_village_list){							M('House_village_user_bind')->where(array('phone='.$_POST['phone'],'uid=0'))->setField('uid',$this->user_session['uid']);						}						$_SESSION['user']['phone'] = $_POST['phone'];						$this->success('手机号码绑定成功！');					}else{						$this->error('手机号码绑定失败！请重试。');					}				}elseif ($uid == -4) {					$this->error('Email 格式有误');				} elseif ($uid == -5) {					$this->error('Email 不允许注册');				} elseif ($uid == -6) {					$this->error('该 Email 已经被注册');				} else {					$this->error('未知错误');				}			}else{				$data_save_user['uc_id'] = $uid;				if($database_user->where($condition_save_user)->data($data_save_user)->save()){//				判断业主信息是否进表，未进表让业主信息进表					$bind_village_list = M('House_village_user_bind')->where(array('phone='.$_POST['phone'],'uid=0'))->find();					if($bind_village_list){						M('House_village_user_bind')->where(array('phone='.$_POST['phone'],'uid=0'))->setField('uid',$this->user_session['uid']);					}					$_SESSION['user']['phone'] = $_POST['phone'];					$this->success('手机号码绑定成功！');				}else{					$this->error('手机号码绑定失败！请重试。');				}			}		}		if(!empty($this->now_user['phone'])){			$this->error_tips('您已经绑定过手机号！不允许多次绑定。');		}		$referer = !empty($_GET['referer']) ? $_GET['referer'] : $_SERVER['HTTP_REFERER'];		$this->assign('referer',$referer);		$this->display();	}		/*优惠券操作*/	public function card(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}				$coupon_list = D('Member_card_coupon')->get_all_coupon($this->user_session['uid']);		$this->assign('coupon_list',$coupon_list);				$this->display();	}		/*选择优惠券*/	public function select_card(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		//以下代码是为了得到商户的mer_id ，并且判断此订单是否存在！		if($_GET['type'] == 'group'){			$now_order = D('Group_order')->get_order_by_id($this->user_session['uid'],$_GET['order_id']);		}else if($_GET['type'] == 'meal' || $_GET['type'] == 'food' || $_GET['type'] == 'foodPad' || $_GET['type'] == 'takeout'){			$now_order = D('Meal_order')->get_order_by_id($this->user_session['uid'],$_GET['order_id']);		}else if($_GET['type'] == 'weidian'){			$now_order = D('Weidian_order')->get_order_by_id($this->user_session['uid'],$_GET['order_id']);		}else if($_GET['type'] == 'appoint'){			$now_order = D('Appoint_order')->get_order_by_id($this->user_session['uid'],$_GET['order_id']);		}else if($_GET['type'] == 'livepay'){			$now_order = D('House_village_pay_order')->get_order_by_id($this->user_session['uid'],$_GET['order_id']);		}else{			$this->error_tips('来源非法，请检查后再访问。');		}		if(empty($now_order)){			$this->error_tips('当前订单不存在！');		}		$this->assign('back_url',U('Pay/check',$_GET));		$card_list = D('Member_card_coupon')->get_coupon($now_order['mer_id'],$this->user_session['uid']);		if(!empty($card_list)){			$param = $_GET;			foreach($card_list as &$value){				$param['card_id'] =$value['record_id'];				$value['select_url'] = U('Pay/check',$param);			}			$this->assign('card_list',$card_list);		}		$this->display();	}		/*地址操作*/	public function adress(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$adress_list = D('User_adress')->get_adress_list($this->user_session['uid']);		if(empty($adress_list)){			redirect(U('My/edit_adress',$_GET));		}else{			if($_GET['group_id']){				$select_url = 'Group/buy';			} elseif ($_GET['store_id']) {				if ($_GET['buy_type'] == 'waimai') {					$select_url = 'Takeout/sureOrder';				} else {					$select_url = 'Meal/cart';				}			}			if($select_url){				$this->assign('back_url',U($select_url,$_GET));			}else{				$this->assign('back_url',U('My/myinfo'));			}						$param = $_GET;							foreach($adress_list as $key=>$value){				$param['adress_id'] = $value['adress_id'];				if(!empty($select_url)){					$adress_list[$key]['select_url'] = U($select_url,$param);				}				$adress_list[$key]['edit_url'] = U('My/edit_adress',$param);				$adress_list[$key]['del_url'] = U('My/del_adress',$param);			}						$this->assign('adress_list',$adress_list);			$this->display();		}	}		/*添加编辑地址*/	public function edit_adress(){		if(IS_POST){			if(D('User_adress')->post_form_save($this->user_session['uid']) !== false){				cookie('user_address', 0);				$this->success('保存成功！');			}else{				$this->error('地址保存失败！请重试');			}		}else{			$database_area = D('Area');			$id = $_GET['adress_id'];			if(cookie('user_address') === '0' || cookie("user_address") == "") {// 				$where['address_id'] = $id;// 				$where['uid'] = $this->_uid;				$now_adress = D('User_adress')->get_adress($this->user_session['uid'], $id);				if ($now_adress) {					$this->assign('now_adress', $now_adress);									$province_list = $database_area->get_arealist_by_areaPid(0);					$this->assign('province_list',$province_list);											$city_list = $database_area->get_arealist_by_areaPid($now_adress['province']);					$this->assign('city_list', $city_list);											$area_list = $database_area->get_arealist_by_areaPid($now_adress['city']);					$this->assign('area_list', $area_list);				} else {					$now_city_area = $database_area->where(array('area_id'=>$this->config['now_city']))->find();					$this->assign('now_city_area',$now_city_area);										$province_list = $database_area->get_arealist_by_areaPid(0);					$this->assign('province_list',$province_list);											$city_list = $database_area->get_arealist_by_areaPid($now_city_area['area_pid']);					$this->assign('city_list',$city_list);											$area_list = $database_area->get_arealist_by_areaPid($now_city_area['area_id']);					$this->assign('area_list',$area_list);				}			} else {				$cookie = json_decode($_COOKIE['user_address'], true);				$now_adress = $cookie;				$now_adress['default'] = $now_adress['defaul'];				$now_adress['adress_id'] = $now_adress['id'];				$this->assign('now_adress', $now_adress);				$province_list = $database_area->get_arealist_by_areaPid(0);				$this->assign('province_list',$province_list);								$city_list = $database_area->get_arealist_by_areaPid($now_adress['province']);				$this->assign('city_list', $city_list);								$area_list = $database_area->get_arealist_by_areaPid($now_adress['city']);				$this->assign('area_list', $area_list);			}						// 			if($_GET['adress_id']){// 				$now_adress = D('User_adress')->get_adress($this->user_session['uid'],$_GET['adress_id']);// 				if(empty($now_adress)){// 					$this->error_tips('该地址不存在');// 				}// 				$this->assign('now_adress',$now_adress);				// 				$province_list = $database_area->get_arealist_by_areaPid(0);// 				$this->assign('province_list',$province_list);					// 				$city_list = $database_area->get_arealist_by_areaPid($now_adress['province']);// 				$this->assign('city_list',$city_list);					// 				$area_list = $database_area->get_arealist_by_areaPid($now_adress['city']);// 				$this->assign('area_list',$area_list);// 			}else{// 				$now_city_area = $database_area->where(array('area_id'=>$this->config['now_city']))->find();// 				$this->assign('now_city_area',$now_city_area);				// 				$province_list = $database_area->get_arealist_by_areaPid(0);// 				$this->assign('province_list',$province_list);					// 				$city_list = $database_area->get_arealist_by_areaPid($now_city_area['area_pid']);// 				$this->assign('city_list',$city_list);					// 				$area_list = $database_area->get_arealist_by_areaPid($now_city_area['area_id']);// 				$this->assign('area_list',$area_list);// 			}						$params = $_GET;			unset($params['adress_id']);			$this->assign('params',$params);		}				$this->display();	}		/* 地图 */	public function adres_map(){		$cookie = json_decode($_COOKIE['user_address'], true);		if (empty($cookie['province']) || empty($cookie['city'])) {			$this->error('请选择城市');		}		$list = D('Area')->field(true)->where("area_id IN ({$cookie['province']}, {$cookie['city']}, {$cookie['area']})")->order('area_type ASC')->select();		$address = '';		foreach ($list as $row) {			$address .= $row['area_name'];		}		$this->assign('address', $address);		$params = $_GET;		unset($params['adress_id']);		$this->assign('params',$params);		$this->display();	}		/*删除地址*/	public function del_adress(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$result = D('User_adress')->delete_adress($this->user_session['uid'],$_GET['adress_id']);		if($result){			$this->success('删除成功！');		}else{			$this->error('删除失败！');		}	}		public function select_area(){		$area_list = D('Area')->get_arealist_by_areaPid($_POST['pid']);		if(!empty($area_list)){			$return['error'] = 0;			$return['list'] = $area_list;		}else{			$return['error'] = 1;		}		echo json_encode($return);	}		/*全部团购*/	public function group_order_list(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}				$order_list = D('Group')->wap_get_order_list($this->user_session['uid'],intval($_GET['status']));		$this->assign('order_list',$order_list);		$this->display();	}		/*全部预约*/	public function appoint_order_list(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		    }	    		$mer_id = $this->_get('mer_id');		$status = $this->_get('status') ? $this->_get('status') : 0;		$database_appoint = D('Appoint');				if($status == 1){		    $where['service_status'] = 0;		}		if($status == 2){		    $where['service_status'] = 1;		}		if($mer_id){		   $where['mer_id'] = $mer_id;		   $where['uid'] = $this->user_session['uid'];		   $order_list = $database_appoint->wap_order_list($where);		}else{		    $order_list = $database_appoint->wap_get_order_list($this->user_session['uid'], $status);		}				$this->assign('order_list', $order_list);		$this->display();	}		/*团购收藏*/	public function group_collect(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}				$this->assign(D('Group')->wap_get_group_collect_list($this->user_session['uid']));				$this->display();	}		//预约收藏	public function appoint_collect(){	    if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$this->assign(D('Appoint')->wap_get_appoint_collect_list($this->user_session['uid']));		$this->display();	}			/*预约详情*/	public function appoint_order(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$now_order = D('Appoint_order')->get_order_detail_by_id($this->user_session['uid'],intval($_GET['order_id']),true);		if(empty($now_order)){			$this->error_tips('当前订单不存在');		}				$this->assign('now_order',$now_order);		$this->display();	}		/*团购详情*/	public function group_order(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$otherrm = isset($_GET['otherrm']) ? intval($_GET['otherrm']) : 0;		$otherrm && $_SESSION['otherwc'] = null;		$now_order = D('Group_order')->get_order_detail_by_id($this->user_session['uid'],intval($_GET['order_id']),true);		if(empty($now_order)){			$this->error_tips('当前订单不存在'.$_GET['order_id']);		}		if(empty($now_order['paid'])){			$now_order['status_txt'] = '未付款';		}else if(empty($now_order['third_id']) && $now_order['pay_type'] == 'offline'){			$now_order['status_txt'] = '线下未付款';		}else if(empty($now_order['status'])){			if($now_order['tuan_type'] != 2){				$now_order['status_txt'] = '未消费';			}else{				$now_order['status_txt'] = '未发货';			}		}else if($now_order['status'] == '1'){			$now_order['status_txt'] = '待评价';		}else if($now_order['status'] == '2'){			$now_order['status_txt'] = '已完成';		}else if($now_order['status'] == '3'){			$now_order['status_txt'] = '已退款';			$now_order['group_pass_txt'] = '退款订单无法查看';		}		$this->assign('now_order',$now_order);		// dump($now_order);		$this->display();	}		/*团购详情*/	public function meal_order_refund(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}				$orderid = intval($_GET['orderid']);		$store_id = intval($_GET['store_id']);		$now_order = M("Meal_order")->where(array('order_id' => $orderid, 'mer_id' => $this->mer_id, 'store_id' => $store_id))->find();		if (empty($now_order)) {			$this->error_tips('当前订单不存在');		}		/*if ($now_order['is_confirm']) {			$this->error_tips('当前订单店员正在处理中，不能退款或取消');		}*/		if(empty($now_order['paid'])){			$this->error_tips('当前订单还未付款！');		}		if(!empty($now_order['status'])){			if ($now_order['meal_type']) {				$this->error_tips('订单必须是未消费状态才能取消！',U('Takeout/order_detail',array('order_id'=>$now_order['order_id'], 'store_id' => $store_id, 'mer_id' => $this->mer_id)));			} else {				$this->error_tips('订单必须是未消费状态才能取消！',U('Food/order_detail',array('order_id'=>$now_order['order_id'], 'store_id' => $store_id, 'mer_id' => $this->mer_id)));			}		}		$now_order['price'] = $now_order['pay_money'];		if(!empty($now_order['pay_type'])){			if($now_order['pay_type']=="weixin"){				$now_order['pay_type_txt']="微信";			}		}//		dump($now_order);exit;		$this->assign('now_order',$now_order);		$this->display();	}		//取消订单	public function meal_order_check_refund(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$orderid = intval($_GET['orderid']);		$store_id = intval($_GET['store_id']);		$now_order = M("Meal_order")->where(array('order_id' => $orderid, 'mer_id' => $this->mer_id, 'store_id' => $store_id))->find();		//dump($now_order);		if(empty($now_order)){			$this->error_tips('当前订单不存在');		}		/*if ($now_order['is_confirm']) {			$this->error_tips('当前订单店员正在处理中，不能退款或取消');		}*/		if(empty($now_order['paid'])){			$this->error_tips('当前订单还未付款！');		}		if(!empty($now_order['status'])){			if ($now_order['meal_type']) {				$this->error_tips('订单必须是未消费状态才能取消！',U('Takeout/order_detail',array('order_id'=>$now_order['order_id'], 'store_id' => $store_id, 'mer_id' => $this->mer_id)));			} else {				$this->error_tips('订单必须是未消费状态才能取消！',U('Food/order_detail',array('order_id'=>$now_order['order_id'], 'store_id' => $store_id, 'mer_id' => $this->mer_id)));			}		}	// 		$now_order['price'] = $now_order['pay_money'];// 		$data_meal_order['pay_money'] = 0;// 		$data_meal_order['paid'] = 0;		$my_user = D('User')->field(true)->where(array('uid' => $now_order['uid']))->find();		//在线付款退款		if($now_order['pay_type'] == 'offline'){			$data_meal_order['order_id'] = $now_order['order_id'];			$data_meal_order['refund_detail'] = serialize(array('refund_time'=>time()));			$data_meal_order['status'] = 3;			if(D('Meal_order')->data($data_meal_order)->save()){				//退款打印				$msg = ArrayToStr::array_to_str($now_order['order_id']);				$op = new orderPrint($this->config['print_server_key'], $this->config['print_server_topdomain']);				$op->printit($this->mer_id, $store_id, $msg, 1);								$str_format = ArrayToStr::print_format($now_order['order_id']);				foreach ($str_format as $print_id => $print_msg) {					$print_id && $op->printit($this->mer_id, $store_id, $print_msg, 1, $print_id);				}								$mer_store = D('Merchant_store')->where(array('mer_id' => $this->mer_id, 'store_id' => $store_id))->find();				$sms_data = array('mer_id' => $mer_store['mer_id'], 'store_id' => $mer_store['store_id'], 'type' => 'food');				if ($this->config['sms_cancel_order'] == 1 || $this->config['sms_cancel_order'] == 3) {					$sms_data['uid'] = $now_order['uid'];					$sms_data['mobile'] = $now_order['phone'] ? $now_order['phone'] : $my_user['phone'];					$sms_data['sendto'] = 'user';					$sms_data['content'] = '您在 ' . $mer_store['name'] . '店中下的订单(订单号：' . $orderid . '),在' . date('Y-m-d H:i:s') . '时已被您取消并退款，欢迎再次光临！';					Sms::sendSms($sms_data);				}				if ($this->config['sms_cancel_order'] == 2 || $this->config['sms_cancel_order'] == 3) {					$sms_data['uid'] = 0;					$sms_data['mobile'] = $mer_store['phone'];					$sms_data['sendto'] = 'merchant';					$sms_data['content'] = '顾客' . $now_order['name'] . '的预定订单(订单号：' . $orderid . '),在' . date('Y-m-d H:i:s') . '时已被客户取消并退款！';					Sms::sendSms($sms_data);				}				//如果使用了优惠券				if($now_order['card_id']){					$result = D('Member_card_coupon')->add_card($now_order['card_id'],$now_order['mer_id'],$now_order['uid']);										$param = array('refund_time' => time());					if($result['error_code']){						$param['err_msg'] = $result['msg'];					} else {						$param['refund_id'] = $now_order['order_id'];					}										$data_meal_order['order_id'] = $now_order['order_id'];					$data_meal_order['refund_detail'] = serialize($param);					$result['error_code'] || $data_meal_order['status'] = 3;					D('Meal_order')->data($data_meal_order)->save();					if ($result['error_code']) {						$this->error_tips($result['msg']);					}					$go_refund_param['msg'] = $result['msg'];				}								 //如果使用了积分 2016-1-15				//if ($now_order['score_used_count']!=='0') {				if(!empty($now_order['score_used_count'])){					$order_info=unserialize($now_order['info']);					$order_name=$order_info[0]['name']."*".$order_info[0]['num'];					$result = D('User')->add_score($now_order['uid'],$now_order['score_used_count'],'退款 '.$order_name.' 积分回滚');					$param = array('refund_time' => time());					if($result['error_code']){							$param['err_msg'] = $result['msg'];					} else {							$param['refund_id'] = $now_order['order_id'];					}					$data_meal_order['order_id'] = $now_order['order_id'];					$data_meal_order['refund_detail'] = serialize($param);					$result['error_code'] || $data_meal_order['status'] = 3;					D('Group_order')->data($data_meal_order)->save();					if ($result['error_code']) {							$this->error_tips($result['msg']);					}					$go_refund_param['msg'] = $result['msg'];				}								if ($now_order['meal_type']) {					$this->success_tips('您使用的是线下支付！订单状态已修改为已退款。',U('Takeout/order_detail',array('order_id'=>$now_order['order_id'], 'store_id' => $store_id, 'mer_id' => $this->mer_id)));				} else {					$this->success_tips('您使用的是线下支付！订单状态已修改为已退款。',U('Food/order_detail',array('order_id'=>$now_order['order_id'], 'store_id' => $store_id, 'mer_id' => $this->mer_id)));				}				exit;			}else{				$this->error_tips('取消订单失败！请重试。');			}		}		if($now_order['payment_money'] != '0.00'){			if($now_order['is_own']){				$pay_method = array();				$merchant_ownpay = D('Merchant_ownpay')->field('mer_id',true)->where(array('mer_id'=>$now_order['mer_id']))->find();				foreach($merchant_ownpay as $ownKey=>$ownValue){					$ownValueArr = unserialize($ownValue);					if($ownValueArr['open']){						$ownValueArr['is_own'] = true;						$pay_method[$ownKey] = array('name'=>$this->getPayName($ownKey),'config'=>$ownValueArr);					}				}			}else{				$pay_method = D('Config')->get_pay_method();			}						if(empty($pay_method)){				$this->error_tips('系统管理员没开启任一一种支付方式！');			}			if(empty($pay_method[$now_order['pay_type']])){				$this->error_tips('您选择的支付方式不存在，请更新支付方式！');			}					$pay_class_name = ucfirst($now_order['pay_type']);			$import_result = import('@.ORG.pay.'.$pay_class_name);			if(empty($import_result)){				$this->error_tips('系统管理员暂未开启该支付方式，请更换其他的支付方式');			}						if ($now_order['meal_type'] == 1) {				$now_order['order_type'] = 'takeout';			} elseif ($now_order['meal_type'] == 2) {				$now_order['order_type'] = 'foodPad';			} else {				$now_order['order_type'] = 'food';			}			$order_id = $now_order['order_id'];			$now_order['order_id'] = $now_order['orderid'];						$pay_class = new $pay_class_name($now_order,$now_order['payment_money'],$now_order['pay_type'],$pay_method[$now_order['pay_type']]['config'],$this->user_session,1);			$go_refund_param = $pay_class->refund();						if ($now_order['pay_type'] == 'baidu') {				if (empty($go_pay_param['error'])) {					$this->assign('url', $go_refund_param['url']);					$this->display('refund');				} else {					$this->error_tips($go_refund_param['msg']);				}				exit();			}			//支付宝的特殊性 TODO// 			if ($now_order['pay_type'] == 'alipay') {// 				echo $go_refund_param;// 				exit();// 			}			$now_order['order_id'] = $orderid;			$data_meal_order['order_id'] = $orderid;			$data_meal_order['refund_detail'] = serialize($go_refund_param['refund_param']);			if(empty($go_refund_param['error']) && $go_refund_param['type'] == 'ok'){				$data_meal_order['status'] = 3;						}			D('Meal_order')->data($data_meal_order)->save();			if($data_meal_order['status'] != 3){					$this->error_tips($go_refund_param['msg']);			}		}		//如果使用了优惠券		if($now_order['card_id']){			$result = D('Member_card_coupon')->add_card($now_order['card_id'],$now_order['mer_id'],$now_order['uid']);						$param = array('refund_time' => time());			if($result['error_code']){				$param['err_msg'] = $result['msg'];			} else {				$param['refund_id'] = $now_order['order_id'];			}						$data_meal_order['order_id'] = $now_order['order_id'];			$data_meal_order['refund_detail'] = serialize($param);			$result['error_code'] || $data_meal_order['status'] = 3;			D('Meal_order')->data($data_meal_order)->save();			if ($result['error_code']) {				$this->error_tips($result['msg']);			}			$go_refund_param['msg'] = $result['msg'];		}		        //如果使用了积分 2016-1-15        //if ($now_order['score_used_count']!=='0') {		if(!empty($now_order['score_used_count'])){            $order_info=unserialize($now_order['info']);            $order_name=$order_info[0]['name']."*".$order_info[0]['num'];            $result = D('User')->add_score($now_order['uid'],$now_order['score_used_count'],'退款 '.$order_name.' 积分回滚');            $param = array('refund_time' => time());            if($result['error_code']){                    $param['err_msg'] = $result['msg'];            } else {                    $param['refund_id'] = $now_order['order_id'];            }            $data_meal_order['order_id'] = $now_order['order_id'];            $data_meal_order['refund_detail'] = serialize($param);            $result['error_code'] || $data_meal_order['status'] = 3;            D('Group_order')->data($data_meal_order)->save();            if ($result['error_code']) {                    $this->error_tips($result['msg']);            }            $go_refund_param['msg'] .= $result['msg'];        }        		//平台余额退款		if($now_order['balance_pay'] != '0.00'){			$add_result = D('User')->add_money($now_order['uid'],$now_order['balance_pay'],'退款 '.$now_order['order_name'].' 增加余额');						$param = array('refund_time' => time());			if($result['error_code']){				$param['err_msg'] = $result['msg'];			} else {				$param['refund_id'] = $now_order['order_id'];			}						$data_meal_order['order_id'] = $now_order['order_id'];			$data_meal_order['refund_detail'] = serialize($param);			$result['error_code'] || $data_meal_order['status'] = 3;			D('Meal_order')->data($data_meal_order)->save();			if ($result['error_code']) {				$this->error_tips($result['msg']);			}			$go_refund_param['msg'] = '平台余额退款成功';// 			if($add_result['error_code']){// 				$this->error_tips($add_result['msg']);// 			}// 			$go_refund_param['msg'] = $add_result['msg'];			// 			$data_meal_order['order_id'] = $now_order['order_id'];// 			$data_meal_order['refund_detail'] = serialize(array('refund_time'=>time()));// 			$data_meal_order['status'] = 3;// 			D('Meal_order')->data($data_meal_order)->save();		}		//商家会员卡余额退款		if($now_order['merchant_balance'] != '0.00'){			$result = D('Member_card')->add_card($now_order['uid'],$now_order['mer_id'],$now_order['merchant_balance'],'退款 '.$now_order['order_name'].' 增加余额');						$param = array('refund_time' => time());			if($result['error_code']){				$param['err_msg'] = $result['msg'];			} else {				$param['refund_id'] = $now_order['order_id'];			}						$data_meal_order['order_id'] = $now_order['order_id'];			$data_meal_order['refund_detail'] = serialize($param);			$result['error_code'] || $data_meal_order['status'] = 3;			D('Meal_order')->data($data_meal_order)->save();			if ($result['error_code']) {				$this->error_tips($result['msg']);			}			$go_refund_param['msg'] = $result['msg'];		}		if(empty($now_order['pay_type'])){			$data_meal_order['order_id'] = $now_order['order_id'];			$data_meal_order['status'] = 3;			D('Meal_order')->data($data_meal_order)->save();			$go_refund_param['msg'] = '取消订单成功';		}				//退款时销量回滚		if ($now_order['paid'] == 1 && date('m', $now_order['dateline']) == date('m')) {			foreach (unserialize($now_order['info']) as $menu) {				D('Meal')->where(array('meal_id' => $menu['id'], 'sell_count' => array('gt', $menu['num'])))->setDec('sell_count', $menu['num']);			}		}		D("Merchant_store_meal")->where(array('store_id' => $now_order['store_id'], 'sale_count' => array('gt', 0)))->setDec('sale_count', 1);				//退款打印		$msg = ArrayToStr::array_to_str($now_order['order_id']);		$op = new orderPrint($this->config['print_server_key'], $this->config['print_server_topdomain']);		$op->printit($this->mer_id, $store_id, $msg, 1);		$str_format = ArrayToStr::print_format($now_order['order_id']);		foreach ($str_format as $print_id => $print_msg) {			$print_id && $op->printit($this->mer_id, $store_id, $print_msg, 1, $print_id);		}				$mer_store = D('Merchant_store')->where(array('mer_id' => $this->mer_id, 'store_id' => $store_id))->find();		$sms_data = array('mer_id' => $mer_store['mer_id'], 'store_id' => $mer_store['store_id'], 'type' => 'food');		if ($this->config['sms_cancel_order'] == 1 || $this->config['sms_cancel_order'] == 3) {			$sms_data['uid'] = $now_order['uid'];			$sms_data['mobile'] = $now_order['phone'] ? $now_order['phone'] : $my_user['phone'];			$sms_data['sendto'] = 'user';			$sms_data['content'] = '您在 ' . $mer_store['name'] . '店中下的订单(订单号：' . $orderid . '),在' . date('Y-m-d H:i:s') . '时已被您取消并退款，欢迎再次光临！';			Sms::sendSms($sms_data);		}		if ($this->config['sms_cancel_order'] == 2 || $this->config['sms_cancel_order'] == 3) {			$sms_data['uid'] = 0;			$sms_data['mobile'] = $mer_store['phone'];			$sms_data['sendto'] = 'merchant';			$sms_data['content'] = '顾客' . $now_order['name'] . '的预定订单(订单号：' . $orderid . '),在' . date('Y-m-d H:i:s') . '时已被客户取消并退款！';			Sms::sendSms($sms_data);		}				if ($now_order['meal_type'] == 1) {			$this->success_tips($go_refund_param['msg'], U('Takeout/order_detail',array('order_id'=>$orderid, 'store_id' => $store_id, 'mer_id' => $this->mer_id)));		} else {			$this->success_tips($go_refund_param['msg'], U('Food/order_detail',array('order_id'=>$orderid, 'store_id' => $store_id, 'mer_id' => $this->mer_id)));		}	}    public function meal_order_check_refund2(){	    dump(2);exit;        $order_id=$_GET['orderid'];       $order_info=M('meal_order')->where(array('order_id'=>$order_id))->find();       $pay_config=array();       $mid=M('cashier_merchants')->where(array('thirduserid'=>$order_info['mer_id']))->getField('mid');        $payConfig = M('cashier_payconfig')->where(array('mid'=>$mid))->find();//对应商户的配置参数        $payConfig['configData'] = unserialize(htmlspecialchars_decode($payConfig['configData'],ENT_QUOTES));        $wx_user =$payConfig['configData']['weixin'];//子商户号来源        if($order_info['is_mobile_pay']==1){            $pay_config['pay_weixin_appid']='wx49b9dbe4f861f4f8';            $pay_config['pay_weixin_mchid']='1335484001';            $pay_config['pay_weixin_key']='kfi4fkfigk4igkfi2lgigkfigk3igkfi';            $pay_config['pay_weixin_appsecret']='9d93154d0f0b3bc9c15c7c34e3edd2f3';        }        //dump($pay_config);exit;d        if(empty($pay_config['pay_weixin_appid']) || empty($pay_config['pay_weixin_mchid']) || empty($pay_config['pay_weixin_key']) || empty($pay_config['pay_weixin_appsecret'])){            return array('error'=>1,'msg'=>'微信支付缺少配置信息！请联系管理员处理或选择其他支付方式。');        }        $weixin_cert =  $wx_user['apiclient_cert'];        $weixin_key =  $wx_user['apiclient_key'];        if(empty($weixin_cert) || empty($weixin_key)){            return array('error'=>1,'msg'=>'管理员在后台支付配置中必须上传 微信支付证书和微信支付证书密钥！');        }        import("@.ORG.pay.Weixinnewpay.WxPayPubHelper");        $refund = new Refund_pub($pay_config['pay_weixin_appid'],$pay_config['pay_weixin_mchid'],$pay_config['pay_weixin_key'],$pay_config['pay_weixin_appsecret']);         //dump($_SESSION['order']['order_type'].'_'.$_SESSION['order']['orderid'].($order_info['is_own'] ? '_1' : ''));exit;        //food_2017071117542700000442       // dump($_SESSION['order']);exit;        $out_trade_no=M('meal_order')->where(array('order_id'=>$order_id))->getField('orderid');        $refund->setParameter("out_trade_no",$_SESSION['order']['order_type'].'_'.$out_trade_no.($order_info['is_own'] ? '_1' : ''));//商户订单号        $refund->setParameter("out_refund_no",$_SESSION['order']['orderid'].'_'.$_SERVER['REQUEST_TIME']);//商户退款单号       // $refund->setParameter("sub_mch_id",$wx_user['sub_mch_id']);//子商户号        $refund->setParameter("total_fee",floatval($_SESSION['order']['order_total_money']*100));//总金额        $refund->setParameter("refund_fee",$_SESSION['order']['order_total_money']*100);//退款金额        $refund->setParameter("op_user_id",$pay_config['pay_weixin_mchid']);//操作员        $refundResult = $refund->getResult();        unset($_SESSION['order']);        if($refundResult['result_code'] == 'FAIL' && $refundResult['err_code'] != 'REFUND_FEE_INVALID'){            $refund_param['err_msg'] = $refundResult['err_code_des'];            $refund_param['refund_time'] = time();            return array('error'=>1,'type'=>'fail','msg'=>'退款申请失败！如果重试多次还是失败请联系系统管理员。','refund_param'=>$refund_param);        }else{            $refund_param['refund_id'] = $refundResult['refund_id'];            $refund_param['refund_time'] = time();            return array('error'=>0,'type'=>'ok','msg'=>'退款申请成功！请注意查收“微信支付”给您发的退款通知。','refund_param'=>$refund_param);        }    }		public function alipay_refund(){        $order_id_arr = explode('_', substr($_POST['batch_no'], 8));        $order_type = $order_id_arr[0];        $order_id = $order_id_arr[1];                switch($order_type){        	case 'group':        		$now_order = D('Group_order')->where(array('order_id'=>$order_id))->find();        		break;        	case 'meal':        	case 'takeout':        	case 'food':        		$now_order = D('Meal_order')->where(array('orderid'=>$order_id))->find();        		break;        	case 'recharge':        		$now_order = D('User_recharge_order')->where(array('order_id'=>$order_id))->find();        		break;        	case 'appoint':        		$now_order = D('Appoint_order')->where(array('order_id'=>$order_id))->find();        		break;        	case 'waimai':        		$now_order = D('Waimai_order')->where(array('order_id'=>$order_id))->find();        		break;        	default:        		$this->error('非法的订单');        }        if($now_order['status'] == 3){        	switch($order_type){        		case 'group':        			$redirctUrl = C('config.site_url').'/wap.php?g=Wap&c=My&a=group_order&order_id='.$now_order['order_id'];        			break;        		case 'meal':        			$redirctUrl = C('config.site_url').'/wap.php?g=Wap&c=Meal&a=detail&orderid='.$now_order['order_id'].'&mer_id='.$now_order['mer_id'].'&store_id='.$now_order['store_id'];        			break;        		case 'takeout':        			$redirctUrl = C('config.site_url').'/wap.php?g=Wap&c=Takeout&a=order_detail&order_id='.$now_order['order_id'].'&mer_id='.$now_order['mer_id'].'&store_id='.$now_order['store_id'];        			break;        		case 'food':        		case 'foodPad':        			$redirctUrl = C('config.site_url').'/wap.php?g=Wap&c=Food&a=order_detail&order_id='.$now_order['order_id'].'&mer_id='.$now_order['mer_id'].'&store_id='.$now_order['store_id'];        			break;        		case 'weidian':        			$redirctUrl = D('Weidian_order')->get_weidian_url(array('wecha_id'=>$now_order['uid'],'order_no'=>$now_order['weidian_order_id'],'pay_money'=>$now_order['money'],'third_id'=>$go_query_param['order_param']['third_id'],'payment_method'=>$go_query_param['order_param']['pay_type']));        			break;        		case 'appoint':        			$redirctUrl = C('config.site_url').'/wap.php?g=Wap&c=My&a=appoint_order&order_id='.$now_order['order_id'];        			break;        		case 'waimai':        			$redirctUrl = C('config.site_url').'/index.php?g=Waimaiwap&c=Index&a=order&order_id='.$now_order['order_id'];        			break;        		case 'recharge':        			$redirctUrl = C('config.site_url').'/wap.php?c=My&a=index';        			break;        		case 'wxapp':        			$redirctUrl = C('config.site_url').'/wap.php?c=Wxapp&a=pay_back&order_id='.$now_order['order_id'];        			break;        		case 'store':        			$redirctUrl = C('config.site_url').'/wap.php?c=My&a=store_order_list';        			break;        	}        	redirect($redirctUrl);exit;        }        $pay_method = D('Config')->get_pay_method();        if(empty($pay_method)){        	$this->error_tips('系统管理员没开启任一一种支付方式！');        }        $import_result = import('@.ORG.pay.Alipay');        $pay_class = new Alipay('','','alipay',$pay_method['alipay']['config'],$this->user_session,1);        $go_query_param = $pay_class->refund_verify();                        $data_meal_order['order_id'] = $now_order['order_id'];        $data_meal_order['refund_detail'] = serialize($go_refund_param['refund_param']);        if(empty($go_refund_param['error']) && $go_refund_param['type'] == 'ok'){        	$data_meal_order['status'] = 3;        }        D('Meal_order')->data($data_meal_order)->save();        if($data_meal_order['status'] != 3){        	$this->error_tips($go_refund_param['msg']);        }              //         if ($go_query_param['error']) {//         	$this->error_tips($go_query_param['msg']);//         	exit();//         }                     //如果使用了优惠券        if($now_order['card_id']){        	$result = D('Member_card_coupon')->add_card($now_order['card_id'],$now_order['mer_id'],$now_order['uid']);        		        	$param = array('refund_time' => time());        	if($result['error_code']){        		$param['err_msg'] = $result['msg'];        	} else {        		$param['refund_id'] = $now_order['order_id'];        	}        		        	$data_meal_order['order_id'] = $now_order['order_id'];        	$data_meal_order['refund_detail'] = serialize($param);        	$result['error_code'] || $data_meal_order['status'] = 3;        	D('Meal_order')->data($data_meal_order)->save();        	if ($result['error_code']) {        		$this->error_tips($result['msg']);        	}        	$go_refund_param['msg'] = $result['msg'];        }                     //如果使用了积分 2016-1-15        if ($now_order['score_used_count']!=='0'){        	$order_info=unserialize($now_order['info']);        	$order_name=$order_info[0]['name']."*".$order_info[0]['num'];        	$result = D('User')->add_score($now_order['uid'],$now_order['score_used_count'],'退款 '.$order_name.' 积分回滚');        	$param = array('refund_time' => time());        	if($result['error_code']){        		$param['err_msg'] = $result['msg'];        	} else {        		$param['refund_id'] = $now_order['order_id'];        	}        	$data_meal_order['order_id'] = $now_order['order_id'];        	$data_meal_order['refund_detail'] = serialize($param);        	$result['error_code'] || $data_meal_order['status'] = 3;        	D('Group_order')->data($data_meal_order)->save();        	if ($result['error_code']) {        		$this->error_tips($result['msg']);        	}        	$go_refund_param['msg'] .= $result['msg'];        }              //平台余额退款        if($now_order['balance_pay'] != '0.00'){        	$add_result = D('User')->add_money($now_order['uid'],$now_order['balance_pay'],'退款 '.$now_order['order_name'].' 增加余额');        		        	$param = array('refund_time' => time());        	if($result['error_code']){        		$param['err_msg'] = $result['msg'];        	} else {        		$param['refund_id'] = $now_order['order_id'];        	}        		        	$data_meal_order['order_id'] = $now_order['order_id'];        	$data_meal_order['refund_detail'] = serialize($param);        	$result['error_code'] || $data_meal_order['status'] = 3;        	D('Meal_order')->data($data_meal_order)->save();        	if ($result['error_code']) {        		$this->error_tips($result['msg']);        	}        	$go_refund_param['msg'] = '平台余额退款成功';        	// 			if($add_result['error_code']){        	// 				$this->error_tips($add_result['msg']);        	// 			}        	// 			$go_refund_param['msg'] = $add_result['msg'];        		        	// 			$data_meal_order['order_id'] = $now_order['order_id'];        	// 			$data_meal_order['refund_detail'] = serialize(array('refund_time'=>time()));        	// 			$data_meal_order['status'] = 3;        	// 			D('Meal_order')->data($data_meal_order)->save();        }        //商家会员卡余额退款        if($now_order['merchant_balance'] != '0.00'){        	$result = D('Member_card')->add_card($now_order['uid'],$now_order['mer_id'],$now_order['merchant_balance'],'退款 '.$now_order['order_name'].' 增加余额');        		        	$param = array('refund_time' => time());        	if($result['error_code']){        		$param['err_msg'] = $result['msg'];        	} else {        		$param['refund_id'] = $now_order['order_id'];        	}        		        	$data_meal_order['order_id'] = $now_order['order_id'];        	$data_meal_order['refund_detail'] = serialize($param);        	$result['error_code'] || $data_meal_order['status'] = 3;        	D('Meal_order')->data($data_meal_order)->save();        	if ($result['error_code']) {        		$this->error_tips($result['msg']);        	}        	$go_refund_param['msg'] = $result['msg'];        }        if(empty($now_order['pay_type'])){        	$data_meal_order['order_id'] = $now_order['order_id'];        	$data_meal_order['status'] = 3;        	D('Meal_order')->data($data_meal_order)->save();        	$go_refund_param['msg'] = '取消订单成功';        }                //退款时销量回滚        if ($now_order['paid'] == 1 && date('m', $now_order['dateline']) == date('m')) {        	foreach (unserialize($now_order['info']) as $menu) {        		D('Meal')->where(array('meal_id' => $menu['id'], 'sell_count' => array('gt', $menu['num'])))->setDec('sell_count', $menu['num']);        	}        }        D("Merchant_store_meal")->where(array('store_id' => $now_order['store_id'], 'sale_count' => array('gt', 0)))->setDec('sale_count', 1);                //退款打印        $msg = ArrayToStr::array_to_str($now_order['order_id']);        $op = new orderPrint($this->config['print_server_key'], $this->config['print_server_topdomain']);        $op->printit($this->mer_id, $store_id, $msg, 1);                        $str_format = ArrayToStr::print_format($now_order['order_id']);        foreach ($str_format as $print_id => $print_msg) {        	$print_id && $op->printit($this->mer_id, $store_id, $print_msg, 1, $print_id);        }                $mer_store = D('Merchant_store')->where(array('mer_id' => $this->mer_id, 'store_id' => $store_id))->find();        $sms_data = array('mer_id' => $mer_store['mer_id'], 'store_id' => $mer_store['store_id'], 'type' => 'food');        if ($this->config['sms_cancel_order'] == 1 || $this->config['sms_cancel_order'] == 3) {        	$sms_data['uid'] = $now_order['uid'];        	$sms_data['mobile'] = $now_order['phone'] ? $now_order['phone'] : $my_user['phone'];        	$sms_data['sendto'] = 'user';        	$sms_data['content'] = '您在 ' . $mer_store['name'] . '店中下的订单(订单号：' . $orderid . '),在' . date('Y-m-d H:i:s') . '时已被您取消并退款，欢迎再次光临！';        	Sms::sendSms($sms_data);        }        if ($this->config['sms_cancel_order'] == 2 || $this->config['sms_cancel_order'] == 3) {        	$sms_data['uid'] = 0;        	$sms_data['mobile'] = $mer_store['phone'];        	$sms_data['sendto'] = 'merchant';        	$sms_data['content'] = '顾客' . $now_order['name'] . '的预定订单(订单号：' . $orderid . '),在' . date('Y-m-d H:i:s') . '时已被客户取消并退款！';        	Sms::sendSms($sms_data);        }                if ($now_order['meal_type'] == 1) {        	$this->success_tips($go_refund_param['msg'], U('Takeout/order_detail',array('order_id'=>$orderid, 'store_id' => $store_id, 'mer_id' => $this->mer_id)));        } else {        	$this->success_tips($go_refund_param['msg'], U('Food/order_detail',array('order_id'=>$orderid, 'store_id' => $store_id, 'mer_id' => $this->mer_id)));        }			}		/*团购详情*/	public function group_order_refund(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$now_order = D('Group_order')->get_order_detail_by_id($this->user_session['uid'],intval($_GET['order_id']),true);		if(empty($now_order)){			$this->error_tips('当前订单不存在');		}		if(empty($now_order['paid'])){			$this->error_tips('当前订单还未付款！');		}		if(!empty($now_order['status'])){			$this->error_tips('订单必须是未消费状态才能取消！',U('My/group_order',array('order_id'=>$now_order['order_id'])));		}		$this->assign('now_order',$now_order);		$this->display();	}	//取消订单	public function group_order_check_refund(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$now_order = D('Group_order')->get_order_detail_by_id($this->user_session['uid'],intval($_GET['order_id']),true);				if(empty($now_order)){			$this->error_tips('当前订单不存在');		}		if(empty($now_order['paid'])){			$this->error_tips('当前订单还未付款！');		}		if(!empty($now_order['status'])){			$this->error_tips('订单必须是未消费状态才能取消！',U('My/group_order',array('order_id'=>$now_order['order_id'])));		}				//在线付款退款		if($now_order['pay_type'] == 'offline'){			$data_group_order['order_id'] = $now_order['order_id'];			$data_group_order['refund_detail'] = serialize(array('refund_time'=>time()));			$data_group_order['status'] = 3;			if(D('Group_order')->data($data_group_order)->save()){				//2015-12-24     线下退款时销量回滚				$update_group = D('Group')->where(array('group_id' => $now_order['group_id']))->find();				if ($update_group['type'] == 3) {					$sale_count = $update_group['sale_count'] - $now_order['num'];					$sale_count = $sale_count > 0 ? $sale_count : 0;					$update_group_data = array('sale_count' => $sale_count);					if ($update_group['count_num'] > 0 && $sale_count < $update_group['count_num']) {						$update_group_data['type'] = 1;					}					D('Group')->where(array('group_id' => $now_order['group_id']))->save($update_group_data);				} else {					//退款时销量回滚					D('Group')->where(array('group_id' => $now_order['group_id']))->setDec('sale_count', $now_order['num']);				}				//如果使用了优惠券				if($now_order['card_id']){					$result = D('Member_card_coupon')->add_card($now_order['card_id'],$now_order['mer_id'],$now_order['uid']);										$param = array('refund_time' => time());					if($result['error_code']){						$param['err_msg'] = $result['msg'];					} else {						$param['refund_id'] = $now_order['order_id'];					}										$data_meal_order['order_id'] = $now_order['order_id'];					$data_meal_order['refund_detail'] = serialize($param);					$result['error_code'] || $data_meal_order['status'] = 3;					D('Meal_order')->data($data_meal_order)->save();					if ($result['error_code']) {						$this->error_tips($result['msg']);					}					$go_refund_param['msg'] = $result['msg'];				}								 //用户积分退款是回滚						//if ($now_order['score_used_count']!=='0') {				if(!empty($now_order['score_used_count'])){					$result = D('User')->add_score($now_order['uid'],$now_order['score_used_count'],'退款 '.$now_order['order_name'].' 积分回滚');					$param = array('refund_time' => time());					if($result['error_code']){							$param['err_msg'] = $result['msg'];					} else {							$param['refund_id'] = $now_order['order_id'];					}					$data_group_order['order_id'] = $now_order['order_id'];					$data_group_order['refund_detail'] = serialize($param);					$result['error_code'] || $data_group_order['status'] = 3;					D('Group_order')->data($data_group_order)->save();					if ($result['error_code']) {							$this->error_tips($result['msg']);					}					$go_refund_param['msg'] = $result['msg'];				}								$this->success_tips('您使用的是线下支付！订单状态已修改为已退款。',U('My/group_order',array('order_id'=>$now_order['order_id'])));				exit;			}else{				$this->error_tips('取消订单失败！请重试。');			}		}		if($now_order['payment_money'] != '0.00'){			if($now_order['is_own']){				$pay_method = array();				$merchant_ownpay = D('Merchant_ownpay')->field('mer_id',true)->where(array('mer_id'=>$now_order['mer_id']))->find();				foreach($merchant_ownpay as $ownKey=>$ownValue){					$ownValueArr = unserialize($ownValue);					if($ownValueArr['open']){						$ownValueArr['is_own'] = true;						$pay_method[$ownKey] = array('name'=>$this->getPayName($ownKey),'config'=>$ownValueArr);					}				}			}else{				$pay_method = D('Config')->get_pay_method();			}						if(empty($pay_method)){				$this->error_tips('系统管理员没开启任一一种支付方式！');			}			if(empty($pay_method[$now_order['pay_type']])){				$this->error_tips('您选择的支付方式不存在，请更新支付方式！');			}					$pay_class_name = ucfirst($now_order['pay_type']);			$import_result = import('@.ORG.pay.'.$pay_class_name);			if(empty($import_result)){				$this->error_tips('系统管理员暂未开启该支付方式，请更换其他的支付方式');			}			$now_order['order_type'] = 'group';									if(!empty($now_order['orderid'])){				$now_order['order_id']=$now_order['orderid'];				// $this->error_tips("更新失败，请联系管理员");			}			$pay_class = new $pay_class_name($now_order,$now_order['payment_money'],$now_order['pay_type'],$pay_method[$now_order['pay_type']]['config'],$this->user_session,$now_order['is_mobile_pay']);			$go_refund_param = $pay_class->refund();			$now_order['order_id'] = $_GET['order_id'];			$data_group_order['order_id'] = $_GET['order_id'];			$data_group_order['refund_detail'] = serialize($go_refund_param['refund_param']);			if(empty($go_refund_param['error']) && $go_refund_param['type'] == 'ok'){				$data_group_order['status'] = 3;						}			D('Group_order')->data($data_group_order)->save();			if($data_group_order['status'] != 3){					$this->error_tips($go_refund_param['msg']);			}		}		//如果使用了优惠券		if($now_order['card_id']){			$result = D('Member_card_coupon')->add_card($now_order['card_id'],$now_order['mer_id'],$now_order['uid']);						$param = array('refund_time' => time());			if($result['error_code']){				$param['err_msg'] = $result['msg'];			} else {				$param['refund_id'] = $now_order['order_id'];			}						$data_group_order['order_id'] = $now_order['order_id'];			$data_group_order['refund_detail'] = serialize($param);			$result['error_code'] || $data_group_order['status'] = 3;			D('Group_order')->data($data_group_order)->save();			if ($result['error_code']) {				$this->error_tips($result['msg']);			}			$go_refund_param['msg'] = $result['msg'];// 			$use_result = D('Member_card_coupon')->add_card($now_order['card_id'],$now_order['mer_id'],$now_order['uid']);// 			if($use_result['error_code']){// 				$this->error_tips($use_result['msg']);// 			}					}				//用户积分退款是回滚				//if ($now_order['score_used_count']!=='0') {		if(!empty($now_order['score_used_count'])){			$result = D('User')->add_score($now_order['uid'],$now_order['score_used_count'],'退款 '.$now_order['order_name'].' 积分回滚');			$param = array('refund_time' => time());			if($result['error_code']){					$param['err_msg'] = $result['msg'];			} else {					$param['refund_id'] = $now_order['order_id'];			}			$data_group_order['order_id'] = $now_order['order_id'];			$data_group_order['refund_detail'] = serialize($param);			$result['error_code'] || $data_group_order['status'] = 3;			D('Group_order')->data($data_group_order)->save();			if ($result['error_code']) {					$this->error_tips($result['msg']);			}			$go_refund_param['msg'] = $result['msg'];		}		//平台余额退款		if($now_order['balance_pay'] != '0.00'){			$add_result = D('User')->add_money($now_order['uid'],$now_order['balance_pay'],'退款 '.$now_order['order_name'].' 增加余额');						$param = array('refund_time' => time());			if($result['error_code']){				$param['err_msg'] = $result['msg'];			} else {				$param['refund_id'] = $now_order['order_id'];			}						$data_group_order['order_id'] = $now_order['order_id'];			$data_group_order['refund_detail'] = serialize($param);			$result['error_code'] || $data_group_order['status'] = 3;			D('Group_order')->data($data_group_order)->save();			if ($result['error_code']) {				$this->error_tips($result['msg']);			}			$go_refund_param['msg'] = '平台余额退款成功';		}		//商家会员卡余额退款		if($now_order['merchant_balance'] != '0.00'){			$result = D('Member_card')->add_card($now_order['uid'],$now_order['mer_id'],$now_order['merchant_balance'],'退款 '.$now_order['order_name'].' 增加余额');			$param = array('refund_time' => time());			if($result['error_code']){				$param['err_msg'] = $result['msg'];			} else {				$param['refund_id'] = $now_order['order_id'];			}			$data_group_order['order_id'] = $now_order['order_id'];			$data_group_order['refund_detail'] = serialize($param);			$result['error_code'] || $data_group_order['status'] = 3;			D('Group_order')->data($data_group_order)->save();			if ($result['error_code']) {				$this->error_tips($result['msg']);			}			$go_refund_param['msg'] = $result['msg'];		}						//2015-12-9     退款时销量回滚		$update_group = D('Group')->where(array('group_id' => $now_order['group_id']))->find();		if ($update_group['type'] == 3) {			$sale_count = $update_group['sale_count'] - $now_order['num'];			$sale_count = $sale_count > 0 ? $sale_count : 0;			$update_group_data = array('sale_count' => $sale_count);			if ($update_group['count_num'] > 0 && $sale_count < $update_group['count_num']) {				$update_group_data['type'] = 1;			}			D('Group')->where(array('group_id' => $now_order['group_id']))->save($update_group_data);		} else {			//退款时销量回滚			D('Group')->where(array('group_id' => $now_order['group_id']))->setDec('sale_count', $now_order['num']);		}				//短信提醒		$sms_data = array('mer_id' => $now_order['mer_id'], 'store_id' => 0, 'type' => 'group');		if ($this->config['sms_cancel_order'] == 1 || $this->config['sms_cancel_order'] == 3) {			$sms_data['uid'] = $now_order['uid'];			$sms_data['mobile'] = $now_order['phone'];			$sms_data['sendto'] = 'user';			$sms_data['content'] = '您购买 '.$now_order['order_name'].'的订单(订单号：' . $now_order['order_id'] . '),在' . date('Y-m-d H:i:s') . '时已被您取消并退款，欢迎再次光临！';			Sms::sendSms($sms_data);		}		if ($this->config['sms_cancel_order'] == 2 || $this->config['sms_cancel_order'] == 3) {			$merchant = D('Merchant')->where(array('mer_id' => $now_order['mer_id']))->find();			$sms_data['uid'] = 0;			$sms_data['mobile'] = $merchant['phone'];			$sms_data['sendto'] = 'merchant';			$sms_data['content'] = '顾客购买的' . $now_order['order_name'] . '的订单(订单号：' . $now_order['order_id'] . '),在' . date('Y-m-d H:i:s') . '时已被客户取消并退款！';			Sms::sendSms($sms_data);		}		$this->success_tips($go_refund_param['msg'],U('My/group_order',array('order_id'=>$_GET['order_id'])));	}		/*删除团购订单*/	public function group_order_del(){		$now_order = D('Group_order')->get_order_detail_by_id($this->user_session['uid'],intval($_GET['order_id']));		if(empty($now_order)){			$this->error_tips('当前订单不存在！');		}else if($now_order['paid']){			$this->error_tips('当前订单已付款，不能删除。');		}		$condition_group_order['order_id'] = $now_order['order_id'];		$data_group_order['status'] = 4;		if(D('Group_order')->where($condition_group_order)->data($data_group_order)->save()){			//退款时销量回滚			D('Group')->where(array('group_id' => $now_order['group_id']))->setDec('sale_count', $now_order['num']);			$this->success_tips('删除成功！',U('My/group_order_list'));		}else{			$this->error_tips('删除失败！请重试。');		}	}			/*删除预约订单*/	public function appoint_order_del(){	    $database_appoint_order = D('Appoint_order');		$now_order = $database_appoint_order->get_order_detail_by_id($this->user_session['uid'],intval($_GET['order_id']));		if(empty($now_order)){			$this->error_tips('当前订单不存在！');		}else if($now_order['paid']){			$this->error_tips('当前订单已付款，不能删除。');		}		$condition_group_order['order_id'] = $now_order['order_id'];		$data_group_order['paid'] = 3;		if($database_appoint_order->where($condition_group_order)->data($data_group_order)->save()){			$this->success_tips('删除成功！',U('My/appoint_order_list'));		}else{			$this->error_tips('删除失败！请重试。');		}	}			/*店铺收藏*/	public function group_store_collect(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}				$this->assign(D('Merchant_store')->wap_get_store_collect_list($this->user_session['uid']));		$this->display();	}		//手艺人收藏	public function worker_collect(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$this->assign(D('Merchant_workers')->wap_get_worker_collect_list($this->user_session['uid']));		$this->display();	}		/*商家收藏***商家中心暂时没有手机版***/	public function merchant_collect(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}				$this->assign(D('Merchant')->get_collect_list($this->user_session['uid']));		$this->display();	}	    /*     * *图片上传** */    public function ajaxImgUpload() {		$mulu=isset($_GET['ml']) ? trim($_GET['ml']):'group';		$mulu=!empty($mulu) ? $mulu : 'group';        $filename = trim($_POST['filename']);        $img = $_POST[$filename];        $img = str_replace('data:image/png;base64,', '', $img);        $img = str_replace(' ', '+', $img);        $imgdata = base64_decode($img);		$img_order_id = sprintf("%09d",$this->user_session['uid']);		$rand_num = mt_rand(10,99).'/'.substr($img_order_id,0,3).'/'.substr($img_order_id,3,3).'/'.substr($img_order_id,6,3);        $getupload_dir = "/upload/reply/".$mulu."/" .$rand_num;        $upload_dir = "." . $getupload_dir;        if (!is_dir($upload_dir)) {            mkdir($upload_dir, 0777, true);        }        $newfilename = $mulu.'_' . date('YmdHis') . '.jpg';        $save = file_put_contents($upload_dir . '/' . $newfilename, $imgdata);		$save = file_put_contents($upload_dir . '/m_' . $newfilename, $imgdata);		$save = file_put_contents($upload_dir . '/s_' . $newfilename, $imgdata);        if ($save) {            $this->dexit(array('error' => 0, 'data' => array('code' => 1, 'siteurl'=>$this->config['site_url'],'imgurl' =>$getupload_dir . '/' . $newfilename, 'msg' => '')));        } else {            $this->dexit(array('error' => 1, 'data' => array('code' => 0, 'url' => '', 'msg' => '保存失败！')));        }    }	/*团购评价*/	public function group_feedback(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$now_order = D('Group_order')->get_order_detail_by_id($this->user_session['uid'],intval($_GET['order_id']),true);		$this->assign('now_order',$now_order);		if(empty($now_order)){			$this->error_tips('当前订单不存在！');		}		if(empty($now_order['paid'])){			$this->error_tips('当前订单未付款！无法评论');		}		if(empty($now_order['status'])){			$this->error_tips('当前订单未消费！无法评论');		}		if($now_order['status'] == 2){			$this->error_tips('当前订单已评论');		}		if(IS_POST){			$score = intval($_POST['score']);			if($score > 5 || $score < 1){				$this->error_tips('评分只能1到5分');			}			$inputimg=isset($_POST['inputimg']) ? $_POST['inputimg'] :'';			$pic_ids=array();			if(!empty($inputimg)){				$database_reply_pic = D('Reply_pic');				foreach($inputimg as $imgv){					$imgv=str_replace('/upload/reply/group/','',$imgv);					$imgtmp=explode('/',$imgv);					$imgname=$imgtmp[count($imgtmp)-1];					$reply_pic['name'] = $imgname;					$reply_pic['pic'] = str_replace('/'.$imgname,'',$imgv).','.$imgname;					$reply_pic['uid'] = $this->user_session['uid'];					$reply_pic['order_type'] = '0';					$reply_pic['order_id'] = intval($now_order['order_id']);					$reply_pic['add_time'] = $_SERVER['REQUEST_TIME'];					$pic_ids[] = $database_reply_pic->data($reply_pic)->add();				}			 }			$database_reply = D('Reply');			$data_reply['parent_id'] = $now_order['group_id'];			$data_reply['store_id'] = $now_order['store_id'];			$data_reply['mer_id'] = $now_order['mer_id'];			$data_reply['score'] = $score;			$data_reply['order_type'] = '0';			$data_reply['order_id'] = intval($now_order['order_id']);			$data_reply['anonymous'] = intval($_POST['anonymous']);			$data_reply['comment'] = $_POST['comment'];			$data_reply['uid'] = $this->user_session['uid'];			$data_reply['pic'] = !empty($pic_ids) ? implode(',',$pic_ids):'';			$data_reply['add_time'] = $_SERVER['REQUEST_TIME'];			$data_reply['add_ip'] = get_client_ip(1);			if($database_reply->data($data_reply)->add()){				D('Group')->setInc_group_reply($now_order,$score);				D('Group_order')->change_status($now_order['order_id'],2);			$database_merchant_score = D('Merchant_score');			$now_merchant_score = $database_merchant_score->field('`pigcms_id`,`score_all`,`reply_count`')->where(array('parent_id'=>$now_order['mer_id'],'type'=>'1'))->find();			if(empty($now_merchant_score)){				$data_merchant_score['parent_id'] = $now_order['mer_id'];				$data_merchant_score['type'] = '1';				$data_merchant_score['score_all'] = $score;				$data_merchant_score['reply_count'] = 1;				$database_merchant_score->data($data_merchant_score)->add();			}else{				$data_merchant_score['score_all'] = $now_merchant_score['score_all']+$score;				$data_merchant_score['reply_count'] = $now_merchant_score['reply_count']+1;				$database_merchant_score->where(array('pigcms_id'=>$now_merchant_score['pigcms_id']))->data($data_merchant_score)->save();			}			$now_store_score=$database_merchant_score->field('`pigcms_id`,`score_all`,`reply_count`')->where(array('parent_id'=>$now_order['store_id'],'type'=>'2'))->find();			if(empty($now_store_score)){				$data_store_score['parent_id'] = $now_order['store_id'];				$data_store_score['type'] = '2';				$data_store_score['score_all'] = $score;				$data_store_score['reply_count'] = 1;				$database_merchant_score->data($data_store_score)->add();			}else{				$data_store_score['score_all'] = $now_store_score['score_all']+$score;				$data_store_score['reply_count'] = $now_store_score['reply_count']+1;				$database_merchant_score->where(array('pigcms_id'=>$now_store_score['pigcms_id']))->data($data_store_score)->save();			}				$this->success_tips('评论成功',U('My/group_order',array('order_id'=>$now_order['order_id'])));			}else{				$this->error_tips('评论失败');			}		}		$this->display();	}	/*订餐OR外卖评价*/	public function meal_feedback(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$now_order = D('Meal_order')->where(array('uid' => $this->user_session['uid'], 'order_id' => intval($_GET['order_id'])))->find();		$this->assign('now_order',$now_order);		if(empty($now_order)){			$this->error_tips('当前订单不存在！');		}		if(empty($now_order['paid'])){			$this->error_tips('当前订单未付款！无法评论');		}		if(empty($now_order['status'])){			$this->error_tips('当前订单未消费！无法评论');		}		if($now_order['status'] == 2){			$this->error_tips('当前订单已评论');		}		if(IS_POST){			$score = intval($_POST['score']);			if($score > 5 || $score < 1){				$this->error_tips('评分只能1到5分');			}			$inputimg=isset($_POST['inputimg']) ? $_POST['inputimg'] :'';			$pic_ids=array();			if(!empty($inputimg)){				$database_reply_pic = D('Reply_pic');				foreach($inputimg as $imgv){					$imgv=str_replace('/upload/reply/meal/','',$imgv);					$imgtmp=explode('/',$imgv);					$imgname=$imgtmp[count($imgtmp)-1];					$reply_pic['name'] = $imgname;					$reply_pic['pic'] = str_replace('/'.$imgname,'',$imgv).','.$imgname;					$reply_pic['uid'] = $this->user_session['uid'];					$reply_pic['order_type'] = '1';					$reply_pic['order_id'] = intval($now_order['order_id']);					$reply_pic['add_time'] = $_SERVER['REQUEST_TIME'];					$pic_ids[] = $database_reply_pic->data($reply_pic)->add();				}			 }			$database_reply = D('Reply');			$data_reply['parent_id'] = $now_order['store_id'];			$data_reply['store_id'] = $now_order['store_id'];			$data_reply['mer_id'] = $now_order['mer_id'];			$data_reply['score'] = $score;			$data_reply['order_type'] = '1';			$data_reply['order_id'] = intval($now_order['order_id']);			$data_reply['anonymous'] = intval($_POST['anonymous']);			$data_reply['comment'] = $_POST['comment'];			$data_reply['uid'] = $this->user_session['uid'];			$data_reply['pic'] = !empty($pic_ids) ? implode(',',$pic_ids):'';			$data_reply['add_time'] = $_SERVER['REQUEST_TIME'];			$data_reply['add_ip'] = get_client_ip(1);			if ($database_reply->data($data_reply)->add()) {				D('Merchant_store')->setInc_meal_reply($now_order['store_id'],$score);				D('Meal_order')->change_status($now_order['order_id'],2);			$database_merchant_score = D('Merchant_score');			$now_merchant_score = $database_merchant_score->field('`pigcms_id`,`score_all`,`reply_count`')->where(array('parent_id'=>$now_order['mer_id'],'type'=>'1'))->find();			if(empty($now_merchant_score)){				$data_merchant_score['parent_id'] = $now_order['mer_id'];				$data_merchant_score['type'] = '1';				$data_merchant_score['score_all'] = $score;				$data_merchant_score['reply_count'] = 1;				$database_merchant_score->data($data_merchant_score)->add();			}else{				$data_merchant_score['score_all'] = $now_merchant_score['score_all']+$score;				$data_merchant_score['reply_count'] = $now_merchant_score['reply_count']+1;				$database_merchant_score->where(array('pigcms_id'=>$now_merchant_score['pigcms_id']))->data($data_merchant_score)->save();			}			$now_store_score=$database_merchant_score->field('`pigcms_id`,`score_all`,`reply_count`')->where(array('parent_id'=>$now_order['store_id'],'type'=>'2'))->find();			if(empty($now_store_score)){				$data_store_score['parent_id'] = $now_order['store_id'];				$data_store_score['type'] = '2';				$data_store_score['score_all'] = $score;				$data_store_score['reply_count'] = 1;				$database_merchant_score->data($data_store_score)->add();			}else{				$data_store_score['score_all'] = $now_store_score['score_all']+$score;				$data_store_score['reply_count'] = $now_store_score['reply_count']+1;				$database_merchant_score->where(array('pigcms_id'=>$now_store_score['pigcms_id']))->data($data_store_score)->save();			}				if ($now_order['meal_type'] == 1) {					$this->success_tips('评论成功', U('Takeout/order_detail', array('order_id' => $now_order['order_id'], 'mer_id' => $now_order['mer_id'], 'store_id' => $now_order['store_id'])));				} else {					$this->success_tips('评论成功', U('Food/order_detail', array('order_id' => $now_order['order_id'], 'mer_id' => $now_order['mer_id'], 'store_id' => $now_order['store_id'])));				}			} else{				$this->error_tips('评论失败');			}		}		$this->display();	}			/*预约评论*/	public function appoint_feedback(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$order_id = $this->_get('order_id');		$now_order = D('Appoint_order')->where(array('uid' => $this->user_session['uid'], 'order_id' => intval($_GET['order_id'])))->find();		$this->assign('now_order',$now_order);		if(empty($now_order)){			$this->error_tips('当前订单不存在！');		}		if(empty($now_order['paid'])){			$this->error_tips('当前订单未付款！无法评论');		}		if(empty($now_order['service_status'])){			$this->error_tips('当前订单未消费！无法评论');		}				$where['order_id'] = $order_id;		$appoint_order_num = $this->database_appoint_comment->where($where)->count();		if($appoint_order_num > 0){		    $this->error_tips('当前订单已评论');		}				if(IS_POST){			$score = intval($_POST['score']);			$profession_total_score = $_POST['profession_score'] + 0;			$communicate_total_score = $_POST['communicate_score'] + 0;			$speed_total_score = $_POST['speed_score'] + 0;						if($score > 5 || $score < 1 || $profession_total_score > 5 || $profession_total_score < 1 || $communicate_total_score > 5 || $communicate_total_score < 1|| $speed_total_score > 5 || $speed_total_score < 1 ){				$this->error_tips('评分只能1到5分');			}			$inputimg=isset($_POST['inputimg']) ? $_POST['inputimg'] :'';			$pic_ids=array();			if(!empty($inputimg)){				$database_reply_pic = D('Reply_pic');				foreach($inputimg as $imgv){					$imgv=str_replace('/upload/reply/appoint/','',$imgv);					$imgtmp=explode('/',$imgv);					$imgname=$imgtmp[count($imgtmp)-1];					$reply_pic['name'] = $imgname;					$reply_pic['pic'] = str_replace('/'.$imgname,'',$imgv).','.$imgname;					$reply_pic['uid'] = $this->user_session['uid'];					$reply_pic['order_type'] = '2';					$reply_pic['order_id'] = intval($now_order['order_id']);					$reply_pic['add_time'] = $_SERVER['REQUEST_TIME'];					$pic_ids[] = $database_reply_pic->data($reply_pic)->add();				}			 }			$database_reply = D('Reply');			$data_reply['parent_id'] = $now_order['store_id'];			$data_reply['store_id'] = $now_order['store_id'];			$data_reply['mer_id'] = $now_order['mer_id'];			$data_reply['score'] = $score;			$data_reply['order_type'] = '2';			$data_reply['order_id'] = intval($now_order['order_id']);			$data_reply['anonymous'] = intval($_POST['anonymous']);			$data_reply['comment'] = $_POST['comment'];			$data_reply['uid'] = $this->user_session['uid'];			$data_reply['pic'] = !empty($pic_ids) ? implode(',',$pic_ids):'';			$data_reply['add_time'] = $_SERVER['REQUEST_TIME'];			$data_reply['add_ip'] = get_client_ip(1);			if ($database_reply->data($data_reply)->add()) {				D('Appoint')->setInc_appoint_reply($now_order, $score);				D('Appoint_order')->change_status($now_order['order_id'], 2);				$database_merchant_score = D('Merchant_score');				$now_merchant_score = $database_merchant_score->field('`pigcms_id`,`score_all`,`reply_count`')->where(array('parent_id'=>$now_order['mer_id'],'type'=>'1'))->find();				if(empty($now_merchant_score)){					$data_merchant_score['parent_id'] = $now_order['mer_id'];					$data_merchant_score['type'] = '1';					$data_merchant_score['score_all'] = $score;					$data_merchant_score['reply_count'] = 1;					$database_merchant_score->data($data_merchant_score)->add();				}else{					$data_merchant_score['score_all'] = $now_merchant_score['score_all']+$score;					$data_merchant_score['reply_count'] = $now_merchant_score['reply_count']+1;					$database_merchant_score->where(array('pigcms_id'=>$now_merchant_score['pigcms_id']))->data($data_merchant_score)->save();				}				$now_store_score=$database_merchant_score->field('`pigcms_id`,`score_all`,`reply_count`')->where(array('parent_id'=>$now_order['store_id'],'type'=>'2'))->find();				if(empty($now_store_score)){					$data_store_score['parent_id'] = $now_order['store_id'];					$data_store_score['type'] = '2';					$data_store_score['score_all'] = $score;					$data_store_score['reply_count'] = 1;					$database_merchant_score->data($data_store_score)->add();				}else{					$data_store_score['score_all'] = $now_store_score['score_all']+$score;					$data_store_score['reply_count'] = $now_store_score['reply_count']+1;					$database_merchant_score->where(array('pigcms_id'=>$now_store_score['pigcms_id']))->data($data_store_score)->save();				}								//工作人员评分start				$database_merchant_workers = D('Merchant_workers');				$database_appoint_visit_order_info = D('Appoint_visit_order_info');				$Map['appoint_order_id'] = $now_order['order_id'];				$appoint_visit_order_info = $database_appoint_visit_order_info->where($Map)->find();				if($appoint_visit_order_info){				    $_Map['merchant_worker_id'] = $appoint_visit_order_info['merchant_worker_id'];				    $merchant_workers_info = $database_merchant_workers->appoint_worker_info($_Map);				    $profession_total_score = $merchant_workers_info['profession_total_score'];				    $communicate_total_score = $merchant_workers_info['communicate_total_score'];				    $speed_total_score = $merchant_workers_info['speed_total_score'];				    $profession_num = $merchant_workers_info['profession_num'];				    $communicate_num = $merchant_workers_info['communicate_num'];				    $speed_num = $merchant_workers_info['speed_num'];				    				    if($merchant_workers_info){					$profession_total_score += $_POST['profession_score'] + 0;					$communicate_total_score += $_POST['communicate_score'] + 0;					$speed_total_score += $_POST['speed_score'] + 0;					$profession_num++;					$communicate_num++;					$speed_num++;										$merchant_workers_data['profession_total_score'] = $profession_total_score;					$merchant_workers_data['communicate_total_score'] = $communicate_total_score;					$merchant_workers_data['speed_total_score'] = $speed_total_score;					$merchant_workers_data['profession_num'] = $profession_num;					$merchant_workers_data['communicate_num'] = $communicate_num;					$merchant_workers_data['speed_num'] = $speed_num;					$merchant_workers_data['profession_avg_score'] = $profession_total_score/$profession_num;					$merchant_workers_data['communicate_avg_score'] = $communicate_total_score/$communicate_num;					$merchant_workers_data['speed_avg_score'] = $speed_total_score/$speed_num;					$merchant_workers_data['all_avg_score'] = ($merchant_workers_data['profession_avg_score'] + $merchant_workers_data['communicate_avg_score'] + $merchant_workers_data['speed_avg_score']) / 3;					$merchant_workers_data['mer_id'] =  $now_order['mer_id'];					$result = $database_merchant_workers->where($_Map)->data($merchant_workers_data)->save();					if(!$result){					    $this->error_tips('工作人员评分失败！');					}										$database_appoint_comment = D('Appoint_comment');					$_data['uid'] = $this->user_session['uid'];					$_data['merchant_worker_id'] =  $appoint_visit_order_info['merchant_worker_id'];					$_data['appoint_id'] = $now_order['appoint_id'];					$_data['profession_score'] = $_POST['profession_score'];					$_data['communicate_score'] = $_POST['communicate_score'];					$_data['speed_score'] = $_POST['speed_score'];					if($inputimg){					    $_data['comment_img'] = serialize($inputimg);					}					$_data['content'] = $_POST['comment'];					$_data['add_time'] = time();					$_data['order_id'] = $now_order['order_id'];					$_data['mer_id'] = $now_order['mer_id'];					if($database_appoint_comment->data($_data)->add()){					    $database_merchant_workers->where(array('merchant_worker_id'=>$appoint_visit_order_info['merchant_worker_id']))->setInc('comment_num');					    $this->database_appoint->where(array('appoint_id'=>$now_order['appoint_id']))->setInc('comment_num');					}				    }				}				//工作人员评分end				$this->success_tips('评论成功', U('My/appoint_order', array('order_id' => $now_order['order_id'])));			} else{				$this->error_tips('评论失败');			}		}		$this->display();	}			/*全部订餐订单列表*/	public function meal_order_list(){		if(empty($this->user_session)){			$this->error_tips('请先进行登录！');		}		$status = isset($_GET['status']) ? intval($_GET['status']) : 0;		$where = " uid={$this->user_session['uid']} AND status<=3";//array('uid' => $this->user_session['uid'], 'status' => array('lt', 3));		if ($status == -1) {			$where .= " AND paid=0";			$where['paid'] = 0;		} elseif ($status == 1) {			$where .= " AND paid=1 AND status=0";		} elseif ($status == 2) {			$where .= " AND paid=1 AND status=1";		}// 		$status == -1 && $where['paid'] = 0;// 		$status == 1 && $where['status'] = 0;// 		$status == 2 && $where['status'] = 1;		$order_list = D("Meal_order")->field(true)->where($where)->order('order_id DESC')->select();		$temp = $store_ids = array();		foreach ($order_list as $st) {			$store_ids[] = $st['store_id'];		}		$m = array();		if ($store_ids) {			$store_image_class = new store_image();			$merchant_list = D("Merchant_store")->where(array('store_id' => array('in', $store_ids)))->select();			foreach ($merchant_list as $li) {				$images = $store_image_class->get_allImage_by_path($li['pic_info']);				$li['image'] = $images ? array_shift($images) : array();				unset($li['status']);				$m[$li['store_id']] = $li;			}		}		$list = array();		foreach ($order_list as $ol) {			if (isset($m[$ol['store_id']]) && $m[$ol['store_id']]) {				$list[] = array_merge($ol, $m[$ol['store_id']]);			} else {				$list[] = $ol;			}		}		$this->assign('order_list', $list);				$this->display();	}		/*优惠券列表*/	public function card_list(){		// if(!$this->is_wexin_browser){			// $this->error_tips('请使用微信浏览优惠券！');		// }		$use = empty($_GET['use']) ? '0' : '1';		$card_list = D('Member_card_coupon')->get_all_coupon($this->user_session['uid'],$use);		$this->assign('card_list',$card_list);				$this->display();	}			public function cards(){		$card_list = D('Member_card_set')->get_all_card($this->user_session['uid']);				$this->assign('card_list',$card_list);				$this->display();	}		public function order_list(){		$type = isset($_GET['type']) ? intval($_GET['type']) : 1 ;		if ($type == 1) {			$order_list = D('Group')->wap_get_order_list($this->user_session['uid']);			$this->assign('order_list',$order_list);		} else {			$where = array('uid' => $this->user_session['uid'], 'status' => array('lt', 3));			$order_list = D("Meal_order")->field(true)->where($where)->order('order_id DESC')->select();			$temp = $store_ids = array();			foreach ($order_list as $st) {				$store_ids[] = $st['store_id'];			}			$m = array();			if ($store_ids) {				$store_image_class = new store_image();				$merchant_list = D("Merchant_store")->where(array('store_id' => array('in', $store_ids)))->select();				foreach ($merchant_list as $li) {					$images = $store_image_class->get_allImage_by_path($li['pic_info']);					$li['image'] = $images ? array_shift($images) : array();					unset($li['status']);					$m[$li['store_id']] = $li;				}			}			$list = array();			foreach ($order_list as $ol) {				if (isset($m[$ol['store_id']]) && $m[$ol['store_id']]) {					$list[] = array_merge($ol, $m[$ol['store_id']]);				} else {					$list[] = $ol;				}			}			$this->assign('order_list', $list);		}		$this->assign('type', $type);		$this->display();	}		public function join_activity(){		$uid = $this->user_session['uid'];		import('@.ORG.wap_group_page');		$tp_count = D('')->table(array(C('DB_PREFIX').'extension_activity_record'=>'ear',C('DB_PREFIX').'extension_activity_list'=>'eal',C('DB_PREFIX').'merchant'=>'m'))->where("`ear`.`activity_list_id`=`eal`.`pigcms_id` AND `eal`.`mer_id`=`m`.`mer_id` AND `ear`.`uid`='$uid'")->group('`eal`.`pigcms_id`')->count();		$P = new Page($tp_count,20,'page');		$order_list = D('')->field('`eal`.`name` AS `product_name`,`m`.`name` AS `merchant_name`,`eal`.*,`m`.*')->table(array(C('DB_PREFIX').'extension_activity_record'=>'ear',C('DB_PREFIX').'extension_activity_list'=>'eal',C('DB_PREFIX').'merchant'=>'m'))->where("`ear`.`activity_list_id`=`eal`.`pigcms_id` AND `eal`.`mer_id`=`m`.`mer_id` AND `ear`.`uid`='$uid'")->group('`eal`.`pigcms_id`')->order('`eal`.`pigcms_id` DESC')->limit($P->firstRow.','.$P->listRows)->select();		// dump($order_list);		if($order_list){			$extension_image_class = new extension_image();			foreach($order_list as &$value){				$value['list_pic'] = $extension_image_class->get_image_by_path(array_shift(explode(';',$value['pic'])),'s');				$value['url'] = U('My/join_activity_detail',array('id'=>$value['pigcms_id']));				$value['money'] = floatval($value['money']);				$value['type_txt'] = $this->activity_type_txt($value['type']);			}		}		$this->assign('order_list',$order_list);		$this->assign('pagebar',$P->show());		$this->display();	}		public function join_activity_detail(){		$condition_extension_activity_list['pigcms_id'] = $_GET['id'];		$now_activity = D('Extension_activity_list')->field(true)->where($condition_extension_activity_list)->find();		if(empty($now_activity)){			$this->error_tips('该活动不存在');		}		$now_activity['type_txt'] = $this->activity_type_txt($now_activity['type']);		$extension_image_class = new extension_image();		$now_activity['list_pic'] = $extension_image_class->get_image_by_path(array_shift(explode(';',$now_activity['pic'])),'s');		$now_activity['url'] = U('Wapactivity/detail',array('id'=>$now_activity['pigcms_id']));		$now_activity['money'] = floatval($now_activity['money']);				//活动归属的商家信息		$now_merchant = D('Merchant')->field(true)->where(array('mer_id'=>$now_activity['mer_id']))->find();				$record_list = D('Extension_activity_record')->field(true)->where(array('activity_list_id'=>$now_activity['pigcms_id'],'uid'=>$this->user_session['uid']))->order('`pigcms_id` DESC')->select();		if(empty($record_list)){			$this->error_tips('您未参与该活动');		}		$record_id_arr = array();		foreach($record_list as $value){			$record_id_arr[] = $value['pigcms_id'];		}		if($now_activity['type'] == 1){			$number_list = D('Extension_yiyuanduobao_record')->field('`number`')->where(array('record_id'=>array('in',$record_id_arr)))->select();			// shuffle($number_list);			$this->assign('number_list',$number_list);		}else if($now_activity['type'] == 2){			$number_list = D('Extension_coupon_record')->field('`number`,`check_time`')->where(array('record_id'=>array('in',$record_id_arr)))->select();			$this->assign('number_list',$number_list);		}		$this->assign('now_merchant',$now_merchant);		$this->assign('now_activity',$now_activity);		$this->assign('number_list',$number_list);		$this->display();	}		protected function activity_type_txt($type){		switch($type){			case '1':				return '一元夺宝';			case '2':				return '优惠券';			case '3':				return '秒杀';			case '4':				return '红包';			case '5':				return '卡券';		}	}		public function join_lottery(){		$result = D('Lottery')->join_lottery($this->user_session['uid']);		$this->assign($result);		$this->display();	}		public function follow_merchant(){		$mod = new Model();		$this->user_session['openid'];		//$_SESSION['openid'] = 'onfo6tySRgO5tYJtkJ4tAueQI51g';		$sql = "SELECT b.* FROM  ". C('DB_PREFIX') . "merchant_user_relation AS a INNER JOIN  ". C('DB_PREFIX') . "merchant as b ON a.mer_id=b.mer_id WHERE a.openid='{$_SESSION['openid']}'";		$res = $mod->query($sql);				$merchant_image_class = new merchant_image();		foreach ($res as &$r) {			$images = explode(";", $r['pic_info']);			$images = explode(";", $images[0]);			$r['img'] = $merchant_image_class->get_image_by_path($images[0]);			$r['url'] = C('config.site_url').'/wap.php?c=Index&a=index&token=' . $r['mer_id'];		}		$this->assign('follow_list', $res);		$this->display();	}		public function cancel_follow(){		$mer_id = isset($_GET['mer_id']) ? intval($_GET['mer_id']) : 0;		$find_merId=M('merchant_user_relation')->where(array('mer_id' => $mer_id,'openid' => $_SESSION['openid']))->getField('mer_id');		if($find_merId){						if (D('Merchant_user_relation')->where(array('mer_id' => $find_merId, 'openid' => $_SESSION['openid']))->delete()) {				D('Merchant')->where(array('mer_id' => $mer_id, 'fans_count' => array('gt', 0)))->setDec('fans_count');				$this->success_tips('取消关注成功', U('My/follow_merchant'));			} else {				$this->error_tips('取消关注失败，请稍后重试', U('My/follow_merchant'));			}		}else{			redirect(U('My/index'));		}	}		public function recharge(){		if(IS_POST){			$data_user_recharge_order['uid'] = $this->now_user['uid'];			$money = floatval($_POST['money']);			if(empty($money) || $money > 10000){				$this->error('请输入有效的金额！最高不能超过1万元。');			}			if($_POST['label']){				$data_user_recharge_order['label'] = $_POST['label'];			}			$data_user_recharge_order['money'] = $money;			// $data_user_recharge_order['order_name'] = '帐户余额在线充值';			$data_user_recharge_order['add_time'] = $_SERVER['REQUEST_TIME'];			$data_user_recharge_order['is_mobile_pay'] = 1;			$data_user_recharge_order['mer_id'] = $_POST['mer_id'];			if($order_id = D('User_recharge_order')->data($data_user_recharge_order)->add()){				redirect(U('Pay/check',array('order_id'=>$order_id,'type'=>'recharge')));			}		}else{			$this->display();		}	}		public function withdraw(){		if($this->config['company_pay_open']=='0') {			$this->error_tips('平台没有开启提现功能！');		}		$user_info = $this->now_user;		$this->assign('user_info',$user_info);		if(empty($user_info['openid'])){			$this->error_tips('您没有绑定微信');		}		if(IS_POST){			$money = floatval((int)($_POST['money']*100)/100);			if($money<$this->config['company_least_money']){				$this->error_tips('不等低于最低提款额 '.$this->config['company_least_money'].' 元!');			}			$data_companypay['pay_type'] = 'user';			$data_companypay['pay_id'] = $user_info['uid'];			$data_companypay['openid'] = $user_info['openid'];			$data_companypay['nickname'] = $_POST['truename'];			$data_companypay['phone'] = $user_info['phone'];			$data_companypay['money'] = $money*100;			$data_companypay['desc'] = "用户提现对账订单|用户ID ".$user_info['uid']." |转账 ".$money." 元" ;			$data_companypay['status'] = 0;			$data_companypay['add_time'] = time();						$use_result = D('User')->user_money($user_info['uid'],$money,'提款 '.$money.' 扣除余额');			if($use_result['error_code']){					$this->error_tips($use_result['msg']);			}else{				D('Companypay')->add($data_companypay);				$this->success_tips("申请成功，请等待审核！");			}		}else{			$where['pay_type']='user';			$where['pay_id']=$user_info['uid'];			$withdraw = M('Companypay');			$count_withdraw = $withdraw->where($where)->count();			import('@.ORG.system_page');			$p = new Page($count_withdraw, 5);			$withdraw_list = $withdraw->field('money,status,add_time,pay_time')->where($where)->limit($p->firstRow . ',' . $p->listRows)->select();						$pagebar = $p->show();			$this->assign('pagebar', $pagebar);			$this->assign('draw_info',$withdraw_list);			$this->display();		}	}		public function lifeservice(){		/*$order_list = D('Service_order')->field(true)->where(array('uid'=>$this->user_session['uid'],'status'=>array('neq','0')))->order('`order_id` DESC')->select();		foreach($order_list as &$value){			$value['type_txt'] = $this->lifeservice_type_txt($value['type']);			$value['type_eng'] = $this->lifeservice_type_eng($value['type']);			$value['infoArr'] = unserialize($value['info']);			$value['order_url'] = U('My/lifeservice_detail',array('id'=>$value['order_id']));		}		$this->assign('order_list', $result);		// dump($order_list);*/		$condition['uid'] = $this->user_session['uid'];		$condition['paid'] = 1;    				$result = D('House_village_pay_order')->get_limit_list_my($condition,10);		//print_r($result);		$this->assign('order_list',$result);						$this->display();	}	public function lifeservice_detail(){		$now_order = D('Service_order')->field(true)->where(array('order_id'=>$_GET['id']))->find();		$now_order['infoArr'] = unserialize($now_order['info']);		$now_order['type_txt'] = $this->lifeservice_type_txt($now_order['type']);		$now_order['type_eng'] = $this->lifeservice_type_eng($now_order['type']);		$now_order['pay_money'] = floatval($now_order['pay_money']);		$this->assign('now_order', $now_order);		// dump($order_list);		$this->display();	}		public function spread_list(){		if(!isset($_GET['status'])){				//待结算订单			$spread_list = D('User_spread_list')->field(true)->where(array('uid'=>$this->user_session['uid'],'status'=>'0'))->order('`pigcms_id` DESC')->select();			if($spread_list){				foreach($spread_list as $key=>$value){					if($value['order_type'] == 'group'){						$order_info = $spread_list[$key]['order_info'] = D('Group_order')->field(true)->where(array('order_id'=>$value['order_id']))->find();						if($order_info['status'] == 0){							unset($spread_list[$key]);							continue;						}						$value['group_info'] = $spread_list[$key]['group_info'] = D('Group')->field('`group_id`,`name`')->where(array('group_id'=>$value['third_id']))->find();					}					if($value['spread_uid']){						$value['spread_user'] = $spread_list[$key]['spread_user'] = D('User')->get_user($value['spread_uid']);					}					$value['get_user'] = $spread_list[$key]['get_user'] = D('User')->get_user($value['get_uid']);									//组成描述语句					if($value['spread_user']){						$spread_list[$key]['desc']['txt'] = '子用户 '.$value['spread_user']['nickname'].' 推广用户 '.$value['get_user']['nickname'].' 购买';					}else{						$spread_list[$key]['desc']['txt'] = '推广用户 '.$value['get_user']['nickname'].' 购买';					}										if($value['order_type'] == 'group'){						$spread_list[$key]['desc']['url'] =  U('Group/detail',array('group_id'=>$value['group_info']['group_id']));						$spread_list[$key]['desc']['info'] = $value['group_info']['name'];					}				}			}		}else{			$condition_spread_list['uid'] = $this->user_session['uid'];			if(in_array($_GET['status'],array(0,1,2))){				$condition_spread_list['status'] = $_GET['status'];			}			$spread_list = D('User_spread_list')->field(true)->where($condition_spread_list)->order('`pigcms_id` DESC')->select();			foreach($spread_list as $key=>$value){				if($value['spread_uid']){					$value['spread_user'] = $spread_list[$key]['spread_user'] = D('User')->get_user($value['spread_uid']);				}				$value['get_user'] = $spread_list[$key]['get_user'] = D('User')->get_user($value['get_uid']);								if($value['order_type'] == 'group'){					$value['group_info'] = $spread_list[$key]['group_info'] = D('Group')->field('`group_id`,`name`')->where(array('group_id'=>$value['third_id']))->find();					if($value['status'] == 0){						$value['order_info'] = $spread_list[$key]['order_info'] = D('Group_order')->field(true)->where(array('order_id'=>$value['order_id']))->find();					}				}				//组成描述语句				if($value['spread_user']){					$spread_list[$key]['desc']['txt'] = '子用户 '.$value['spread_user']['nickname'].' 推广用户 '.$value['get_user']['nickname'].' 购买';				}else{					$spread_list[$key]['desc']['txt'] = '推广用户 '.$value['get_user']['nickname'].' 购买';				}								if($value['order_type'] == 'group'){					$spread_list[$key]['desc']['url'] = U('Group/detail',array('group_id'=>$value['group_info']['group_id']));					$spread_list[$key]['desc']['info'] = $value['group_info']['name'];				}			}		}				$this->assign('spread_list',$spread_list);		$this->display();	}	public function spread_check(){		$now_spread = D('User_spread_list')->where(array('uid'=>$this->user_session['uid'],'pigcms_id'=>$_GET['id']))->find();		if($now_spread && $now_spread['status'] == 0){			if($now_spread['order_type'] == 'group'){				$order_info = D('Group_order')->field(true)->where(array('order_id'=>$now_spread['order_id']))->find();				if($order_info['status'] == '1' || $order_info['status'] == '2'){					if(D('User_spread_list')->where(array('pigcms_id'=>$_GET['id']))->data(array('status'=>1))->save()){						D('User')->add_money($now_spread['uid'],$now_spread['money'],'推广用户购买'.$this->config['group_alias_name'].'商品获得佣金');						$this->success('结算完成');					}else{						$this->error('操作失败');					}				}else if($order_info['status'] == '3'){					if(D('User_spread_list')->where(array('pigcms_id'=>$_GET['id']))->data(array('status'=>2))->save()){						$this->success('用户已退款');					}else{						$this->error('操作失败');					}				}			}		}	}	protected function lifeservice_type_txt($type){		switch($type){			case '1':				$type_txt = '水费';				break;			case '2':				$type_txt = '电费';				break;			case '3':				$type_txt = '煤气费';				break;			default:				$type_txt = '生活服务';		}		return $type_txt;	}	protected function lifeservice_type_eng($type){		switch($type){			case '1':				$type_txt = 'water';				break;			case '2':				$type_txt = 'electric';				break;			case '3':				$type_txt = 'gas';				break;			default:				$type_txt = 'life';		}		return $type_txt;	}	protected function getPayName($label){		$payName = array(			'weixin' => '微信支付',			'tenpay' => '财付通支付',			'yeepay' => '银行卡支付(易宝支付)',			'allinpay' => '银行卡支付(通联支付)',			'chinabank' => '银行卡支付(网银在线)',		);		return $payName[$label];	}    /****等级升级****/	public function levelUpdate(){	    	   $this->display();	}	/*     * json 格式封装函数* */    private function dexit($data = '') {        if (is_array($data)) {            echo json_encode($data);        } else {            echo $data;        }        exit();    }        public function pay(){    	$store_id = isset($_GET['store_id']) ? intval($_GET['store_id']) : 0;    	$now_store = D('Merchant_store')->field(true)->where(array('store_id' => $store_id))->find();    	$this->assign('now_store', $now_store);    	$now_store['discount_txt'] = unserialize($now_store['discount_txt']);    	    	$this->assign('discount_type', isset($now_store['discount_txt']['discount_type']) ? $now_store['discount_txt']['discount_type'] : 0);    	$this->assign('discount_percent', isset($now_store['discount_txt']['discount_percent']) ? $now_store['discount_txt']['discount_percent'] : 0);    	$this->assign('condition_price', isset($now_store['discount_txt']['condition_price']) ? $now_store['discount_txt']['condition_price'] : 0);    	$this->assign('minus_price', isset($now_store['discount_txt']['minus_price']) ? $now_store['discount_txt']['minus_price'] : 0);    	$this->display();    }        public function store_order(){    	$store_id = isset($_GET['store_id']) ? intval($_GET['store_id']) : 0;    	$total_money = isset($_POST['total_money']) ? (intval($_POST['total_money'] * 100) / 100) : 0;    	$no_discount_money = isset($_POST['no_discount_money']) ? (intval($_POST['condition_price'] * 100) / 100) : 0;    	    	$total_price = isset($_POST['total_price']) ? (intval($_POST['total_price'] * 100) / 100) : 0;    	$minus_price = isset($_POST['minus_price']) ? (intval($_POST['minus_price'] * 100) / 100) : 0;    	$price = isset($_POST['price']) ? (intval($_POST['price'] * 100) / 100) : 0;    	    	$now_store = D('Merchant_store')->field(true)->where(array('store_id' => $store_id))->find();    	if (empty($now_store)) {    		$this->error('店铺不存在');    	}    	if ($total_money <= 0) $this->error('支付的金额不能小于0');    	$minus_price_true = $price_true = 0;    	$now_store['discount_txt'] = unserialize($now_store['discount_txt']);    	if (isset($now_store['discount_txt']['discount_type'])) {    		if ($now_store['discount_txt']['discount_type'] == 1) {    			if (isset($now_store['discount_txt']['discount_percent']) && $now_store['discount_txt']['discount_percent'] > 0) {    				$price_true = ($total_money - $no_discount_money) * $now_store['discount_txt']['discount_percent'] / 10;    				$minus_price_true = $total_money - $price_true;    			}    		} elseif ($now_store['discount_txt']['discount_type'] == 2) {    			if (isset($now_store['discount_txt']['condition_price']) && $now_store['discount_txt']['condition_price'] > 0 && isset($now_store['discount_txt']['minus_price']) && $now_store['discount_txt']['minus_price']) {    				$minus_price_true = floor(($total_money - $no_discount_money) / $now_store['discount_txt']['condition_price']) * $now_store['discount_txt']['minus_price'];    				$price_true = $total_money - $minus_price_true;    			}    		}    	}    	    	if ($minus_price_true == 0 && $price_true == 0) {    		$minus_price_true = 0;    		$price_true = $total_money;    	}    	    	$data = array('store_id' => $now_store['store_id']);    	$data['mer_id'] = $now_store['mer_id'];    	$data['uid'] = $this->user_session['uid'];    	$data['orderid'] = date("YmdHis") . mt_rand(10000000, 99999999);    	$data['name'] = '顾客现场自助支付';    	$data['total_price'] = $total_money;    	$data['discount_price'] = $minus_price_true;    	$data['price'] = $price_true;    	$data['dateline'] = time();    	$data['from_plat'] = 1;    	$order_id = D("Store_order")->add($data);    	if ($order_id) {    		$this->success('订单保存成功，现在去支付', U('Pay/check',array('order_id' => $order_id, 'type'=>'store')));    	} else {    		$this->error('订单创建失败，稍后重试！');    	}    }            /*全部订餐订单列表*/    public function store_order_list(){    	$where = "uid={$this->user_session['uid']} AND paid=1";    	$order_list = D("Store_order")->field(true)->where($where)->order('order_id DESC')->select();    	$temp = $store_ids = array();    	foreach ($order_list as $st) {    		$store_ids[] = $st['store_id'];    	}    	$m = array();    	if ($store_ids) {    		$store_image_class = new store_image();    		$merchant_list = D("Merchant_store")->where(array('store_id' => array('in', $store_ids)))->select();    		foreach ($merchant_list as $li) {    			$images = $store_image_class->get_allImage_by_path($li['pic_info']);    			$li['image'] = $images ? array_shift($images) : array();    			unset($li['status']);    			$m[$li['store_id']] = $li;    		}    	}    	$list = array();    	foreach ($order_list as $ol) {    		if (isset($m[$ol['store_id']]) && $m[$ol['store_id']]) {    			$list[] = array_merge($ol, $m[$ol['store_id']]);    		} else {    			$list[] = $ol;    		}    	}    	$this->assign('order_list', $list);    	$this->display();    }			public function cardcode(){		if(!empty($this->now_user['cardid'])){			$_SESSION['tmp_cardid'] = substr($this->now_user['cardid'],0,1).substr($this->now_user['cardid'],-1).substr(uniqid('', true), 18).substr(microtime(), 2, 6);			D('Physical_card')->where('cardid='.$this->now_user['cardid'])->setField('t_id',$_SESSION['tmp_cardid']);			$this->assign('cardid',$this->now_user['cardid']);			$this->display();		}else{			$this->error_tips('您没有绑定实体卡！请联系商家！');		}			}		public function cardbarcode(){			import('@.ORG.barcode');		$colorFront = new BCGColor(0, 0, 0);		$colorBack = new BCGColor(255, 255, 255);				// Barcode Part		$code = new BCGcode128();		$code->setScale(2);		$code->setColor($colorFront, $colorBack);		$code->parse($_SESSION['tmp_cardid']);		// Drawing Part		$drawing = new BCGDrawing('', $colorBack);		$drawing->setBarcode($code);		$drawing->draw();		header('Content-Type: image/png');		$drawing->finish(BCGDrawing::IMG_FORMAT_PNG);	}		public function cardqrcode(){		import('@.ORG.phpqrcode');		QRcode::png($_SESSION['tmp_cardid'],false,2,8,2);	}			private function meal_after_refund($now_order){		$msg = '';		//如果使用了优惠券		if($now_order['card_id']){			$result = D('Member_card_coupon')->add_card($now_order['card_id'],$now_order['mer_id'],$now_order['uid']);					$param = array('refund_time' => time());			if($result['error_code']){				$param['err_msg'] = $result['msg'];			} else {				$param['refund_id'] = $now_order['order_id'];			}					$data_meal_order['order_id'] = $now_order['order_id'];			$data_meal_order['refund_detail'] = serialize($param);			$result['error_code'] || $data_meal_order['status'] = 3;			D('Meal_order')->data($data_meal_order)->save();			if ($result['error_code']) {				return array('error' => 1, 'msg' => $result['msg']);				$this->error_tips($result['msg']);			}			$msg = $result['msg'];		}						//如果使用了积分 2016-1-15		if ($now_order['score_used_count']!=='0'){			$order_info=unserialize($now_order['info']);			$order_name=$order_info[0]['name']."*".$order_info[0]['num'];			$result = D('User')->add_score($now_order['uid'],$now_order['score_used_count'],'退款 '.$order_name.' 积分回滚');			$param = array('refund_time' => time());			if($result['error_code']){				$param['err_msg'] = $result['msg'];			} else {				$param['refund_id'] = $now_order['order_id'];			}			$data_meal_order['order_id'] = $now_order['order_id'];			$data_meal_order['refund_detail'] = serialize($param);			$result['error_code'] || $data_meal_order['status'] = 3;			D('Group_order')->data($data_meal_order)->save();			if ($result['error_code']) {				return array('error' => 1, 'msg' => $result['msg']);				$this->error_tips($result['msg']);			}			$msg .= $result['msg'];		}				//平台余额退款		if($now_order['balance_pay'] != '0.00'){			$add_result = D('User')->add_money($now_order['uid'],$now_order['balance_pay'],'退款 '.$now_order['order_name'].' 增加余额');					$param = array('refund_time' => time());			if($result['error_code']){				$param['err_msg'] = $result['msg'];			} else {				$param['refund_id'] = $now_order['order_id'];			}					$data_meal_order['order_id'] = $now_order['order_id'];			$data_meal_order['refund_detail'] = serialize($param);			$result['error_code'] || $data_meal_order['status'] = 3;			D('Meal_order')->data($data_meal_order)->save();			if ($result['error_code']) {				return array('error' => 1, 'msg' => $result['msg']);				$this->error_tips($result['msg']);			}			$msg .= '平台余额退款成功';			// 			if($add_result['error_code']){			// 				$this->error_tips($add_result['msg']);			// 			}			// 			$go_refund_param['msg'] = $add_result['msg'];					// 			$data_meal_order['order_id'] = $now_order['order_id'];			// 			$data_meal_order['refund_detail'] = serialize(array('refund_time'=>time()));			// 			$data_meal_order['status'] = 3;			// 			D('Meal_order')->data($data_meal_order)->save();		}		//商家会员卡余额退款		if($now_order['merchant_balance'] != '0.00'){			$result = D('Member_card')->add_card($now_order['uid'],$now_order['mer_id'],$now_order['merchant_balance'],'退款 '.$now_order['order_name'].' 增加余额');					$param = array('refund_time' => time());			if($result['error_code']){				$param['err_msg'] = $result['msg'];			} else {				$param['refund_id'] = $now_order['order_id'];			}					$data_meal_order['order_id'] = $now_order['order_id'];			$data_meal_order['refund_detail'] = serialize($param);			$result['error_code'] || $data_meal_order['status'] = 3;			D('Meal_order')->data($data_meal_order)->save();			if ($result['error_code']) {				return array('error' => 1, 'msg' => $result['msg']);				$this->error_tips($result['msg']);			}			$msg .= $result['msg'];		}		if(empty($now_order['pay_type'])){			$data_meal_order['order_id'] = $now_order['order_id'];			$data_meal_order['status'] = 3;			D('Meal_order')->data($data_meal_order)->save();			$msg .= '取消订单成功';		}				//退款时销量回滚		if ($now_order['paid'] == 1 && date('m', $now_order['dateline']) == date('m')) {			foreach (unserialize($now_order['info']) as $menu) {				D('Meal')->where(array('meal_id' => $menu['id'], 'sell_count' => array('gt', $menu['num'])))->setDec('sell_count', $menu['num']);			}		}		D("Merchant_store_meal")->where(array('store_id' => $now_order['store_id'], 'sale_count' => array('gt', 0)))->setDec('sale_count', 1);				//退款打印		$msg = ArrayToStr::array_to_str($now_order['order_id']);		$op = new orderPrint($this->config['print_server_key'], $this->config['print_server_topdomain']);		$op->printit($this->mer_id, $store_id, $msg, 1);						$str_format = ArrayToStr::print_format($now_order['order_id']);		foreach ($str_format as $print_id => $print_msg) {			$print_id && $op->printit($this->mer_id, $store_id, $print_msg, 1, $print_id);		}				$mer_store = D('Merchant_store')->where(array('mer_id' => $this->mer_id, 'store_id' => $store_id))->find();		$sms_data = array('mer_id' => $mer_store['mer_id'], 'store_id' => $mer_store['store_id'], 'type' => 'food');		if ($this->config['sms_cancel_order'] == 1 || $this->config['sms_cancel_order'] == 3) {			$sms_data['uid'] = $now_order['uid'];			$sms_data['mobile'] = $now_order['phone'] ? $now_order['phone'] : $my_user['phone'];			$sms_data['sendto'] = 'user';			$sms_data['content'] = '您在 ' . $mer_store['name'] . '店中下的订单(订单号：' . $orderid . '),在' . date('Y-m-d H:i:s') . '时已被您取消并退款，欢迎再次光临！';			Sms::sendSms($sms_data);		}		if ($this->config['sms_cancel_order'] == 2 || $this->config['sms_cancel_order'] == 3) {			$sms_data['uid'] = 0;			$sms_data['mobile'] = $mer_store['phone'];			$sms_data['sendto'] = 'merchant';			$sms_data['content'] = '顾客' . $now_order['name'] . '的预定订单(订单号：' . $orderid . '),在' . date('Y-m-d H:i:s') . '时已被客户取消并退款！';			Sms::sendSms($sms_data);		}		return array('error' => 0, 'msg' => $msg);	}		public function return_refund(){		echo "<html><head><meta name=\"VIP_BFB_PAYMENT\" content=\"BAIFUBAO\"></head><body><h1>这是一个return_url页面</h1></body></html>";		die;		$pay_class_name = ucfirst($_GET['pay_type']);		$import_result = import('@.ORG.pay.'.$pay_class_name);		if(empty($import_result)){			$this->error_tips('系统管理员暂未开启该支付方式，请更换其他的支付方式');		}		$pay_class = new $pay_class_name('', '', $_GET['pay_type'], $pay_method[$_GET['pay_type']]['config'], '', 1);		$go_refund_param = $pay_class->return_refund();		if ($go_refund_param['error']) {			$this->error_tips($go_refund_param['msg']);		}		$data = $go_refund_param['order_param'];		if ($data['order_type'] == 'group') {					} else {			$now_order = M("Meal_order")->where(array('orderid' => $data['order_id']))->find();		}		$refund_param['refund_id'] = $data['sp_refund_no'];		$refund_param['ret_code'] = $data['ret_code'];		$refund_param['ret_detail'] = $data['ret_detail'];		$refund_param['refund_time'] = $data['refund_time'];				$data_meal_order['order_id'] = $now_order['order_id'];		$data_meal_order['refund_detail'] = serialize($refund_param);		if (empty($go_refund_param['error']) && $data['ret_code'] == 1) {			echo "<html><head><meta name=\"VIP_BFB_PAYMENT\" content=\"BAIFUBAO\"></head><body><h1>这是一个return_url页面</h1></body></html>";			$data_meal_order['status'] = 3;		}		D('Meal_order')->data($data_meal_order)->save();		if($data_meal_order['status'] != 3){			$this->error_tips($go_refund_param['msg']);		}		$result = $this->meal_after_refund($now_order);		if ($result['error']) {			$this->error_tips($result['msg']);		}		if ($now_order['meal_type'] == 1) {			$this->success_tips($result['msg'], U('Takeout/order_detail', array('order_id' => $now_order['order_id'], 'store_id' => $now_order['store_id'], 'mer_id' => $now_order['mer_id'])));		} else {			$this->success_tips($result['msg'], U('Food/order_detail', array('order_id' => $now_order['order_id'], 'store_id' => $now_order['store_id'], 'mer_id' => $now_order['mer_id'])));		}	}		/* 个人绑定商家	* @time 2016-04-20	* @author	小邓  <969101097@qq.com>*/	public function bindMerchant(){		if(IS_POST){			$merchant_find=D('Merchant')->where(array('account'=>trim(I('account')),'pwd'=>md5(trim(I('pwd')))))->find();			if($merchant_find){	//判断绑定此商户是否存在				if($merchant_find['uid']){	//判断是否已存在绑定的用户					$openid_arr=explode(',',$merchant_find['uid']);					if(count($openid_arr)>=10){	//判断绑定人数是否已满						$this->error_tips('当前商户绑定用户过多，请联系管理员解决！');					}else{						if(in_array($this->user_session['uid'],$openid_arr) || $openid_arr==$this->user_session['uid']){	//判断是否已绑定过此商户							$this->error_tips('您已绑定过当前商户，不可重复绑定！');						}else{							$users_openid = $merchant_find['uid'].','.$this->user_session['uid'];							$merchant_alter=D('Merchant')->where(array('mer_id' => $merchant_find['mer_id']))->data(array('uid' => $users_openid))->save();							//				商家id存入用户表							M('user')->where(array('uid'=>$this->user_session['uid']))->setField('mer_id',$merchant_find['mer_id']);							if($merchant_alter){								$this->success_tips('绑定成功！');							}else{								$this->error_tips('绑定失败！');							}						}					}				}else{					$merchant_alter=D('Merchant')->where(array('mer_id'=>$merchant_find['mer_id']))->data(array('uid'=>$this->user_session['uid']))->save();//				商家id存入用户表					M('user')->where(array('uid'=>$this->user_session['uid']))->setField('mer_id',$merchant_find['mer_id']);					if($merchant_alter){						$this->success_tips('绑定成功！');					}else{						$this->error_tips('绑定失败！');					}				}			}else{				$this->error_tips('你输入的商户账号或密码不对，请重新输入！');			}		}else{			if(empty($this->user_session)){				$this->error_tips('请先进行登录！');			}			$mid = M('user')->where(array('uid'=>$this->user_session['uid']))->getField('mer_id');			$merchant_info=D('Merchant')->where(array('mer_id'=>array('eq',$mid)))->field('uid,name')->find();			$this->assign('merchant_info',$merchant_info);			$this->display();		}	}		/* 商家收账二维码生成(即个人付款)	* @time 2016-04-28	* @author	小邓  <969101097@qq.com>*///	public function user_qrcode(){//		import('@.ORG.phpqrcode');	//引入二维码类//		$uid=$this->user_session['uid'];	//用户ID//		$time=time();	//用于比对是否过期//		$qrCon=C('config.site_url').'/wap.php?g=Wap&c=My&a=pay_dataForm&uid='.$uid.'&time='.$time; //url数据//		//QRcode::png(htmlspecialchars_decode(urldecode($qrCon)),false,0,$size,1);//		QRcode::png($qrCon,'qrcode/payqrcode'.$uid.'.png','H',10,2);//		$QR = 'qrcode/payqrcode'.$uid.'.png';	//生成的二维码图//		if($QR!==FALSE){//			$QR=imagecreatefromstring(file_get_contents($QR));//		}  //输出图片//		imagepng($QR,'qrcode/payqrcode'.$uid.'.png');//		$now_money=M('user')->where(array('uid'=>$uid))->getField('now_money');	//获取账户余额//		$this->assign('qrcode','qrcode/payqrcode'.$uid.'.png');//		/*QRcode::png($qrCon,'payqrcode'.$uid.'.png','H',10,2);//		$QR = 'payqrcode'.$uid.'.png';	//生成的二维码图//		if($QR!==FALSE){//			$QR=imagecreatefromstring(file_get_contents($QR));//		}  //输出图片//		imagepng($QR,'payqrcode'.$uid.'.png');//		$now_money=M('user')->where(array('uid'=>$uid))->getField('now_money');	//获取账户余额//		$this->assign('qrcode','payqrcode'.$uid.'.png');*///		$this->assign('now_money',$now_money);//		$this->assign('uid',$uid);//		$this->display();//    }	/* 账户页面        * @time 2016-09-28        * 侯腾        */	public function account_recharge()	{//		$payConfig = M('cashier_payconfig')->where(array('mid'=>28))->find();//		$payConfig['configData'] = unserialize(htmlspecialchars_decode($payConfig['configData'],ENT_QUOTES));//		$wx_user =$payConfig['configData']['weixin'];//		define('WxPay_SUBMCHID', $wx_user['sub_mch_id']);		//dump(WxPay_SUBMCHID);exit;		$store_arr = D('merchant')->where(array('is_recharge' => 1))->select();//开启充值的商户		//dump($store_arr);exit;		$arr=M('user_merchant_money')->where(array('uid'=>$this->user_session['uid']))->select();//当前用户下充值的商户//dump($arr);exit;		$res1=array();		foreach ($arr as $key=>$value){			$res1[$key]=$value['mer_id'];		}		foreach ($store_arr as $key=>$value){			if (in_array($value['mer_id'], $res1)) {				//当前用户下指定商户下的充值信息				$ss=M('user_merchant_money')->where(array('uid'=>$this->user_session['uid'],'mer_id'=>$value['mer_id']))->find();				$store_arr[$key]['R_money'] = $ss['money'];//一个虚拟的R_money字段			} else {				$store_arr[$key]['R_money'] = 0;			}//			$merchant_info=M('cashier_merchants')->where(array('thirduserid'=>$value['mer_id']))->field('mid')->find();//对应收银台商户信息//			$mid=$merchant_info['mid'];//			$payConfig = M('cashier_payconfig')->where(array('mid'=>$mid))->find();//对应商户的配置参数//			$payConfig['configData'] = unserialize(htmlspecialchars_decode($payConfig['configData'],ENT_QUOTES));//			$wx_user =$payConfig['configData']['weixin'];//			$store_arr[$key]['sub_mch_id']=$wx_user['sub_mch_id'];			//define('WxPay_SUBMCHID', $wx_user['sub_mch_id']);		}		//dump(WxPay_SUBMCHID);		//dump($store_arr);exit;		$this->assign('store_arr',$store_arr);		$this->display();	}	/*	 * 生成二维码代码更新	 * 祝君伟	 * 2016.11.08	 */	public function user_qrcode(){		import('@.ORG.phpqrcode');	//引入二维码类		$uid=$this->user_session['uid'];	//用户ID		$time = date("Y-m-d");	//用于比对是否过期		$qrCon = $this->stringP();		QRcode::png($qrCon,'qrcode/payqrcode'.$uid.'.png','H',10,2);		$QR = 'qrcode/payqrcode'.$uid.'.png';	//生成的二维码图		if($QR!==FALSE){			$QR=imagecreatefromstring(file_get_contents($QR));		}		//输出图片		imagepng($QR,'qrcode/payqrcode'.$uid.'.png');		$now_money=M('user')->where(array('uid'=>$uid))->getField('now_money');	//获取账户余额		$this->assign('qrcode','qrcode/payqrcode'.$uid.'.png');		$this->assign('now_money',$now_money);		$this->assign('uid',$uid);		$this->assign('qrCon',$qrCon);		//dump($qrCon);exit;      //  dump(imagecreatefromstring(file_get_contents($QR)));exit;		$this->display();	}	/*	 * 60秒自动更新二维码	 * 祝君伟	 * 2016.11.08	 */	public function changeQr(){		import('@.ORG.phpqrcode');		$suiji = rand(1,99999);		$time = date("Y-m-d");		$uid=$this->user_session['uid'];		$qrCon = $this->stringP();		//$this->search_qr($qrCon);		QRcode::png($qrCon,'qrcode/fpayqrcode'.$uid.$suiji.'.png','H',10,2);		$QR = 'qrcode/fpayqrcode'.$uid.$suiji.'.png';	//生成的二维码图		return $QR;	}	/*	 * 前台ajax访问地址	 * 祝君伟	 * 2016.11.08	 */	public function changeSrc(){		$str = $this->changeQr();		echo $str;	}	public function search_qr($qrCon){		return $qrCon;	}	/* 拼接十八位付款数字串	* @time 2016-11-04	 * 格式说明 6 固定  6 年份201x的末尾  11 月 11日 11 小时 11分钟 11秒 27随机数 1000四位的uid	 *	 * 661112131515271000	* 祝君伟*/	public function stringP(){		//设置公用变量		$uid=$this->user_session['uid'];	//用户ID		/*echo $uid;*/		$addtime=time();		$addstr=date("Ymd");		$addstr = substr($addstr,3);		$lastuid = sprintf("%04d", $uid);		//流水号由两个不同的部分组成总共十八位		//时分钟加秒  随机数2位		$suiNum = rand(1,99);		$suiNum = sprintf("%02d", $suiNum);		$water = date("His").$suiNum;		$code = "6".$addstr.$water.$lastuid;		/*echo $code;*/		return $code;	}	/*	 * 查询该笔消费对应商户信息及金额信息	 * 陈琦	 * 2016.11.14	 */	public function search_result(){		if(IS_POST){			$order=M('cashier_order')->where(array('pay_way'=>'appPay','ispay'=>1))->limit(5)->order('id desc')->select();			$now_order=$order[0];			if(intval(substr($now_order['auth_code'], 14))==$this->user_session['uid'] && $now_order['paytime']>=time()){				$merchant_info=M('cashier_merchants')->where(array('mid'=>$now_order['mid']))->find();//商户信息					$order_money=$now_order['goods_price'];//订单价格					$merchant_id=$merchant_info['thirduserid'];//收款商户ID					$merchant_name=M('merchant')->where(array('mer_id'=>$merchant_id))->getField('name');//收款商户名称					echo json_encode(array('price'=>$order_money,'merchant_name'=>$merchant_name,'time'=>$now_order['paytime']));			}			//$now_order=M('cashier_order')->where(array('auth_code'=>$arr[0]['auth_code'],'ispay'=>1))->field('goods_price,mid,paytime')->find();//若当前二维码产生消费所对应订单		}	}	/*	 * 个人收款后跳转页面	 * 陈琦	 * 2016.11.14	 */	public function success_pay(){		$merchant_name=$_GET['merchant_name'];//商户名称		$price=$_GET['price'];//消费金额		$time=$_GET['time'];		$this->assign('merchant_name',$merchant_name);		$this->assign('price',$price);		$this->assign('time',$time);		$this->display();	}		/* 零钱	* @time 2016-04-28	* @author	小邓  <969101097@qq.com>*/	public function mx_money(){				// 获取当前用户ID		$uid=$this->user_session['uid'];		$Dao = M("user_money_list");//		$user_info=M('meal_order');//		$mode = new Model();//		$sql = "SELECT 1 as name, orderid,'快店消费' as type, uid,info as order_name,(balance_pay+payment_money) as payment_money, price as order_price, dateline, paid, pay_type, pay_time, third_id, is_mobile_pay FROM ". C('DB_PREFIX') . "meal_order WHERE uid={$uid} AND paid=1 AND status in (1,2) AND (pay_type<>'offline' OR balance_pay<>'0.00')";//		$sql .= ' UNION ALL ';//		$sql .= "SELECT 2 as name, order_id as orderid,'团购消费' as type, uid,order_name, (balance_pay+payment_money) as payment_money, total_money as order_price, add_time as dateline, paid, pay_type, pay_time, third_id, is_mobile_pay FROM ". C('DB_PREFIX') . "group_order WHERE uid={$uid} AND paid=1 AND status in (1,2) AND (pay_type<>'offline' OR balance_pay<>'0.00')";//		$sql .= ' UNION ALL ';//		$sql .= "SELECT 3 as name, order_id as orderid,'微信充值'as type, uid ,'微信充值'as order_name, payment_money, money as order_price, add_time as dateline, paid, pay_type, pay_time, third_id, is_mobile_pay FROM ". C('DB_PREFIX') . "user_recharge_order WHERE uid={$uid} AND paid=1";//		$sql .= " ORDER BY pay_time DESC";//		$list = $mode->query($sql);//		foreach($list as $ke=>$va){//			if($va['name']!="3"){//				$list[$ke]['order_name'] = unserialize($va['order_name'])[0];//			}//		}//		dump($list);exit;		$list = $Dao->field('type,app_money,merchant_money,name,money,time,desc')->where(array('uid'=>$uid))->order('time DESC')->select();		foreach($list as $ke=>$va){				$list[$ke]['desc'] = explode(" ",$va['desc']);//			if($va['ip']=="0"){//				$list[$ke]['desc']['0']="管理员后台";//			}		}//		$listt = $user_info->where(array('uid'=>$uid))->order('pay_time DESC')->select();		$this->assign("list", $list);//		$this->assign("listt", $listt);//		dump($list);exit;//		dump($listt);exit;		$this->display();    }		/* 收账数据信息	* @time 2016-04-28	* @author	小邓  <969101097@qq.com>*/	public function pay_dataForm(){		//echo '收账数据';		if(IS_POST){			//echo '得到收账数据';			$result=array();			$money=isset($_POST['yhmoney']) ? $_POST['yhmoney'] : NULL;	//实际收款				if(!empty($_POST['uid'])){				if(!empty($money)){		//改变用户的预付状态					M('user')->where(array('uid'=>$_POST['uid']))->data(array('pay_status'=>1,'temp_money'=>$money,'ds_id'=>$_POST['ds_id'],'order_time'=>time()))->save();					$discount_spead = M('merchant_discount_spead');					$user_befor=M('user')->where(array('uid'=>$_POST['uid']))->find();	//获取预收款前用户信息					$ds_spd = $discount_spead->where("ds_id=".$_POST['ds_id'])->find();					//$mer_id = $ds_spd['ds_merId'];						$cou = floatval($ds_spd['ds_reMoney'])-floatval($_POST['cou_money']);					$discount_spead->where("ds_id=".$_POST['ds_id'])->setField('ds_reMoney',$cou);					$out_trade_no='C'.time().substr(str_shuffle('1234567890'),0,8);	//订单号					$str_arr=array();					$str_arr['name']=D('Pay')->get_pay_name('now_money');	//余额支付类型名称					$str_arr['price']=$money;					$str_arr['num']='1';					//print_r($str_arr);exit;					$str_info=serialize(array($str_arr));					$card_id=M('Member_card_create')->where(array('wecha_id'=>$_POST['uid']))->getField('id');					if(!$card_id){						$card_id=0;					}					$meal_data=array(						'uid'=>$user_befor['uid'],						'mer_id'=>$_POST['mer_id'],	//商户ID						'store_id'=>M('merchant_store')->where(array('mer_id'=>$_POST['mer_id']))->getField('store_id'),//店铺ID						'orderid'=>$out_trade_no,						'status'=>'0',						'paid'=>'1',						'pay_type'=>'now_money',	//余额支付类型						'name'=>$user_befor['nickname'],						'phone'=>$user_befor['phone'],						'address'=>$user_befor['province'].' '.$user_befor['city'],						'num'=>'1',						'total'=>'1',						'dateline'=>time(),						'price'=>$_POST['cou_money']+$money,						'pay_time'=>time(),						'last_time'=>$user_befor['last_time'],						'pay_money'=>$money,						'payment_money'=>$money, //在线支付金额						'minus_price'=>$_POST['cou_money'], //优惠金额						'card_id'=>$card_id, //会员卡ID						'total_price'=>$_POST['cou_money']+$money,						'ds_id'=>$_POST['ds_id'],//优惠眷id						'info'=>$str_info					);					//print_r($meal_data);exit;					$meal_add= M('meal_order')->data($meal_data)->add();					if($meal_add){	//判断订单是否生成成功						session_start();						$_SESSION['order_id']=$meal_add;						if($_POST['ds_id']>0){							$coupon_all_money = $money+$_POST['cou_money'];							D('Merchant_request')->add_request($ds_spd['ds_merId'], array('coupon_money' => $_POST['cou_money'], 'coupon_pay_money' => $money, 'coupon_all_money' => $coupon_all_money));						}						M('user')->where(array('uid'=>$_POST['uid']))->data(array('order_id'=>$meal_add))->save();	//商家收账预支付ID						$result['code']=2;						//$result['msg']='订单生成成功!'.'---'.$_SESSION['order_id'];						$result['msg']='用户正在确认中';						$result['order']=$meal_add;	//获取预支付订单ID						echo json_encode($result);						exit;					}else{						$result['code']=-2;						$result['msg']='订单生成失败';						echo json_encode($result);						exit;					}				}				$user_info=M('user')->where(array('uid'=>$_POST['uid']))->find();	//获取用户信息				if($_POST['pay_status']==2){	//判断用户是否答应请求(2为答应)					M('user')->where(array('uid'=>$_POST['uid']))->data(array('pay_status'=>2))->save();					$alter_meal_order=M('meal_order')->where(array('order_id'=>$user_info['order_id'],'uid'=>$_POST['uid']))->data(array('status'=>'1'))->save();//改变订单状态					if($alter_meal_order){		//判断订单状态是否修改成功														$order_info=M('meal_order')->where(array('order_id'=>$user_info['order_id']))->field('mer_id,minus_price,orderid')->find();//订单中的商家ID及优惠金额						$dis_a=M('merchant')->where('mer_id='.$order_info['mer_id'])->find();						$view_content=array();						$view_content['title'] = $dis_a['name'];	//得到商家的名称						$view_content['money'] =$user_info['temp_money'];						$result['code']=1;						//$result['msg']=serialize($view_content);						$result['msg']=$dis_a['name'].'-'.$user_info['temp_money'];						$result['cmsData']=$user_info['temp_money'].'-'.$dis_a["name"].'-'.$order_info["orderid"].'-'.$order_info['minus_price'].'-'.$user_info['order_id'].'-'.$user_info['openid'].'-'.$dis_a['uid'].'-'.$user_info['ds_id'].'-'.$order_info['mer_id'];						echo json_encode($result);						//M('user')->where(array('uid'=>$_POST['uid']))->setDec('now_money',$user_info['temp_money']);	//账户余额减去的						M('user')->where(array('uid'=>$_POST['uid']))->data(array('pay_status'=>'0','order_id'=>'0','ds_id'=>'0','temp_money'=>'0','order_time'=>'0'))->save(); //还原用户付款状态(商户收账时)						D('User')->user_money($_POST['uid'],$user_info['temp_money'],'商家扫码支付');					}else{						$result['code']=-2;						$result['msg']='订单状态修改失败';						echo json_encode($result);					}										}else{					//$result['code']=-4;					//$result['msg']='收款操作未得到确认!';					//echo json_encode($result);					if(($user_info['order_time']>0 && (time()-$user_info['order_time'])>60*2) || $_POST['pay_del']=='del'){	//判断预支付订单时间是否已过期						M('user')->where(array('uid'=>$user_info['uid']))->data(array('pay_status'=>'0','order_id'=>'0','ds_id'=>'0','temp_money'=>'0','order_time'=>'0'))->save(); //还原用户付款状态(商户收账时)						M('meal_order')->data(array('order_id'=>$user_info['order_id']))->delete();		//删除订单					}else{						if($user_info['pay_status']==1 && !empty($user_info['temp_money'])){	//判断是否有商户对其收账操作							$result['code']=3;							// $result['msg']='商家正在收款，收款金额为'.$user_info['temp_money'].'元，请确认!';							$result['msg']='￥'.$user_info['temp_money'];							if($user_info['now_money']<$user_info['temp_money']){	//判断该用户余额是否够付								$result['user_code']=-1;								$result['user_msg']='余额不够，请充值';							}else{								$result['user_code']=1;								$result['user_msg']='余额'.$user_info['now_money'].'元';							}							echo json_encode($result);							//exit;						}					}				}				}			if($_POST['order_id']){	//查看订单状态				$order_info=M('meal_order')->where(array('order_id'=>$_POST['order_id']))->field('status,name,pay_money')->find();				if($order_info['status']==1){		//判断订单是否已付款					$view_content=array();					$view_content['title'] = $order_info['name'];	//得到用户的昵称					$view_content['money'] =$order_info['pay_money'];					$result['code']=1;					$result['msg']=$order_info['name'].'-'.$order_info['pay_money'];					echo json_encode($result);				}else{					$result['code']=-1;					$result['msg']='订单未付款';					echo json_encode($result);				}			}		}else{			$uid=isset($_GET['uid']) ? $_GET['uid'] : NULL;	//获取用户ID			$time=isset($_GET['time']) ? $_GET['time'] : NULL;	//获取二维码生成时间			if((time()-$time)>60*2){				$this->error('此二维码已过期',U('My/index'));			}else{				$user_info=M('user')->where(array('uid'=>$uid))->find();	//获取用户信息				$discount_info=M('merchant_discount_spead')->where(array('ds_endTime'=>array('gt',time())))->order('ds_scale asc')->find();	//获取最优优惠劵				//$discount_info=M('merchant_discount_spead')->order('ds_scale asc')->find();	//获取最优优惠劵				$this->assign('user_info',$user_info);				$this->assign('discount_info',$discount_info);				if(session('is_Merchant')=='merchant'){	//判断扫码者是否是商家					$merchant_info=unserialize(session('merchant_session'));					$this->assign('mer_id',$merchant_info['mer_id']);	//商家ID				}else{					//Header($config['site_url'].'/index.php?g=WapMerchant&c=Index&a=index');					$this->error('你还不是商家，请先绑定商家',Header('Location:'.$config['site_url'].'/index.php?g=WapMerchant&c=Index&a=index'));				}				$this->display();			}		}    }		/* 个人扣款后跳转页面	* @time 2016-05-1	* @author	小邓  <969101097@qq.com>*/	public function pay_retrun(){		if(IS_POST){	//发送信息推送			$cmsContent=isset($_POST['cmsData']) ? $_POST['cmsData'] : NULL;	//获取用户信息			if(!empty($cmsContent)){				$content_arr=explode('-',$cmsContent);			}			//用户订单完成消息推送			$time = time();			$href = C('config.site_url').'/wap.php?c=Pay&a=pay_accomplish&money='.$content_arr[0].'&name='.$content_arr[1].'&outid='.$content_arr[2].'&time='.$time;			$model = new templateNews(C('config.wechat_appid'), C('config.wechat_appsecret'));			$ke2 = $content_arr[0].'元(优惠'.$content_arr[3].'元)';										$orde = time().$content_arr[4];			$model->sendTempMsg('OPENTM201752540', array('href' => $href, 'wecha_id' => $content_arr[5], 'first' => '余额支付成功通知', 'keyword1' => $content_arr[1], 'keyword2' => $orde, 'keyword3' => $ke2,'keyword4'=>date('Y-m-d H:i:s')));			if($content_arr[6]!="0"){				$piece = explode(",", $content_arr[6]);				$num = count($piece);				if($num>1){					$map['uid']  = array('in',$piece);					$open_id = M('user')->where($map)->field('openid')->select();					foreach($open_id as $ke=>$va){						$model->sendTempMsg('OPENTM201752540', array('href' => $href, 'wecha_id' => $va['openid'], 'first' => '余额收款成功通知', 'keyword1' => $content_arr[1], 'keyword2' => $orde,'keyword3' => $ke2,'keyword4'=>date('Y-m-d H:i:s')));					}				}else{					$open_id = M('user')->where('uid='.$content_arr[6])->field('openid')->find();					$model->sendTempMsg('OPENTM201752540', array('href' => $href, 'wecha_id' => $open_id['openid'], 'first' => '余额收款成功通知', 'keyword1' => $content_arr[1], 'keyword2' =>$orde,'keyword3' => $ke2,'keyword4'=>date('Y-m-d H:i:s')));				}			}			//给提供优惠的商户发送消息			/*$ds_spd=M('merchant_discount_spead')->where("ds_id=".$content_arr[7])->find();			if($ds_spd['ds_merId']!=$content_arr[8]){				$dis_pd = M('merchant')->where('mer_id='.$ds_spd['ds_merId'])->find();				$title = $dis_pd['name'];				if($dis_pd['uid']!="0"){					$piece = explode(",", $dis_pd['uid']);					$num = count($piece);					if($num>1){						$map['uid']  = array('in',$piece);						$open_id = M('user')->where($map)->field('openid')->select();						foreach($open_id as $ke=>$va){							$model->sendTempMsg('OPENTM201752540', array('href' => $href, 'wecha_id' => $va['openid'], 'first' => '余额收款成功通知', 'keyword1' => $content_arr[1], 'keyword2' => $orde,'keyword3' => $ke2,'keyword4'=>date('Y-m-d H:i:s')));						}					}else{						$open_id = M('user')->where('uid='.intval($dis_pd["uid"]))->field('openid')->find();						$model->sendTempMsg('OPENTM201752540', array('href' => $href, 'wecha_id' => $open_id['openid'], 'first' => '余额收款成功通知', 'keyword1' => $content_arr[1], 'keyword2' =>$orde,'keyword3' => $ke2,'keyword4'=>date('Y-m-d H:i:s')));					}				}			}*/			$this->redirect('My/index');			//Header('Location:'.$config['site_url'].'/wap.php?g=Wap&c=My&a=index');		}else{			$merContent=isset($_GET['merContent']) ? $_GET['merContent'] : NULL;	//获取商户信息			$cmsData=isset($_GET['cmsData']) ? $_GET['cmsData'] : NULL;	//获取信息推送信息			$this->assign('cmsData',$cmsData);			if(!empty($merContent)){				//print_r($merContent);exit;				//$merContent= preg_replace('!s:(\d+):"(.*?)";!se', "'s:'.strlen('$2').':\"$2\";'", $merContent );				//$merContent= str_replace("\r", "", $merContent);				$content_arr=explode('-',$merContent);				$view_content=array(					'title'=>$content_arr[0],	//得到商家的名称					'money'=>$content_arr[1]				);				$this->assign('view_content',$view_content);			}			$this->display();		}	}		/* 商家确认后跳转页面	* @time 2016-05-1	* @author	小邓  <969101097@qq.com>*/	public function check_retrun(){		$userContent=isset($_GET['userContent']) ? $_GET['userContent'] : NULL;	//获取用户信息		if(!empty($userContent)){			$content_arr=explode('-',$userContent);			$view_content=array(				'title'=>$content_arr[0],	//得到用户的昵称				'money'=>$content_arr[1]			);			$this->assign('view_content',$view_content);		}		$this->display();	}    /* * 进度查询 * 陈琦 * 2017.6.1 */    public function progress(){        $all=M('user_progress')->alias('a')                                ->join('left join pigcms_express_order b on a.p_id=b.order_id')                                ->field('a.*,b.order_id,b.billing_adid,b.shipping_adid,ems_order_id')                               ->where(array('uid'=>$this->user_session['uid']))->order('create_time desc')->select();//所有进度        foreach ($all as $k=>&$v){            $v['get_n']=M('user_adress')->where(array('adress_id'=>$v['shipping_adid']))->getField('name');            $v['position']=M('user_adress')->where(array('adress_id'=>$v['shipping_adid']))->getField('position');            $v['detail']=M('user_adress')->where(array('adress_id'=>$v['shipping_adid']))->getField('detail');            $v['address']=$v['position'].$v['detail'];        }        unset($v);        $doing=M('user_progress')->alias('a')                                ->join('left join pigcms_express_order b on a.p_id=b.order_id')                                ->field('a.*,b.order_id,b.billing_adid,b.shipping_adid')                                ->where(array('a.uid'=>$this->user_session['uid'],'a.status'=>1))->select();        foreach ($doing as $k=>&$v){            $v['out_n']=M('user_adress')->where(array('adress_id'=>$v['billing_adid']))->getField('name');            $v['get_n']=M('user_adress')->where(array('adress_id'=>$v['shipping_adid']))->getField('name');            $v['detail']=M('user_adress')->where(array('adress_id'=>$v['shipping_adid']))->getField('detail');            $v['address']=$v['position'].$v['detail'];        }        unset($v);        $done=M('user_progress')->alias('a')                                ->join('left join pigcms_express_order b on a.p_id=b.order_id')                                ->field('a.*,b.order_id,b.billing_adid,b.shipping_adid')                                ->where(array('a.uid'=>$this->user_session['uid'],'a.status'=>2))->select();        foreach ($done as $k=>&$v){            $v['out_n']=M('user_adress')->where(array('adress_id'=>$v['billing_adid']))->getField('name');            $v['get_n']=M('user_adress')->where(array('adress_id'=>$v['shipping_adid']))->getField('name');        }        unset($v);        //dump($doing);exit;        $this->assign('all',$all);        $this->assign('doing',$doing);        $this->assign('done',$done);        $this->display();    }    /*     * 详情查看     * 陈琦     * 2017.6.2     */    public function detail(){        $progress_id=$_GET['progress_id'];        $info=M('user_progress')->where(array('progress_id'=>$progress_id))->find();        if($info['type_id']==1){//快递业务            $express_info=M('express_order')->where(array('order_id'=>$info['p_id']))->find();//快递订单            $out_info=M('user_adress')->where(array('adress_id'=>$express_info['billing_adid']))->find();//寄件信息            $get_info=M('user_adress')->where(array('adress_id'=>$express_info['shipping_adid']))->find();//收件信息            $out_village=M('house_village')->where(array('village_id'=>$out_info['village_id']))->getField('village_name');//寄件人社区            $phone=$out_info['phone'];            $detail=array(                'order_id'=>$express_info['order_id'],                'out_name'=>$out_info['name'],//寄件人姓名                'get_name'=>$get_info['name'],//收件人姓名                'create_time'=>$express_info['create_time'],//下单时间                'out_village'=>$out_village,//寄件人社区                'out_detail'=>$out_info['detail'],//寄件人详细地址                'get_position'=>$get_info['position'],//收件人地址                'get_detail'=>$get_info['detail'],//收件人详细地址                'goods'=>$express_info['goods_type_name'],//物品                'express_time'=>$express_info['time_period'],//配送时间                'status'=>$express_info['status'],//订单状态  1为未处理  2为通知用户接单  3为已处理                'phone'=>$phone,                'save_pay'=>$express_info['save_pay']//保价费用            );            $this->assign('detail',$detail);        }        $this->display();    }}?>