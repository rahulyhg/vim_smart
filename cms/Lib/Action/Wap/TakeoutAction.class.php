<?phpclass TakeoutAction extends BaseAction{	public $store_id = 0;		public $_store = null;		public $session_index = '';	public function __construct()	{		parent::__construct();		$this->store_id = isset($_REQUEST['store_id']) ? intval($_REQUEST['store_id']) : 0;		$this->assign('store_id', $this->store_id);				/* 粉丝行为分析 */		D('Merchant_request')->add_request($this->mer_id,array('meal_hits'=>1));				$merchant_store = M("Merchant_store")->where(array('store_id' => $this->store_id))->find();		$merchant_store['office_time'] = unserialize($merchant_store['office_time']);		$store_image_class = new store_image();		$merchant_store['images'] = $store_image_class->get_allImage_by_path($merchant_store['pic_info']);		$t = $merchant_store['images'];		$merchant_store['image'] = array_shift($t);				$merchant_store_meal = M("Merchant_store_meal")->where(array('store_id' => $this->store_id))->find();		if ($merchant_store_meal) $merchant_store = array_merge($merchant_store, $merchant_store_meal);				$this->_store = $merchant_store;		$this->assign('store', $this->_store);		$this->session_index = "session_takeout_menu_{$this->store_id}_{$this->mer_id}";		if ($services = D('Customer_service')->where(array('mer_id' => $this->mer_id))->select()) {			$key = $this->get_encrypt_key(array('app_id'=>$this->config['im_appid'],'openid' => $_SESSION['openid']), $this->config['im_appkey']);			$kf_url = ($this->config['im_url'] ? $this->config['im_url'] : 'http://im-link.meihua.com').'/?app_id=' . $this->config['im_appid'] . '&openid=' . $_SESSION['openid'] . '&key=' . $key . '#serviceList_' . $this->mer_id;			$this->assign('kf_url', $kf_url);		}	}		public function index()	{		$searhkey = isset($_GET['searhkey']) ? htmlspecialchars($_GET['searhkey']) : '';		$this->assign('searhkey', $searhkey);		$this->display();	}	public function store_list()	{		$searhkey = isset($_REQUEST['searhkey']) ? htmlspecialchars($_REQUEST['searhkey']) : '';		$where = 's.have_meal=1 AND s.status=1 AND s.store_type<>1';		$searhkey && $where .= " AND s.name like '%{$searhkey}%'";		$model = new Model();		$long_lat = array('lat' => 0, 'long' => 0);		$_SESSION['openid'] && $long_lat = D('User_long_lat')->getLocation($_SESSION['openid']);		if (!empty($long_lat['long']) && !empty($long_lat['lat'])) {			import('@.ORG.longlat');			$longlat_class = new longlat();			$location2 = $longlat_class->gpsToBaidu($long_lat['lat'], $long_lat['long']);//转换腾讯坐标到百度坐标			$lat = $location2['lat'];			$long = $location2['lng'];			$sql = "SELECT s.*,ROUND(6378.137 * 2 * ASIN(SQRT(POW(SIN(({$lat}*PI()/180-`s`.`lat`*PI()/180)/2),2)+COS({$lat}*PI()/180)*COS(`s`.`lat`*PI()/180)*POW(SIN(({$long}*PI()/180-`s`.`long`*PI()/180)/2),2)))*1000) AS juli FROM ". C('DB_PREFIX') . "merchant_store AS s INNER JOIN ". C('DB_PREFIX') . "merchant_store_meal AS m ON s.store_id=m.store_id WHERE {$where} ORDER BY s.store_id DESC";		}else{			$sql = "SELECT s.* FROM ". C('DB_PREFIX') . "merchant_store AS s INNER JOIN ". C('DB_PREFIX') . "merchant_store_meal AS m ON s.store_id=m.store_id WHERE {$where} ORDER BY s.store_id DESC";		}		$stores = $model->query($sql);				$store_image_class = new store_image();		$now_time = time();    	$list = array();    	foreach ($stores as $row) {    		$row['position'] = array('lng' => $row['long'], 'lat' => $row['lat']);    		$row['state'] = 0;//根据营业时间判断    		foreach (unserialize($row['office_time']) as $time) {    			$open = strtotime(date("Y-m-d ") . $time['open'] . ':00');    			$close = strtotime(date("Y-m-d ") . $time['close'] . ':00');    			if ($open > $close) $close += 86400;    			if ($open < $now_time && $now_time < $close) {    				$row['state'] = 1;//根据营业时间判断    				break;    			}    		}    		$row['dist'] = 0;			$row['distjuli'] = isset($row['juli']) ? intval($row['juli']) : 0;    		$row['ctime'] = 0;    		$row['tel'] = $row['phone'];    		$row['address'] = $row['adress'];    		$images = $store_image_class->get_allImage_by_path($row['pic_info']);    		$row['img'] = array_shift($images);    		    		$row['url'] = U('Takeout/menu', array('mer_id' => $row['mer_id'], 'store_id' => $row['store_id']));//'wap.php?mod=takeout&action=menu&com_id=' . $row['com_id'] . '&id=' . $row['id'];    		$list[] = $row;    	}    	exit(json_encode(array('result' => 1, 'message' => 'success', 'data' => $list)));	}		public function shop()	{		$now_city = D('Area')->get_area_by_areaId($this->config['now_city']);				$this->assign('city_name',$now_city['area_name']);		if($this->_store['reply_count']){			$reply_list = D('Reply')->get_reply_list($this->_store['store_id'], 1, 0, 10);			$this->assign('reply_list',$reply_list);		}		$this->display();	}		public function ajaxreply()	{		$page = isset($_GET['page']) ? intval($_GET['page']) : 2;		$pagesize = isset($_GET['pagesize']) ? intval($_GET['pagesize']) : 10;		$start = ($page - 1) * $pagesize;		$reply_list = D('Reply')->ajax_reply_list($this->_store['store_id'], 1, 0, $pagesize, $start);		exit(json_encode(array('data' => $reply_list)));	}	    /**     * 点餐页     */    public function menu()     {		if (empty($this->_store)) {			$this->error_tips("不存在的商家店铺!");		}		if ($this->_store['status'] != 1 || empty($this->_store['have_meal'])) {			$this->error('您查看的店铺已关闭！');		}				$now_time = time();		$flag = true;		foreach ($this->_store['office_time'] as $time) {			$open = strtotime(date("Y-m-d ") . $time['open'] . ':00');			$close = strtotime(date("Y-m-d ") . $time['close'] . ':00');			if ($open < $now_time && $now_time < $close) {				$flag = false;				break;			}		}		if ($flag) {			$this->error_tips('抱歉！当前不在营业时间内！');		}				$sorts = M("Meal_sort")->where(array('store_id' => $this->store_id))->order('`sort` DESC, `sort_id` ASC')->select();		$t_meals = $meals = $list = array();		$ids = array();		foreach ($sorts as $sort) {			if ($sort['is_weekshow']) {				$week = explode(",", $sort['week']);				if (in_array(date("w"), $week)) {					$list[$sort['sort_id']] = $sort;					$ids[] = $sort['sort_id'];				}			} else {				$list[$sort['sort_id']] = $sort;				$ids[] = $sort['sort_id'];			}		}		$disharr = unserialize($_SESSION[$this->session_index]);				$nowMouth = date('Ym');				$meal_image_class = new meal_image();		$temp = M("Meal")->where(array('store_id' => $this->store_id, 'sort_id' => array('in', $ids), 'status' => 1,'waimai_status'=>1))->order('sort DESC')->select();				$MOOBJ = D('Meal_order');				foreach ($temp as $m) {			if (isset($disharr[$m['meal_id']])) {				$m['num'] = $disharr[$m['meal_id']]['num'];			} else {				$m['num'] = 0;			}			// 			if ($m['sell_mouth'] != $nowMouth) $m['sell_count'] = 0;//跨月销售额清零			$check_stock = $MOOBJ->check_stock($m['meal_id']);			$m['max'] = $check_stock['stock_num'];						$m['image'] = $meal_image_class->get_image_by_path($m['image'],$this->config['site_url'],'s');			if (isset($t_meals[$m['sort_id']]['list'])) {				$t_meals[$m['sort_id']]['list'][] = $m;			} else {				$t_meals[$m['sort_id']]['list'] = array($m);				$t_meals[$m['sort_id']]['sort_id'] = $m['sort_id'];				$t_meals[$m['sort_id']]['sort_name'] = $list[$m['sort_id']]['sort_name'];			}		}		foreach ($ids as $sort_id) {			isset($t_meals[$sort_id]) && $meals[$sort_id] = $t_meals[$sort_id];		}				if ($this->_store['delivery_fee_valid']) {//不足起送价同样还是送// 			$this->_store['basic_price'] = 0;			$this->assign('store', $this->_store);					}		/* 粉丝行为分析 */		$this->behavior(array('mer_id' => $this->mer_id, 'biz_id' => $this->store_id,'keyword'=>strval($_GET['keywords'])));				$this->assign('meals', $meals);		$this->assign("sortlist", $list);		$this->display();    }    /**     * 订单信息确认     */    public function sureOrder()     {    	if (empty($this->_store)) {			$this->error_tips("不存在的商家店铺!", U('Takeout/index', array('mer_id' => $this->mer_id, 'store_id' => $this->store_id)));		}		$MOOBJ = D('Meal_order');        $dishtmp = $_POST['dish'];        if (empty($dishtmp)) {        	$disharr = unserialize($_SESSION[$this->session_index]);        } else {	        $disharr = array();			foreach ($dishtmp as $id => $num) {				$num = $num ? intval($num) : 0;				if ($num > 0) {					$check_stock = $MOOBJ->check_stock($id);					if ($check_stock['stock_num'] > -1 && $check_stock['stock_num'] < $num) {						$this->error_tips('您购买的' . $check_stock['name'] . '超出了库存量！', U('Takeout/menu', array('mer_id' => $this->mer_id, 'store_id' => $this->store_id)));					}					$disharr[$id] = array('id' => $id, 'num' => $num);				}			}        }		if (empty($disharr)) {			$this->error_tips('您尚未点菜！', U('Takeout/menu', array('mer_id' => $this->mer_id, 'store_id' => $this->store_id)));		}		$_SESSION[$this->session_index] = serialize($disharr);		$this->isLogin();				$merchant_store_meal = M("Merchant_store_meal")->where(array('store_id' => $this->store_id, 'mer_id' => $this->mer_id))->find();		$merchant_store = array_merge($this->_store, $merchant_store_meal);		$now_time = time();		$flag = true;		$time_list = array();		foreach ($merchant_store['office_time'] as $time) {			$open = strtotime(date("Y-m-d ") . $time['open'] . ':00');			$close = strtotime(date("Y-m-d ") . $time['close'] . ':00');			if ($open > $close) $close += 86400;			if ($now_time < $open) {				$t = $this->get_time_list($open, $close);				$time_list = array_merge($time_list, $t);			} elseif ($open <= $now_time && $now_time <= $close) {				$flag = false;				$t = $this->get_time_list($now_time, $close);				$time_list = array_merge($time_list, $t);			}					}		if ($flag) {			$this->error_tips('抱歉！尚未不在营业时间内！', U('Takeout/index', array('mer_id' => $this->mer_id, 'store_id' => $this->store_id)));		}		$ids = array_keys($disharr);		$meal_image_class = new meal_image();		$temp = M("Meal")->where(array('store_id' => $this->store_id, 'meal_id' => array('in', $ids), 'status' => 1))->select();		$t_menus = array();		foreach ($temp as $tm) {			$t_menus[$tm['meal_id']] = $tm;		}				$info = array();		foreach ($ids as $id) {			$m = $t_menus[$id];			$m['image'] = $meal_image_class->get_image_by_path($t_menus[$id]['image'],$this->config['site_url'],'s');			if (isset($disharr[$id])) {				$m['num'] = $disharr[$id]['num'];			} else {				$m['num'] = 0;			}			$check_stock = $MOOBJ->check_stock($id);			$m['max'] = $check_stock['stock_num'];						$meals[] = $m;		}								// 		foreach ($temp as $m) {// 			if (isset($disharr[$m['meal_id']])) {// 				$m['num'] = $disharr[$m['meal_id']]['num'];// 			} else {// 				$m['num'] = 0;// 			}// 			$m['image'] = $meal_image_class->get_image_by_path($m['image'],$this->config['site_url'],'s');// 			$meals[] = $m;// 		}		/* 粉丝行为分析 */		$this->behavior(array('mer_id' => $this->mer_id, 'biz_id' => $this->store_id,'keyword'=>strval($_GET['keywords'])));				$now_group['user_adress'] = D('User_adress')->get_one_adress($this->user_session['uid'],intval($_GET['adress_id']));					if ($this->_store['delivery_fee_valid']) {//不足起送价同样还是送// 			$this->_store['basic_price'] = 0;			$this->assign('store', $this->_store);						}				$this->assign('time_list', $time_list);		$this->assign('now_group', $now_group);		$this->assign('meals', $meals);		$this->display();    }	    private function get_time_list($startime, $endtime)    {    	if ($startime > $endtime) return null;    	if (date('Y-m-d') == '1970-01-01') return null;    	$s00 = strtotime(date('Y-m-d H:00:00', $startime));    	$s15 = strtotime(date('Y-m-d H:15:00', $startime));    	$s30 = strtotime(date('Y-m-d H:30:00', $startime));    	$s45 = strtotime(date('Y-m-d H:45:00', $startime));    	$s = 0;    	if ($s00 >= $startime) {    		$s = $s00;    	} elseif ($s15 >= $startime) {    		$s = $s15;    	} elseif ($s30 >= $startime) {    		$s = $s30;    	} elseif ($s45 >= $startime) {    		$s = $s45;    	} else {    		$s = $s00 + 3600;    	}    	for ($i = $s; $i <= $endtime;) {    		$time_list[] = date('H:i', $i);    		$i += 900;    	}    	return $time_list;    }    	public function OrderPay()	{		$this->isLogin();		if (IS_POST) {			$phone = isset($_POST['ouserTel']) ? htmlspecialchars($_POST['ouserTel']) : '';			$name = isset($_POST['ouserName']) ? htmlspecialchars($_POST['ouserName']) : '';			$address = isset($_POST['ouserAddres']) ? htmlspecialchars($_POST['ouserAddres']) : '';			$address_id = isset($_POST['address_id']) ? intval($_POST['address_id']) : 0;			$arrive_time = isset($_POST['oarrivalTime']) ? htmlspecialchars($_POST['oarrivalTime']) : 0;			$note = isset($_POST['omark']) ? htmlspecialchars($_POST['omark']) : '';			if (empty($name)) $this->error_tips('联系人不能为空');			if (empty($phone)) $this->error_tips('联系电话不能为空');			$goodsData = isset($_POST['dish']) ? $_POST['dish'] : null;			if (empty($goodsData)) $this->error_tips('您还没有点菜');			if ($user_address = D('User_adress')->field(true)->where()->find()) {				if ($user_address['longitude'] > 0 && $user_address['latitude'] > 0) {					$distance = $this->getDistance($user_address['latitude'], $user_address['longitude'], $this->_store['lat'], $this->_store['long']);					$delivery_radius = $this->_store['delivery_radius'] * 1000;					if ($distance > $delivery_radius) {						$this->error_tips('您要送达的地址不在本店的配送范围内');					}				}			}			if ($arrive_time && $this->_store['office_time']) {				$arrive_time = strtotime(date("Y-m-d " . $arrive_time . ":00"));				$flag = true;				foreach ($this->_store['office_time'] as $time) {					$open = strtotime(date("Y-m-d ") . $time['open'] . ':00');					$close = strtotime(date("Y-m-d ") . $time['close'] . ':00');					if ($open > $close) $close += 86400;					if ($open <= $arrive_time && $now_time <= $arrive_time) {						$flag = false;					}				}				if ($flag) {					$this->error_tips('抱歉！尚未不在营业时间内！');				}			}						$meal = array_keys($goodsData);			$total = $price = 0;			if ($meal) {				$meals = M("Meal")->where(array('meal_id' => array('in', $meal), 'store_id' => $this->store_id))->select();				$MOOBJ = D('Meal_order');				$t_menus = array();				foreach ($meals as $tm) {					$t_menus[$tm['meal_id']] = $tm;				}				$info = array();				foreach ($meal as $id) {					if (0 == intval($goodsData[$id]['num'])) continue;										$check_stock = $MOOBJ->check_stock($id);					if ($check_stock['stock_num'] > -1 && $check_stock['stock_num'] < $goodsData[$id]['num']) {						$this->error_tips('您购买的' . $check_stock['name'] . '超出了库存量！', U('Takeout/menu', array('mer_id' => $this->mer_id, 'store_id' => $this->store_id)));					}										$info[] = array('id' => $id,'name' => $t_menus[$id]['name'], 'num' => $goodsData[$id]['num'], 'price' => $t_menus[$id]['price'], 'iscount' => 0);					$total += $goodsData[$id]['num'];					$price += $goodsData[$id]['num'] * $t_menus[$id]['price'];				}				// 				$info = array();// 				foreach ($meals as $m) {// 					$info[] = array('id' => $m['meal_id'],'name' => $m['name'], 'num' => $goodsData[$m['meal_id']]['num'], 'price' => $m['price']);// 					$total += $goodsData[$m['meal_id']]['num'];// 					$price += $goodsData[$m['meal_id']]['num'] * $m['price'];// 				}			}			if (empty($this->_store['delivery_fee_valid']) && $price < $this->_store['basic_price']) {				$this->error_tips('您的外卖总金额没有达到起步价');			}						$delivery_fee = 0;			if ($this->_store['delivery_fee'] > 0) {//外卖费				if ($this->_store['reach_delivery_fee_type'] == 1) {					$delivery_fee = $this->_store['delivery_fee'];				} else {					if ($price < $this->_store['basic_price']) {//不足起送价						if ($this->_store['delivery_fee_valid']) {							$delivery_fee = $this->_store['delivery_fee'];						}					} else {						if ($this->_store['reach_delivery_fee_type'] == 2 && $price < $this->_store['no_delivery_fee_value']) {							$delivery_fee = $this->_store['delivery_fee'];						}					}				}			}						$total_price = $price + $delivery_fee;						$minus_price = 0;			//会员等级优惠  外卖费不参加优惠			$level_off = false;			if (!empty($this->user_level) && !empty($this->leveloff) && !empty($this->user_session) && isset($this->user_session['level'])) {				if (isset($this->leveloff[$this->user_session['level']]) && isset($this->user_level[$this->user_session['level']])) {					$level_off = $this->leveloff[$this->user_session['level']];					if ($level_off['type'] == 1) {						$minus_price = $price *((100 - $level_off['vv']) / 100);						$price = $price *($level_off['vv'] / 100);						$price = $price > 0 ? $price : 0;						$level_off['offstr'] = '按此次总价' . $level_off['vv'] . '%来结算';					} elseif($level_off['type'] == 2) {						$minus_price = $level_off['vv'];						$price = $price - $level_off['vv'];						$price = $price > 0 ? $price : 0;						$level_off['offstr'] = '此次总价立减' . $level_off['vv'] . '元';					}				}			}						if ($store_meal = D('Merchant_store_meal')->where(array('store_id' => $this->store_id))->find()) {				if (!empty($store_meal['minus_money']) && $price > $store_meal['full_money']) {					$price = $price - $store_meal['minus_money'];					$minus_price += $store_meal['minus_money'];				}			}			$price += $delivery_fee;						$data = array('arrive_time' => $arrive_time, 'mer_id' => $this->mer_id, 'store_id' => $this->store_id, 'name' => $name, 'phone' => $phone, 'address' => $address, 'note' => $note, 'info' => serialize($info), 'dateline' => time(), 'total' => $total, 'meal_type' => 1);			$data['orderid'] = $this->mer_id . $this->store_id . date("YmdHis") . rand(1000000, 9999999);			$data['uid'] = $this->user_session['uid'];			$data['meal_type'] = 1;			$data['address_id'] = $address_id;			$data['order_status'] = 2;			$data['price'] = $price;//当前要支付的金额			$data['delivery_fee'] = $delivery_fee;//外送费			$data['total_price'] = $total_price;//订单总价			$data['minus_price'] = $minus_price;//优惠的金额						!empty($level_off) && $data['leveloff']=serialize($level_off);						$orderid = D("Meal_order")->add($data);			if ($orderid) {				if ($this->user_session['openid']) {					$keyword2 = '';					$pre = '';					foreach (unserialize($data['info']) as $menu) {						$keyword2 .= $pre . $menu['name'] . ':' . $menu['price'] . '*' . $menu['num'];						$pre = '\n\t\t\t';					}					$href = C('config.site_url').'/wap.php?c=Takeout&a=order_detail&order_id='. $orderid . '&mer_id=' . $data['mer_id'] . '&store_id=' . $data['store_id'];					$model = new templateNews(C('config.wechat_appid'), C('config.wechat_appsecret'));					$model->sendTempMsg('OPENTM201682460', array('href' => $href, 'wecha_id' => $this->user_session['openid'], 'first' => '您好，您的订单已生成', 'keyword3' => $orderid, 'keyword1' => date('Y-m-d H:i:s'), 'keyword2' => $keyword2, 'remark' => '您的该次'.$this->config['meal_alias_name'].'下单成功，感谢您的使用！'));				}				$msg = ArrayToStr::array_to_str($orderid);				$op = new orderPrint($this->config['print_server_key'], $this->config['print_server_topdomain']);				$op->printit($this->mer_id, $this->store_id, $msg, 0);				$str_format = ArrayToStr::print_format($orderid);				foreach ($str_format as $print_id => $print_msg) {					$print_id && $op->printit($this->mer_id, $this->store_id, $print_msg, 0, $print_id);				}												$sms_data = array('mer_id' => $this->mer_id, 'store_id' => $this->store_id, 'type' => 'food');				if ($this->config['sms_place_order'] == 1 || $this->config['sms_place_order'] == 3) {					$sms_data['uid'] = $this->user_session['uid'];					$sms_data['mobile'] = $data['phone'];					$sms_data['sendto'] = 'user';					$sms_data['content'] = '您' . date("Y-m-d H:i:s", $data['dateline']) . '在【' . $this->_store['name'] . '】中预定了一份外卖，订单号：' . $orderid;					Sms::sendSms($sms_data);				}				if ($this->config['sms_place_order'] == 2 || $this->config['sms_place_order'] == 3) {					$sms_data['uid'] = 0;					$sms_data['mobile'] = $this->_store['phone'];					$sms_data['sendto'] = 'merchant';					$sms_data['content'] = '顾客【' . $data['name'] . '】在' . date("Y-m-d H:i:s", $data['dateline']) . '时预定了一份外卖，订单号：' . $orderid . '请您注意查看并处理!';					Sms::sendSms($sms_data);				}								/* 粉丝行为分析 */				$this->behavior(array('mer_id' => $this->mer_id, 'biz_id' => $orderid));								$_SESSION[$this->session_index] = null;								redirect(U('Pay/check',array('order_id' => $orderid, 'type'=>'takeout')));			}		} else {			$this->error();		}	}		public function order_list()	{		$this->isLogin();		$weeks = array('周日', '周一', '周二', '周三', '周四', '周五', '周六');		$this->isLogin();		$sql = "SELECT s.name, o.order_id, o.store_id, o.price, o.total, o.paid, o.pay_type, o.third_id, o.dateline, o.status FROM " . C('DB_PREFIX') . "merchant_store as s INNER JOIN " . C('DB_PREFIX') . "meal_order as o ON o.store_id=s.store_id WHERE o.meal_type=1 AND o.uid={$this->user_session['uid']} ORDER BY o.order_id DESC";		$mode = new Model();		$list = $mode->query($sql);		$order_list = array();		foreach ($list as $l) {			$l['date'] = date('Y-m-d', $l['dateline']) . ' ' . $weeks[date('w', $l['dateline'])] . ' ' . date('H:i', $l['dateline']);			switch ($l['status']) {				case 0:					$l['css'] = 'inhand';					$l['show_status'] = '处理中';					break;				case 1:					$l['css'] = 'confirm';					$l['show_status'] = '已使用';					break;				case 2:					$l['css'] = 'complete';					$l['show_status'] = '已评价';					break;				case 3:				case 4:					$l['css'] = 'cancle';					$l['show_status'] = '已取消';					break;				default:					$l['css'] = 'pending';					$l['show_status'] = '待定';			}			$order_list[] = $l;		}		$this->assign('order_list', $order_list);		$this->display();	}		public function order_detail()	{		$this->isLogin();		$order_id = isset($_GET['order_id']) ? intval($_GET['order_id']) : 0;		$weeks = array('周日', '周一', '周二', '周三', '周四', '周五', '周六');		$order = D('Meal_order')->field(true)->where(array('order_id' => $order_id, 'store_id'=>$_GET['store_id']))->find();		// file_put_contents('test.sql',D('Meal_order')->getLastSql());		if (empty($order)) $this->error_tips('不合法的订单查询请求');		$order['info'] = unserialize($order['info']);		$order['date'] = date('Y-m-d', $order['dateline']) . ' ' . $weeks[date('w', $order['dateline'])] . ' ' . date('H:i', $order['dateline']);		if ($order['arrive_time']) {			$order['arrive_time'] = date('H:i', $order['arrive_time']);		} else {			$order['arrive_time'] = '尽快送达';		}				switch ($order['status']) {			case 0:				$order['css'] = 'inhand';				$order['show_status'] = '处理中';				break;			case 1:				$order['css'] = 'confirm';				$order['show_status'] = '已使用';				break;			case 2:				$order['css'] = 'complete';				$order['show_status'] = '已评价';				break;			case 3:			case 4:				$order['css'] = 'cancle';				$order['show_status'] = '已取消';				break;			default:				$order['css'] = 'pending';				$order['show_status'] = '待定';		}		$order['price'] -= $order['delivery_fee'];		$order['paytypestr'] = D('Pay')->get_pay_name($order['pay_type']);		//当前人的openid		$openid=$_SESSION['openid'];		$arr=D('Merchant_store_staff')->where(array('store_id'=>$_GET['store_id']))->field('openid')->select();//获取所有该店店员		$arr_openid=array();		foreach ($arr as $k=>$v){//获取店员openid			$arr_openid[]=$v['openid'];		}		//dump($arr_openid);		//dump($openid);exit;		$this->assign('order', $order);		$this->assign('openid',$openid);		$this->assign('arr_openid',$arr_openid);		//dump($order);exit;		$this->display();	}	/*	 *店员接单确认	 *陈琦	 *2017.3.21	 */	public function check_confirm(){		$time=time();		$uid=$_POST['uid'];//订单人uid		$openid=$_POST['openid'];//接单人openid		$mer_id=$_POST['mer_id'];//商户id		$store_id=$_POST['store_id'];//店铺id		$order_id=$_POST['order_id'];//订单号		$price=$_POST['price'];//价格		$order_info=M('meal_order')->where(array('order_id'=>$order_id,'mer_id'=>$mer_id,'store_id'=>$store_id))->find();//查找当前订单信息		$employee_info=M('merchant_store_staff')->where(array('store_id'=>$store_id,'openid'=>$openid))->find();//接单人信息		$employee_name=$employee_info['name'];//接单人姓名		//echo json_encode(array('error'=>3,'msg'=>$employee_name));exit;		$employee_phone=$employee_info['tel'];//接单人电话		$merchant_info=M('merchant_store')->where('mer_id='.$mer_id)->find();		$merchant_name=$merchant_info['name'];//商户名称		if(!$order_info){			echo json_encode(array('error'=>1,msg=>'此订单不存在！'));		}		$data['is_confirm']=1;		$update=M('meal_order')->where(array('order_id'=>$order_id,'mer_id'=>$mer_id,'store_id'=>$store_id))->data($data)->save();		$user_info=M('user')->where('uid='.$uid)->find();//订单人的信息		$send_id=array('0'=>$user_info['openid']);		$keyword3 = '';		$pre = '';		foreach (unserialize($order_info['info']) as $menu) {			$keyword3 .= $pre . $menu['name'] . ':' . $menu['price'] . '*' . $menu['num'];			$pre = '\n\t\t\t';		}		$a = '';		$b = '';		foreach (unserialize($order_info['info']) as $menu) {			$a .= $b . $menu['name'] . ':' . $menu['price'] . '*' . $menu['num'];			$b = '<br><pre><pre><pre>';		}		//echo json_encode(array('error'=>3,'msg'=>$a));exit;		$message =array(            'url'=>C('config.site_url').'/wap.php?c=Takeout&a=check_detail&price='.$price.'&order_name='.$a.'&time='.$time.'&order_id='.$order_id.'&name='.$employee_name.'&phone='.$employee_phone.'&merchant_name='.$merchant_name.'&mer_id='.$mer_id.'&store_id='.$store_id,            'first_value'=>'您的订单已接单！',            'keyword1_value'=>$order_id,            'keyword2_value'=>$price.'元',            'keyword3_value'=>$keyword3,        );        $res=$this->send_message($send_id,$message);			if($update){			echo json_encode(array('error'=>0,'msg'=>'成功接单'));		}else{			echo json_encode(array('error'=>2,'msg'=>'接单失败'));		}	}	/*	 *接单确认后发送给用户的链接	 *陈琦	 *2017.3.21	 */	public function check_detail(){		$info=array(			'price'=>$_GET['price'],//价格			'order_name'=>htmlspecialchars_decode($_GET['order_name']),//商品信息			'time'=>$_GET['time'],//接单时间			'order_id'=>$_GET['order_id'],//订单号			'name'=>$_GET['name'],//接单人姓名			'phone'=>$_GET['phone'],//接单人电话			'merchant_name'=>$_GET['merchant_name'],//商户名			'mer_id'=>$mer_id,//商户id			'store_id'=>$store_id//店铺id			);		//dump($info);exit;		$this->assign('info',$info);		$this->display();	}	private function isLogin()	{		if (empty($this->user_session)) {			$this->error_tips('请先进行登录！',U('Login/index', array('referer' => urlencode("http://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI']))));		}	}		public function orderdel()	{		$this->isLogin();		$id = isset($_GET['orderid']) ? intval($_GET['orderid']) : 0;		if ($order = M('Meal_order')->where(array('order_id' => $id, 'uid' => $this->user_session['uid'], 'mer_id' => $this->mer_id, 'store_id' => $this->store_id))->find()) {			if ($order['paid'] == 1 && date('m', $order['dateline']) == date('m')) {				foreach (unserialize($order['info']) as $menu) {					D('Meal')->where(array('meal_id' => $menu['id'], 'sell_count' => array('gt', $menu['num'])))->setDec('sell_count', $menu['num']);				}			}			D("Merchant_store_meal")->where(array('store_id' => $order['store_id']))->setDec('sale_count', 1);			/* 粉丝行为分析 */			$this->behavior(array('mer_id' => $this->mer_id, 'biz_id' => $this->store_id));						M('Meal_order')->where(array('order_id' => $id, 'uid' => $this->user_session['uid'], 'mer_id' => $this->mer_id, 'store_id' => $this->store_id))->save(array('status' => 4));			$this->success_tips('订单取消成功', U('Takeout/order_list', array('mer_id' => $this->mer_id, 'store_id' => $this->store_id, 'type' => 0)));		} else {			$this->error_tips('订单取消失败！');		}			}    /*     * 计算两经纬度间的距离* */    private function getDistance($lat_a, $lng_a, $lat_b, $lng_b)     {        //R是地球半径（米）        $R = 6377830;        $pk = doubleval(180 / 3.1415926);        $a1 = doubleval($lat_a / $pk);        $a2 = doubleval($lng_a / $pk);        $b1 = doubleval($lat_b / $pk);        $b2 = doubleval($lng_b / $pk);        $t1 = doubleval(cos($a1) * cos($a2) * cos($b1) * cos($b2));        $t2 = doubleval(cos($a1) * sin($a2) * cos($b1) * sin($b2));        $t3 = doubleval(sin($a1) * sin($b1));        $tt = doubleval(acos($t1 + $t2 + $t3));        return round($R * $tt);    }      public function send_message($admin_user,$yueka_info){        //制作本地推送内容        foreach ($admin_user as $value){            $href = $yueka_info['url'];            $time=time();            $data=array(                'touser'=>$value,                'template_id'=>"U8cn3w-0kb9Wk3Zf_mzV149RS3AVgW6y4oVm3BQAMuw",                'url'=>$href,                'data'=>array(                    'first'=>array(                        'value'=>urlencode($yueka_info['first_value']),                        'color'=>"#029700",                    ),                    'keyword1'=>array(                        'value'=>urlencode($yueka_info['keyword1_value']),                        'color'=>"#000000",                    ),                    'keyword2'=>array(                        'value'=>urlencode($yueka_info['keyword2_value']),                        'color'=>"#000000",                    ),                    'keyword3'=>array(                        'value'=>urlencode($yueka_info['keyword3_value']),                        'color'=>"#000000",                    ),                )            );            $res[] = $this->send_template_message(urldecode(json_encode($data)));        }        return $res;    }     public function getToken(){        $url = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=" . $this->config['wechat_appid'] . "&secret=" . $this->config['wechat_appsecret'];        $Tokenarr = $this->https_request($url);        if (isset($Tokenarr['access_token'])) {            return $Tokenarr['access_token'];        }        return false;    }    /*     * 向用户推送模板消息     * */    public function send_template_message($data){        $access_token = $this->getToken();        $url = 'https://api.weixin.qq.com/cgi-bin/message/template/send?access_token='.$access_token;        $res=$this->https_request($url,$data);        return $res;    }     public function https_request($url, $data = null,$noprocess=false) {        $curl = curl_init();        curl_setopt($curl, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_0);        curl_setopt($curl, CURLOPT_USERAGENT, "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:39.0) Gecko/20100101 Firefox/39.0");        $header = array("Accept-Charset: utf-8");        curl_setopt($curl, CURLOPT_URL, $url);        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);        //curl_setopt($curl, CURLOPT_SSLVERSION, 3);        curl_setopt($curl, CURLOPT_HTTPHEADER, $header); /* * *$header 必须是一个数组** */        curl_setopt($curl, CURLOPT_HEADER, FALSE);        curl_setopt($curl, CURLINFO_HEADER_OUT, true);        if (!empty($data)) {            curl_setopt($curl, CURLOPT_POST, 1);            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);        }        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);        $output = curl_exec($curl);        if($noprocess) return $output;        $errorno = curl_errno($curl);        if ($errorno) {            return array('curl' => false, 'errorno' => $errorno);        } else {            $res = json_decode($output, 1);            if ($res['errcode']) {                return array('errcode' => $res['errcode'], 'errmsg' => $res['errmsg']);            } else {                return $res;            }        }        curl_close($curl);    }}?>